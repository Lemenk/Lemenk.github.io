<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lemenk&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lemenk.github.io/"/>
  <updated>2020-05-09T04:37:31.860Z</updated>
  <id>https://lemenk.github.io/</id>
  
  <author>
    <name>Lemenk</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker创建tomcat镜像 部署war项目</title>
    <link href="https://lemenk.github.io/2020/05/10/docker%E5%88%9B%E5%BB%BAtomcat%E9%95%9C%E5%83%8F%20%E9%83%A8%E7%BD%B2war%E9%A1%B9%E7%9B%AE/"/>
    <id>https://lemenk.github.io/2020/05/10/docker%E5%88%9B%E5%BB%BAtomcat%E9%95%9C%E5%83%8F%20%E9%83%A8%E7%BD%B2war%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-05-10T09:34:36.030Z</published>
    <updated>2020-05-09T04:37:31.860Z</updated>
    
    <content type="html"><![CDATA[<p>Docker中安装tomcat，并部署war项目</p><ol><li>新建war项目，并打成war包。</li><li>安装docker</li><li>拉取tomcat镜像</li><li>启动tomcat容器</li><li>上传war项目</li><li>访问项目</li></ol><p>教程开始。</p><h1 id="一、新建war项目，并打成war包。"><a href="#一、新建war项目，并打成war包。" class="headerlink" title="一、新建war项目，并打成war包。"></a>一、新建war项目，并打成war包。</h1><p>1、创建web项目。</p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_01.png" alt="image-20200509000324552" style="zoom:50%;" /><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_02.png" alt="image-20200509000614459" style="zoom: 80%;" /><p><strong>简单实验项目就不做复杂功能，只做一个index页面</strong></p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_03.png" alt="image-20200509000948707" style="zoom:50%;" /><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_04.png" alt="image-20200509001159607" style="zoom: 80%;" /><p>2、打包成war包。</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_05.png" alt="image-20200509001728107" style="zoom:50%;" /><img src="upload%5Cimage-20200509001939683.png" alt="image-20200509001939683"></p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_05.png" alt="image-20200509001728107" style="zoom:50%;" /><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_06.png" alt="image-20200509001939683"></p><p>点击加号，选择项目的目录。</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_07.png" alt="image-20200509002148921" style="zoom:50%;" /><img src="upload%5Cimage-20200509002321736.png" alt="image-20200509002321736"></p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_07.png" alt="image-20200509002148921" style="zoom:50%;" /><p>右键单击项目名称，选择<code>Put into Output Root</code></p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_08.png" alt="image-20200509002321736"></p><p>最终的结果。然后apply就好。</p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_09.png" alt="image-20200509002654806" style="zoom:50%;" /><p>3、bulidwar包</p><p>点击bulid，选择Build Artifacts…</p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_10.png" alt="image-20200509002823186" style="zoom:50%;" /><p>选择这个war包，点击build或者Rebuild。</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_11.png" alt="image-20200509002958253"></p><p>这样就可以在图7中的目录里找到war包。</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/image-20200509003250974.png" alt="image-20200509003250974"></p><h1 id="二、安装docker，并拉取tomcat镜像。"><a href="#二、安装docker，并拉取tomcat镜像。" class="headerlink" title="二、安装docker，并拉取tomcat镜像。"></a>二、安装docker，并拉取tomcat镜像。</h1><p>我这里使用的是centOS7。</p><p>这里可以看我另一篇docker博客，有详细的命令介绍。</p><p>拉取tomcat镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker  search tomcat  <span class="comment">#查找tomcat镜像</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker pull tomcat  <span class="comment">#拉取最后一个版本的tomcat镜像</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker images       <span class="comment">#查看当前所有镜像</span></span></span><br></pre></td></tr></table></figure><p>在某一个位置创建容器挂载的目录。我在<code>/usr/local/mytomcat/webapps</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建容器 并挂在在这个目录下。</span></span><br><span class="line">docker run -d --name mytomcat -p 80:8080  -v /usr/local/webapps:/usr/local/tomcat/webapps  -v /etc/localtime:/etc/localtime 927899a31456</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明：</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d：让其在后台运行；--name：把当前容器修改名称为mytomcat；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p 80:8080：80为外部访问端口，简单来说就是浏览器中输入的端口，需要开启。8080为tomcat的端口。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-v：挂在目录。冒号之前为宿主机的目录，后者为docker的tomcat中的目录。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">最后的数字川为docker images查询得到的这个镜像的id</span></span><br></pre></td></tr></table></figure><p>容器创建成功，可根据<code>docker ps -a</code>查询正在运行的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">f3239a4bc8b8        927899a31456        "catalina.sh run"   About an hour ago   Up About an hour    0.0.0.0:80-&gt;8080/tcp   mytomcat</span><br></pre></td></tr></table></figure><p>进入容器内文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span> -it f3239a4bc8b8 /bin/bash    <span class="comment">#f3239a4bc8b8为容器id</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">ls 此时可以看到多个目录</span></span><br><span class="line">BUILDING.txt  CONTRIBUTING.md  LICENSENOTICEREADME.md  RELEASE-NOTES  RUNNING.txt  bin  conf  include  liblogs  native-jni-lib  temp  webapps  webapps.dist  work</span><br></pre></td></tr></table></figure><p>此时如果使用<code>公网ip地址:80</code>会报404错误，这是因为tomcat的自带项目文件在<code>webapps.dist</code>目录下，而webapps目录为空。可通过以下操作访问tomcat首页。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm -rf webapps           <span class="comment">#删除空文件夹</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mv webapps.dist webapps  <span class="comment">#重命名为webapps</span></span></span><br></pre></td></tr></table></figure><p>此时可以通过公网ip地址访问tomcat首页。（80端口号可以省略）</p><h1 id="三、上传war项目，访问项目。"><a href="#三、上传war项目，访问项目。" class="headerlink" title="三、上传war项目，访问项目。"></a>三、上传war项目，访问项目。</h1><p>将步骤一中制作好的Test.war包通过ftp上传到此前设置好的<code>/usr/local/mytomcat/webapps</code>目录下。</p><p>再次进入容器内，可以看到war包和已经呗tomcat服务器解压的Test文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker <span class="built_in">exec</span> -it f3239a4bc8b8 /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> webapps</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">Test Test.war</span><br></pre></td></tr></table></figure><p>重启容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker restart f3239a4bc8b8</span></span><br></pre></td></tr></table></figure><p>静待几分钟，等服务器启动刷新便可通过<code>公网ip地址:/Test</code>访问到该项目。</p><p>若需要只通过公网ip地址访问，可以修改Test.war包为ROOT.war。重启之后便可。</p><p>或者可以通过修改server.xml的方式。</p><p>至此结束。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>此次在服务器的docker部署Wab项目看似不难，但对于运维新手来说也并不是很快就能完成的。对于我这个菜鸟来说，花费了至少三个小时才完全搞明白，然后又花费了近四十分钟完成这篇博客。</p><p>其中易错点是：</p><ol><li>容器内的文件不能直接修改，必须得通过宿主机中的文件移动到webapps文件夹中，或者就使用我的方法进行目录挂载。</li><li>在其中一次尝试中看教程修改conf/server.xml文件，但是依旧不能访问。后来果断放弃。到现在也不明白如何正确修改server.xml文件。</li><li>就在最后一步，重启容器后需要等待一段时间。我有好几次倒在这一步，每次都是页面刷新转圈不能显示。然后我就心急寻找解决方案。最后一次是重启容器之后，恰好女朋友给我发消息，回复完后刷新页面竟然就访问成功了。啊哈哈哈，在这里得感谢女朋友。</li></ol><p>2020年5月9日，凌晨1点15分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker中安装tomcat，并部署war项目&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新建war项目，并打成war包。&lt;/li&gt;
&lt;li&gt;安装docker&lt;/li&gt;
&lt;li&gt;拉取tomcat镜像&lt;/li&gt;
&lt;li&gt;启动tomcat容器&lt;/li&gt;
&lt;li&gt;上传war项目&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>记录SQLFeatureNotSupportedException异常</title>
    <link href="https://lemenk.github.io/2020/05/10/%E8%AE%B0%E5%BD%95SQLFeatureNotSupportedException%E5%BC%82%E5%B8%B8/"/>
    <id>https://lemenk.github.io/2020/05/10/%E8%AE%B0%E5%BD%95SQLFeatureNotSupportedException%E5%BC%82%E5%B8%B8/</id>
    <published>2020-05-10T09:34:35.810Z</published>
    <updated>2020-04-27T07:55:02.140Z</updated>
    
    <content type="html"><![CDATA[<p>记录<code>SQLFeatureNotSupportedException</code>异常</p><p>数据库中<code>create_time</code>字段的类型是<code>datetime</code></p><p>使用<code>mybatis-plus</code>逆向工程生成实体类后，<code>create_time</code>的类型为<code>LocalDateTime</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br></pre></td></tr></table></figure><p>这是由于<code>mybatis-plus</code>在3.0以上默认时间为<code>LocalDateTime</code>类型。</p><p>至于为什么是<code>LocalDateTime</code>，可以</p><p>因此就会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Error attempting to get column <span class="string">'create_time'</span> from result set.  Cause: java.sql.SQLFeatureNotSupportedException; <span class="keyword">null</span>;nested exception is java.sql.SQLFeatureNotSupportedException</span><br></pre></td></tr></table></figure><p>解决办法：</p><ul><li><strong>mybatis-plus版本降至3.1.0或以下即可</strong></li><li><strong>也可以参考下面网友提供的其它解决方法</strong></li><li><strong><a href="https://mp.baomidou.com/guide/faq.html#error-attempting-to-get-column-create-time-from-result-set-cause-java-sql-sqlfeaturenotsupportedexception" target="_blank" rel="noopener">官方解决方案</a>： 1. 升级druid到1.1.21解决这个问题；2.保持mp版本3.1.0；3.紧跟mp版本，换掉druid数据源</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录&lt;code&gt;SQLFeatureNotSupportedException&lt;/code&gt;异常&lt;/p&gt;
&lt;p&gt;数据库中&lt;code&gt;create_time&lt;/code&gt;字段的类型是&lt;code&gt;datetime&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;mybatis-pl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git学习笔记</title>
    <link href="https://lemenk.github.io/2020/03/04/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lemenk.github.io/2020/03/04/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-03-04T02:17:28.000Z</published>
    <updated>2020-03-22T08:03:09.998Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Git技巧总结"><a href="#Git技巧总结" class="headerlink" title="Git技巧总结"></a>Git技巧总结</h4><a id="more"></a><h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><h2 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h2><p>1991年，Linus创建了开源的Linux，由于多人参与代码编写，代码管理十分麻烦。最初是由Linus手工方式合并的。2005年，Linus使用C语言编写了一个分布式版本控制系统，就是Git。</p><p>2008年，GitHub网站上线，可以免费且开源的方式提供Git存储。众多项目开始迁移至GitHub。</p><h2 id="集中式和分布式"><a href="#集中式和分布式" class="headerlink" title="集中式和分布式"></a>集中式和分布式</h2><p>集中式版本控制系统：CVS、SVN</p><p>分布式版本控制系统：Git</p><p>区别：</p><ol><li>集中式版本控制系统：版本库存放在中央服务器，需要先从中央服务器获取最新版本的代码下载至本机，然后修改完成后再将代码推送至中央服务器。<strong>需要联网</strong>。</li><li>分布式版本控制系统：每个人的电脑上都有一个完整的版本库，在修改完成后只要将修改的内容推送到对方或者存储库（如GitHub）即可。</li></ol><p><strong>与集中式相比，分布式安全性能更高。而且还具有强大的分支管理功能。</strong></p><h1 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h1><h2 id="在Windows上"><a href="#在Windows上" class="headerlink" title="在Windows上"></a>在Windows上</h2><p>1、在官网下载安装程序：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">传送门</a></p><p>2、打开<strong>Git Bash</strong></p><p>3、配置本机Git参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"Your Name"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"email@example.com"</span></span></span><br></pre></td></tr></table></figure><h2 id="在Linux上"><a href="#在Linux上" class="headerlink" title="在Linux上"></a>在Linux上</h2><p><a href="https://git-scm.com/download/linux" target="_blank" rel="noopener">官网教程</a></p><p><strong>Debian/Ubuntu</strong></p><p><code># apt-get install git</code></p><p><strong>CentOS</strong></p><p>一、使用yum安装</p><ol><li><p>安装git：<code>yum install git</code></p></li><li><p>查看yum源仓库Git信息：<code>yum info git</code></p></li><li><p>安装依赖库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line"></span><br><span class="line">yum install gcc-c++ perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li></ol><p>二、通过源码构建，<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/" target="_blank" rel="noopener">下载地址</a>。</p><p>查看版本信息：<strong>git –version</strong></p><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>版本库，又名仓库，英文名为<strong>repository</strong>。是一个被Git管理起来的目录。</p><p>1、在Windows上进入<strong>Git Bash</strong>，在Linux中进入命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建名为test的目录</span><br><span class="line">$ mkdir test</span><br><span class="line"></span><br><span class="line">$ cd test</span><br><span class="line">#查看目录</span><br><span class="line">$ pwd</span><br><span class="line">&#x2F;c&#x2F;~~~&#x2F;Desktop&#x2F;test</span><br></pre></td></tr></table></figure><p>2、通过<code>git init</code>命令将其作为Git仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>文件夹中会出现一个<code>.git</code>文件夹目录，默认是隐藏的。</p><p>3、编写文件，first.txt</p><p>4、用命令<code>git add</code>告诉Git，把文件添加到仓库：</p><p>提交名为<code>first.txt</code>的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add first.txt</span></span><br></pre></td></tr></table></figure><p>提交所有文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br></pre></td></tr></table></figure><p>5、用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 双引号内为说明信息</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"第一次提交"</span></span></span><br><span class="line">[master (root-commit) 9aa8dfe] 第一次提交</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 first.txt</span><br></pre></td></tr></table></figure><p>6、使用<code>git status</code>命令看看结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><h1 id="修改删除文件"><a href="#修改删除文件" class="headerlink" title="修改删除文件"></a>修改删除文件</h1><ol><li><p>修改first.txt文件</p></li><li><p>运行<code>git status</code>命令看看结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git restore &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line">        modified:   first.txt</span><br></pre></td></tr></table></figure><p>提示first.txt文件已经被修改过了，使用<code>git add</code>添加到仓库或者使用<code>git restore</code>命令取消修改</p></li><li><p>使用 git diff命令查看修改信息记录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git diff</span></span><br><span class="line">diff --git a/first.txt b/first.txt</span><br><span class="line">index ba9c1ad..84fc394 100644</span><br><span class="line">--- a/first.txt</span><br><span class="line">+++ b/first.txt</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line"> nihao</span><br><span class="line">+你好</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>git restore</code>命令取消修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git restore first.txt</span></span><br></pre></td></tr></table></figure><p>使用<code>git status</code>命令看看结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></li></ol><h1 id="版本修改"><a href="#版本修改" class="headerlink" title="版本修改"></a>版本修改</h1><ol><li><p>使用<code>git log</code>命令查看提交历史记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit 925cdee529fb05cbdf3ae1b65e0d3199be173a2a (HEAD -&gt; master)</span><br><span class="line">Author: 用户名和邮箱</span><br><span class="line">Date:   日期</span><br><span class="line"></span><br><span class="line">    第二次提交</span><br><span class="line"></span><br><span class="line">commit 9aa8dfe6369f514a3b73f58be89ed048de4bed1f</span><br><span class="line">Author: 用户名和邮箱</span><br><span class="line">Date:   日期</span><br><span class="line"></span><br><span class="line">    第一次提交</span><br></pre></td></tr></table></figure><p>其中，HEAD标识当前版本。上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，以此类推。也可以写成<code>HEAD~150</code>标识150个版本以前。</p><p>可以根据日期查看提交的先后顺序。</p></li><li><p>使用<code>git reset</code>命令回退到上一个版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line">HEAD is now at 9aa8dfe 第一次提交</span><br></pre></td></tr></table></figure><p>当前first.txt内容已经改变。</p></li><li><p>再使用<code>git log</code>查看日志：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit 9aa8dfe6369f514a3b73f58be89ed048de4bed1f (HEAD -&gt; master)</span><br><span class="line">Author: Lemenk &lt;Lemenk@163.com&gt;</span><br><span class="line">Date:   Wed Mar 4 11:10:18 2020 +0800</span><br><span class="line"></span><br><span class="line">    第一次提交</span><br></pre></td></tr></table></figure></li><li><p>如果想要回退到上次版本，可以根据版本号回退</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 其中925cd为版本号前几位，并不用写全。git会自动查找。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard 925cd</span></span><br><span class="line">HEAD is now at 925cdee 第二次提交</span><br></pre></td></tr></table></figure></li><li><p>使用git reflog命令查看此前的每一次命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reflog</span></span><br><span class="line">925cdee (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 925cd</span><br><span class="line">9aa8dfe HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">925cdee (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: 第二次提交</span><br><span class="line">9aa8dfe HEAD@&#123;3&#125;: commit (initial): 第一次提交</span><br></pre></td></tr></table></figure></li></ol><p><strong>总结</strong>：Git中可以随时查看版本信息，并且可以通过命令进行回退操作。</p><p>Git管理的文件分为：工作区，版本库。</p><p>版本库又分为暂存区stage和暂存区分支master(仓库)</p><p>工作区—–&gt;&gt;暂存区—–&gt;&gt;仓库</p><p>git add把文件从工作区—–&gt;&gt;暂存区，<code>git commit</code>把文件从暂存区—–&gt;&gt;仓库，</p><p><code>git diff</code>查看工作区和暂存区差异，</p><p><code>git diff --cached</code>查看暂存区和仓库差异，</p><p><code>git diff HEAD</code> 查看工作区和仓库的差异，</p><p>git add的反向命令<code>git checkout</code>或者<code>git restore</code>，撤销工作区修改，即把暂存区最新版本转移到工作区，</p><p><code>git commit</code>的反向命令<code>git reset HEAD</code>或者<code>git restore --staged</code>，就是把仓库最新版本转移到暂存区。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>使用GitHub或者Gitee创建远程仓库。</p><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要设置SSH Key。</p><ol><li><p>创建SSH Key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "你的GitHub注册邮箱"</span><br></pre></td></tr></table></figure></li><li><p>在用户目录下可以看到.ssh文件夹。<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p></li><li><p>将<code>id_rsa.pub</code>内容全部复制，打开GitHub，“Account settings”，“SSH Keys”页面，填写随意的title，粘贴<code>id_rsa.pub</code>内容即可。</p></li><li><p>GitHub允许添加多个Key，只要将key添加到GitHub即可。</p></li></ol><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><ol><li><p>创建一个新的仓库，Repository name最好与本地仓库名称一致。</p></li><li><p>在本地仓库运行命令：关联远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 账户名处应为GitHub的用户名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> origin为远程库的名字。可以更改，但建议使用该名称。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git部分参数也可以使用github上仓库的url地址</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:Lemenk/test.git</span></span><br></pre></td></tr></table></figure></li><li><p>用<code>git pull</code>命令合并两个仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --allo……为参数</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git pull origin master --allow-unrelated-histories</span></span><br></pre></td></tr></table></figure></li><li><p>用<code>git push</code>命令，把当前分支<code>master</code>推送到远程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> $ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash">git push origin master:master</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> url例如：https://github.com/Lemenk/test.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> 仓库url</span></span><br></pre></td></tr></table></figure><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>在Git中，master为主分支，即master分支。</p><h2 id="创建合并删除分支"><a href="#创建合并删除分支" class="headerlink" title="创建合并删除分支"></a>创建合并删除分支</h2><ol><li><p>创建dev分支，并切换到dev分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch -c dev</span></span><br><span class="line">Switched to a new branch 'dev'</span><br></pre></td></tr></table></figure><p><code>git switch</code>命令加上<code>-c</code>参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git switch dev</span></span><br><span class="line">Switched to branch 'dev'</span><br></pre></td></tr></table></figure></li><li><p>用<code>git branch</code>命令查看当前分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>在当前分支前会标上<code>*</code>号。</p></li><li><p>在dev分支上对文件进行修改，比如修改first.txt。</p></li><li><p>提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"new branch"</span></span></span><br><span class="line">[dev 324481f] new branch</span><br><span class="line"> 2 files changed, 3 insertions(+)</span><br></pre></td></tr></table></figure></li><li><p>切换到master分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git switch master</span></span><br><span class="line">Switched to branch 'master'</span><br></pre></td></tr></table></figure></li><li><p>此时查看文件时并没有修改的信息。，表明刚才的提交是在dev分支。</p></li><li><p>合并分支<code>git merge</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line">Updating 8471d6f..324481f</span><br><span class="line">Fast-forward</span><br><span class="line"> README.md | 2 ++</span><br><span class="line"> first.txt | 1 +</span><br><span class="line"> 2 files changed, 3 insertions(+)</span><br></pre></td></tr></table></figure><p><code>git merge</code>命令用于合并指定分支到当前分支。</p></li><li><p>删除分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev</span></span><br><span class="line">Deleted branch dev (was 324481f).</span><br></pre></td></tr></table></figure></li><li><p>查看分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br></pre></td></tr></table></figure></li></ol><h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>在创建dev分支后，修改文件并提交。然后切换到master主分支修改文件后提交会自动进入vi页面。</p><p>此时需要填写合并信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br><span class="line">Merge made by the 'recursive' strategy.</span><br><span class="line"> first.txt | 3 ++-</span><br><span class="line"> 1 file changed, 2 insertions(+), 1 deletion(-)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Git技巧总结&quot;&gt;&lt;a href=&quot;#Git技巧总结&quot; class=&quot;headerlink&quot; title=&quot;Git技巧总结&quot;&gt;&lt;/a&gt;Git技巧总结&lt;/h4&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot学习笔记</title>
    <link href="https://lemenk.github.io/2020/02/26/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lemenk.github.io/2020/02/26/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-26T00:53:10.000Z</published>
    <updated>2020-03-31T06:34:19.396Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot学习笔记"><a href="#SpringBoot学习笔记" class="headerlink" title="SpringBoot学习笔记"></a>SpringBoot学习笔记</h3><a id="more"></a><h1 id="一、Spring-Boot基础"><a href="#一、Spring-Boot基础" class="headerlink" title="一、Spring Boot基础"></a>一、Spring Boot基础</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><p>简化Spring应用开发的一个框架；</p><p>整个Spring技术栈的一个大整合；</p><p>J2EE开发的一站式解决方案；</p><h2 id="2、入门案例HelloWorld"><a href="#2、入门案例HelloWorld" class="headerlink" title="2、入门案例HelloWorld"></a>2、入门案例HelloWorld</h2><p>实现功能：浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><h3 id="1、步骤"><a href="#1、步骤" class="headerlink" title="1、步骤"></a>1、步骤</h3><ol><li><p>创建maven普通jar工程，导入spring boot依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写主程序，用来启动spring boot</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> :该注解标注一个主程序类，说明这是一个spring boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldMainApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将Spring boot程序启动起来</span></span><br><span class="line">        SpringApplication.run(HelloWorldMainApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写相关controller、service相关类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行及部署</p><ul><li><p>运行：直接执行主程序</p></li><li><p>部署：使用maven插件，将应用打包成可执行的jar包，直接使用<strong>java -jar</strong>命令执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="2、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#2、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="2、使用Spring Initializer快速创建Spring Boot项目"></a>2、使用Spring Initializer快速创建Spring Boot项目</h3><p>使用Spring Initializer会联网创建一个Spring Boot项目。</p><ul><li>主程序自动生成，只用编写业务逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RestController</span> 注解是<span class="doctag">@ResponseBody</span>和<span class="doctag">@Controller</span>结合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world quick"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、配置文件"><a href="#3、配置文件" class="headerlink" title="3、配置文件"></a>3、配置文件</h3><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的<strong>作用</strong>：修改SpringBoot自动配置的默认值；</p><h4 id="1、YAML"><a href="#1、YAML" class="headerlink" title="1、YAML"></a>1、YAML</h4><p>YAML（YAML Ain’t Markup Language）</p><p><em>YAML<em>是”YAML Ain’t a Markup Language”（YAML不是一种标记语言的递归缩写。在开发的这种语言时，</em>YAML</em> 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言），但为了强调这种语言<strong>以数据做为中心</strong>，而不是以标记语言为重点，而用<strong>反向缩略语重命名</strong>。</p><p>与XML语言对比：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#YAML方式</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--XML方式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">port</span>&gt;</span>8090<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h4><h5 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h5><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure><p>属性和值也是大小写敏感；</p><h5 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h5><p>2.1、<strong>普通值</strong>（数字，字符串，布尔）</p><p>k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                例子：name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                例子：name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><p>2.2、<strong>对象、Map</strong>（属性和值）（键值对）：</p><p>k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line"><span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><p>行内写法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">18</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>2.3、<strong>数组</strong>（List、Set）：</p><p>用- 值表示数组中的一个元素</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure><h4 id="3、配置文件注入"><a href="#3、配置文件注入" class="headerlink" title="3、配置文件注入"></a>3、配置文件注入</h4><p>3.1、编写配置文件：application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birthday:</span> <span class="number">2012</span><span class="string">/05/23</span></span><br><span class="line">  <span class="attr">map:</span> <span class="string">&#123;k1:</span> <span class="string">v1,</span> <span class="attr">k2:</span> <span class="number">2</span><span class="string">&#125;</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">zhaoliu</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">狗子</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>3.2、在javaBean中使用注解注入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将配置文件中配置的属性值映射到该组件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ConfigurationProperties</span> ：该注解将本类中所有属性与配置文件中属性绑定</span></span><br><span class="line"><span class="comment"> * prefix = "person"：与配置文件中的进行绑定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> ：把普通pojo实例化到spring容器中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3、添加pom坐标，配置文件处理器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.4、测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、相关注解"><a href="#4、相关注解" class="headerlink" title="4、相关注解"></a>4、相关注解</h4><ol><li><p><strong>@ConfigurationProperties</strong>：该注解将本类中所有属性与配置文件中属性绑定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br></pre></td></tr></table></figure><p><code>prefix = &quot;person&quot;</code>：与配置文件中的进行绑定</p></li><li><p>@<strong>PropertySource</strong>：加载指定的配置文件。</p><p><code>@PropertySource(value = {&quot;classpath:person.properties&quot;})</code></p><p>person.properties为指定的文件</p></li><li><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别。@<strong>ImportResource</strong>需要标注在一个配置类上。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@ImportResource(locations = &#123;"classpath:beans.xml"&#125;)</span><br><span class="line">导入Spring的配置文件让其生效</span><br></pre></td></tr></table></figure><p>xml配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"top.lemenk.springboot.service.HelloService"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span><span class="comment">//指明当前类是配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中，容器中这些组件的默认的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//给容器中添加组件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="5、profile"><a href="#5、profile" class="headerlink" title="5、profile"></a>5、profile</h4><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><ol><li><p>yml文件方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8084</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span>  <span class="comment">#指定属于哪个环境</span></span><br></pre></td></tr></table></figure></li><li><p>其他方式</p><p>在配置文件中指定  spring.profiles.active={profile}</p></li></ol><h1 id="二、日志"><a href="#二、日志" class="headerlink" title="二、日志"></a>二、日志</h1><h2 id="1、常见日志"><a href="#1、常见日志" class="headerlink" title="1、常见日志"></a>1、常见日志</h2><p>常见日志种类：JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><p><strong>SpringBoot选用 SLF4j和logback；</strong></p><h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h1 id="三、Web开发"><a href="#三、Web开发" class="headerlink" title="三、Web开发"></a>三、Web开发</h1><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><h1 id="四、SpringBoot与数据访问"><a href="#四、SpringBoot与数据访问" class="headerlink" title="四、SpringBoot与数据访问"></a>四、SpringBoot与数据访问</h1><h2 id="1、JDBC数据访问"><a href="#1、JDBC数据访问" class="headerlink" title="1、JDBC数据访问"></a>1、JDBC数据访问</h2><p>1、pom文件依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置文件：application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://39.96.42.61:3307/springboot</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><p>3、测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    System.out.println(dataSource.getClass());</span><br><span class="line">    Connection connection = dataSource.getConnection();</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Spring Boot2之后默认数据源为：</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">zaxxer</span>.<span class="title">hikari</span>.<span class="title">HikariDataSource</span></span></span><br><span class="line"><span class="class">可以在配置文件中配置</span></span><br><span class="line"><span class="class"><span class="title">HikariProxyConnection</span>@1195909598 <span class="title">wrapping</span> <span class="title">com</span>.<span class="title">mysql</span>.<span class="title">cj</span>.<span class="title">jdbc</span>.<span class="title">ConnectionImpl</span>@3<span class="title">d64c581</span></span></span><br></pre></td></tr></table></figure><p>5、运行建表语句：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">schema-*.sql、data-*.sql</span></span><br><span class="line"><span class="string">默认规则，将sql文件命名为：schema.sql，schema-all.sql；</span></span><br><span class="line"><span class="string">默认在resources目录下寻找</span></span><br><span class="line"></span><br><span class="line"><span class="string">也可以在配置文件中指定位置：</span></span><br><span class="line"><span class="attr">schema:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">classpath:department.sql</span></span><br><span class="line">      </span><br><span class="line"><span class="string">***：在运行完建表语句后需要将改文件删除，否则会在下次重启服务器是覆盖掉该表</span></span><br></pre></td></tr></table></figure><p>6、自动配置了JdbcTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplateController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">map</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = jdbcTemplate.queryForList(<span class="string">"select * from department"</span>);</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、整合Mybatis"><a href="#2、整合Mybatis" class="headerlink" title="2、整合Mybatis"></a>2、整合Mybatis</h2><p>1、pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入druid--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置druid</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#配置jdbc数据连接</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#基本配置</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://数据库地址</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#其他配置</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">validation-query-timeout:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">100000</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#监控配置#</span></span><br><span class="line">      <span class="comment"># WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter</span></span><br><span class="line">      <span class="attr">web-stat-filter.enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">web-stat-filter.url-pattern:</span> <span class="string">/*</span></span><br><span class="line">      <span class="attr">web-stat-filter.exclusions:</span> <span class="string">[.js,.gif,.jpg,.png,.css,.sql]</span></span><br><span class="line">      <span class="comment"># StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置</span></span><br><span class="line">      <span class="attr">stat-view-servlet.enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">#配置url打开，此时为http://localhost:8080/druid</span></span><br><span class="line">      <span class="attr">stat-view-servlet.url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">      <span class="attr">stat-view-servlet.reset-enable:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment">#配置登陆用户名和密码</span></span><br><span class="line">      <span class="attr">stat-view-servlet.login-username:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">stat-view-servlet.login-password:</span> <span class="string">admin</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 配置StatFilter</span></span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">db-type:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">5000</span></span><br><span class="line">        <span class="comment"># 配置WallFilter</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">db-type:</span> <span class="string">mysql</span></span><br><span class="line">          <span class="comment">#学习阶段需要开启</span></span><br><span class="line">          <span class="attr">config:</span></span><br><span class="line">            <span class="attr">delete-allow:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">drop-table-allow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3、创建javaBean</p><p>4、mybatis对数据的CURD操作</p><ol><li><p>注解：</p><ul><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dept/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDeptById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/dept"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">insertDept</span><span class="params">(Department department)</span></span>&#123;</span><br><span class="line">        departmentMapper.insertDept(department);</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自动生成递增主键，并指明是id属性</span></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) value(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li><p>配置文件：</p><ul><li><p>全局配置文件：mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置驼峰式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Mapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>具体类配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.lemenk.data_mybatis.mapper.EmployeeMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"top.lemenk.data_mybatis.bean.Employee"</span>&gt;</span></span><br><span class="line">        SELECT * FROM employee WHERE id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmp"</span>&gt;</span></span><br><span class="line">        INSERT INTO employee(lastName,email,gender,d_id) VALUES (#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;dId&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>主配置文件需要配置mybatis配置文件路径：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></table></figure></li><li><p>web类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/emp/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> employeeMapper.getEmpById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3、整合SpringData-JPA"><a href="#3、整合SpringData-JPA" class="headerlink" title="3、整合SpringData JPA"></a>3、整合SpringData JPA</h2><p>1、导入pom依赖文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写实体类bean，并用注解和数据表进行映射，配置好映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span><span class="comment">//告诉JPA这是一个实体类，与数据表映射</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>)<span class="comment">//注定与之对应的数据表名，默认表名为类名小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span><span class="comment">//标识主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>,length = <span class="number">50</span>)<span class="comment">//与数据表一个列对应</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span><span class="comment">//若省略则默认数据表类名为属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编写Dao接口来操作实体类对应的数据表（Respository）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/继承JpaRepository来完成对数据库的操作</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt;</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>4、在配置文件中进行基本配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#JAP配置</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="comment">#更新或者创建数据表结构</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="comment">#在控制台显示SQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>5、Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line">        User user = userRepository.findById(id).orElse(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        User save = userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> save;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、整合Redis"><a href="#4、整合Redis" class="headerlink" title="4、整合Redis"></a>4、整合Redis</h2><ol><li><p>安装Redis</p><p>在linux的docker中加入Redis容器，并启动</p></li><li><p>在pom文件加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--集成redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在主配置文件中配置redis属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">39.96</span><span class="number">.42</span><span class="number">.61</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入Redis模板</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试redis的数据类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//给key为msg的值追加hello。</span></span><br><span class="line">              stringRedisTemplate.opsForValue().append(<span class="string">"msg"</span>,<span class="string">"hello"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt;get msg</span><br><span class="line">"hello"</span><br></pre></td></tr></table></figure></li></ol><h1 id="五、SpringBoot整合Swagger"><a href="#五、SpringBoot整合Swagger" class="headerlink" title="五、SpringBoot整合Swagger"></a>五、SpringBoot整合Swagger</h1><h2 id="1、Swagger简介"><a href="#1、Swagger简介" class="headerlink" title="1、Swagger简介"></a>1、Swagger简介</h2><p><a href="https://swagger.io/" target="_blank" rel="noopener">swagger官网</a></p><ul><li>号称最流行的API框架</li><li>RestFul API文档在线自动生成，<strong>同步更新</strong></li><li>直接运行，可在线测试</li><li>支持多种语言</li></ul><h2 id="2、在SpringBoot中集成Swagger"><a href="#2、在SpringBoot中集成Swagger" class="headerlink" title="2、在SpringBoot中集成Swagger"></a>2、在SpringBoot中集成Swagger</h2><p>1、创建spring-web工程</p><p>2、导入swagger相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入swagger2依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--swagger-ui依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、编写一个hello工程</p><p>4、集成Swagger</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//声明配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2 <span class="comment">//开启Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、访问测试：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p><h2 id="3、配置Swagger"><a href="#3、配置Swagger" class="headerlink" title="3、配置Swagger"></a>3、配置Swagger</h2><h3 id="1、示例：修改APIinfo信息"><a href="#1、示例：修改APIinfo信息" class="headerlink" title="1、示例：修改APIinfo信息"></a>1、示例：修改APIinfo信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//配置Swagger信息：apiInfo</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//作者信息</span></span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">"Lemenk"</span>, <span class="string">"https://www.lemenk.top"</span>, <span class="string">"Lemenk@163.com"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">"Lemenk的SwaggerAPI文档"</span>,</span><br><span class="line">                <span class="string">"这是第一个swaggerAPI示例"</span>,</span><br><span class="line">                <span class="string">"v1.0"</span>,</span><br><span class="line">                <span class="string">"https://www.lemenk.top"</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">"Apache 2.0"</span>,</span><br><span class="line">                <span class="string">"http://www.apache.org/licenses/LICENSE-2.0"</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、配置扫描接口"><a href="#2、配置扫描接口" class="headerlink" title="2、配置扫描接口"></a>2、配置扫描接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置Swagger的Docket的bean实例</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            .select()</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * RequestHandlerSelectors:配置要扫描接口的方式</span></span><br><span class="line"><span class="comment">             *      basePackage：指定要扫描的包</span></span><br><span class="line"><span class="comment">             *      any()：扫描全部</span></span><br><span class="line"><span class="comment">             *      none()：全部不扫描</span></span><br><span class="line"><span class="comment">             *      withClassAnnotation：扫描类上的注解</span></span><br><span class="line"><span class="comment">             *      withMethodAnnotation：扫描方法上的注解</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            .apis(RequestHandlerSelectors.basePackage(<span class="string">"top.lemenk.swagger.controller"</span>))</span><br><span class="line">            <span class="comment">//.apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</span></span><br><span class="line">            <span class="comment">//.apis(RequestHandlerSelectors.withMethodAnnotation(GetMapping.class))</span></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 过滤路径</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            .paths(PathSelectors.ant(<span class="string">"/abc/**"</span>))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、配置是否启动Swagger"><a href="#3、配置是否启动Swagger" class="headerlink" title="3、配置是否启动Swagger"></a>3、配置是否启动Swagger</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">            .apiInfo(apiInfo())</span><br><span class="line">            <span class="comment">//是否启动Swagger，ture为启动</span></span><br><span class="line">            .enable(<span class="keyword">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问：如何根据当前开发环境判断是否开启Swagger？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置Swagger的Docket的bean实例</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要显示的Swagger环境</span></span><br><span class="line">        Profiles profiles = Profiles.of(<span class="string">"dev"</span>,<span class="string">"prod"</span>);</span><br><span class="line">        <span class="comment">//通过environment.acceptsProfiles判断是否处在自己设定的环境当中</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = environment.acceptsProfiles(profiles);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//传入flage参数，使其根据环境判断是否开启</span></span><br><span class="line">                .enable(flag)</span><br></pre></td></tr></table></figure><p>需要在配置文件中配置当前开发环境，注：测试时需要同步修改端口</p><h3 id="4、配置API文档分组"><a href="#4、配置API文档分组" class="headerlink" title="4、配置API文档分组"></a>4、配置API文档分组</h3><p>创建多个分组，只需要创建多个Docket即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置多个分组，只需要创建多个Docket即可</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"AAA"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"BBB"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">"CCC"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">.groupName(<span class="string">"Lemenk"</span>)</span><br></pre></td></tr></table></figure><h3 id="5、注解"><a href="#5、注解" class="headerlink" title="5、注解"></a>5、注解</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SpringBoot学习笔记&quot;&gt;&lt;a href=&quot;#SpringBoot学习笔记&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot学习笔记&quot;&gt;&lt;/a&gt;SpringBoot学习笔记&lt;/h3&gt;
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://lemenk.github.io/categories/SpringBoot/"/>
    
      <category term="学习笔记" scheme="https://lemenk.github.io/categories/SpringBoot/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://lemenk.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记</title>
    <link href="https://lemenk.github.io/2020/02/25/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lemenk.github.io/2020/02/25/Mybatis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-25T04:58:48.000Z</published>
    <updated>2020-04-05T10:27:35.701Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SSM框架之Mybatis学习笔记</strong></p><a id="more"></a><h2 id="一、-Mybatis基础"><a href="#一、-Mybatis基础" class="headerlink" title="一、 Mybatis基础"></a>一、 Mybatis基础</h2><h3 id="1-Mybatis概述"><a href="#1-Mybatis概述" class="headerlink" title="1.Mybatis概述"></a>1.Mybatis概述</h3><p>Mybatis本是apache的一个开源项目iBatis，后来改名为Mybais，并迁移到Github。是一个基于Java的<strong>持久层框架</strong>。</p><p>它的内部封装了JDBC，使开发者只需关注sql语句本身，而不需要花费更多时间去处理加载驱动、创建连接等过程。</p><p>mybatis使用xml或者注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java 对象并 返回。</p><h3 id="2-jdbc编程的问题分析"><a href="#2-jdbc编程的问题分析" class="headerlink" title="2.jdbc编程的问题分析"></a>2.jdbc编程的问题分析</h3><ol><li>数据库链接创建、释放频繁造成系统资源浪费从而<strong>影响系统性能</strong>，如果使用数据库链接池可解决此问题。</li><li>Sql 语句在代码中硬编码，造成<strong>代码不易维护</strong>，实际应用 sql 变化的可能较大，sql 变动需要改变 java代码。</li><li>使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where 条件不一定，可能多也可能少，修改 sql 还要修改代码，系统不易维护。</li><li>对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，<strong>系统不易维护</strong>，如果能将数据库记录封装成 pojo 对象解析比较方便。</li></ol><h2 id="二、-Mybatis框架入门"><a href="#二、-Mybatis框架入门" class="headerlink" title="二、 Mybatis框架入门"></a>二、 Mybatis框架入门</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h3><ol><li><p>创建maven工程并导入相关坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建实体类和dao的接口</p></li><li><p>创建Mybatis的<strong>主配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置mysql的环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"mysql"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置事务的类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据源(连接池)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置连接数据库的四个基本信息--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=UTC"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定映射配置文件的位置</span></span><br><span class="line"><span class="comment">            映射配置文件：每个dao独立的配置文件</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"top/lemenk/dao/***.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建映射配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace值为Dao接口的全限定类名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.lemenk.dao.IUserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置查询所有，注意resultType用于指定封装的实体类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"top.lemenk.domain.User"</span>&gt;</span></span><br><span class="line">        //sql语句</span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-环境搭建的注意事项："><a href="#2-环境搭建的注意事项：" class="headerlink" title="2.环境搭建的注意事项："></a>2.环境搭建的注意事项：</h3><ol><li>mybatis的映射配置文件位置必须和dao接口的包结构相同</li><li>映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</li><li>映射配置文件的操作配置（select），id属性的取值必须是dao接口的方法名</li></ol><h3 id="3-测试入门案例"><a href="#3-测试入门案例" class="headerlink" title="3.测试入门案例"></a>3.测试入门案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//1.读取配置文件(从类路径加载配置文件)</span></span><br><span class="line">    InputStream in = Resources.getResourceAsStream(<span class="string">"SqlMapConfig.xml"</span>);</span><br><span class="line">    <span class="comment">//2.创建SqlSessionFactory工厂</span></span><br><span class="line">    SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line">    SqlSessionFactory factory = builder.build(in);</span><br><span class="line">    <span class="comment">//3.使用工厂生产SqlSession对象</span></span><br><span class="line">    SqlSession session = factory.openSession();</span><br><span class="line">    <span class="comment">//4.使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">    IUserDao userDao = session.getMapper(IUserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//5.使用代理对象执行方法</span></span><br><span class="line">    List&lt;User&gt; users = userDao.findAll();</span><br><span class="line">    <span class="keyword">for</span>(User user : users)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6.释放资源</span></span><br><span class="line">    session.close();</span><br><span class="line">    in.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要使用Dao接口的代理对象来实现功能呢？</p><p>因为在开发中，如果自己写Dao接口的实现类，就需要自己写相关的实现方法。</p><p>UserImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory;</span><br><span class="line"><span class="comment">//创建有参数的构造函数，用于传入参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">(SqlSessionFactory factory)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.factory = factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//使用工厂创建SqlSession对象</span></span><br><span class="line">    SqlSession session = factory.openSession();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *使用session执行查询所有方法</span></span><br><span class="line"><span class="comment">    *其中selectList方法为SqlSession中的方法，用于查询所有</span></span><br><span class="line"><span class="comment">    *参数为改sql语句的位置。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    List&lt;User&gt; users = session.selectList(<span class="string">"top.lemenk.dao.IUserDao.findAll"</span>);</span><br><span class="line">    session.close();</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用代理工厂可以减少代码量。</p><h2 id="三、Mybatis-连接池与事务深入"><a href="#三、Mybatis-连接池与事务深入" class="headerlink" title="三、Mybatis 连接池与事务深入"></a>三、Mybatis 连接池与事务深入</h2><h3 id="1-Mybatis-的连接池技术"><a href="#1-Mybatis-的连接池技术" class="headerlink" title="1.Mybatis 的连接池技术"></a>1.Mybatis 的连接池技术</h3><p>在 Mybatis的 SqlMapConfig.xml配置文件中，通过<dataSource type="pooled">来实现Mybatis中连接池的配置。</p><h4 id="1-1-Mybatis-连接池的分类"><a href="#1-1-Mybatis-连接池的分类" class="headerlink" title="1.1 Mybatis 连接池的分类"></a>1.1 Mybatis 连接池的分类</h4><p>UNPOOLED    不使用连接池的数据源</p><p>POOLED         使用连接池的数据源</p><p>JNDI                使用JNDI实现的数据源</p><p>相应地，MyBatis 内部分别定义了实现了 java.sql.DataSource 接口的 UnpooledDataSource， PooledDataSource 类来表示UNPOOLED、POOLED 类型的数据源。</p><h4 id="1-2-Mybatis-中数据源的配置"><a href="#1-2-Mybatis-中数据源的配置" class="headerlink" title="1.2 Mybatis 中数据源的配置"></a>1.2 Mybatis 中数据源的配置</h4><p>在 SqlMapConfig.xml 文件中:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>type=”POOLED”：MyBatis 会创建 PooledDataSource 实例 type=”UNPOOLED” ： MyBatis 会创建 UnpooledDataSource 实例 type=”JNDI”：MyBatis会从JNDI服务上查找DataSource 实例，然后返回使用</p><h3 id="2-Mybatis-的事务控制"><a href="#2-Mybatis-的事务控制" class="headerlink" title="2.Mybatis 的事务控制"></a>2.Mybatis 的事务控制</h3><h4 id="2-1-JDBC事务提交方式"><a href="#2-1-JDBC事务提交方式" class="headerlink" title="2.1 JDBC事务提交方式"></a>2.1 JDBC事务提交方式</h4><p>在 JDBC中我们可以通过手动方式将事务的提交改为手动方式，通过 setAutoCommit()方法就可以调整。</p><h4 id="2-2-Mybatis-中事务提交方式"><a href="#2-2-Mybatis-中事务提交方式" class="headerlink" title="2.2 Mybatis 中事务提交方式"></a>2.2 Mybatis 中事务提交方式</h4><p>Mybatis 中事务的提交方式，本质上就是调用 JDBC 的setAutoCommit()来实现事务控制。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;SSM框架之Mybatis学习笔记&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SSM框架" scheme="https://lemenk.github.io/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://lemenk.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC学习笔记</title>
    <link href="https://lemenk.github.io/2020/02/14/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lemenk.github.io/2020/02/14/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-14T02:11:51.000Z</published>
    <updated>2020-04-05T10:28:39.396Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SSM框架之SpringMVC学习笔记</strong></p><a id="more"></a><h1 id="第一章-SpringMVC的基础"><a href="#第一章-SpringMVC的基础" class="headerlink" title="第一章 SpringMVC的基础"></a>第一章 SpringMVC的基础</h1><h2 id="1-1三层架构和MVC"><a href="#1-1三层架构和MVC" class="headerlink" title="1.1三层架构和MVC"></a>1.1三层架构和MVC</h2><h3 id="1-1-1三层架构"><a href="#1-1-1三层架构" class="headerlink" title="1.1.1三层架构"></a>1.1.1三层架构</h3><p>开发架构一般基于两种形式，一种是<strong>C/S</strong>架构，也就是<strong>客户端/服务器</strong>；另一种是<strong>B/S</strong>架构，也就是<strong>浏览器服务器</strong>。在JavaEE开发中，几乎全都是基于B/S架构的开发。</p><p>在B/S架构中，系统标准的三层架构包括：<strong>表现层</strong>、<strong>业务层</strong>、<strong>持久层</strong>。</p><p><strong>表现层</strong>：也就是我们常说的web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求 web 层，web 需要接收 http 请求，完成 http 响应。<br>        表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。 表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。 表现层的设计一般都使用 MVC 模型。（MVC 是表现层的设计模型，和其他层没有关系）</p><p><strong>业务层</strong>： 也就是我们常说的 service 层。它负责业务逻辑处理，和我们开发项目的需求息息相关。web 层依赖业 务层，但是业务层不依赖 web 层。 业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的，事务应该放到业务层来控制） </p><p><strong>持久层</strong>：也就是我们是常说的 dao 层。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库 中。通俗的讲，持久层就是和数据库交互，对数据库表进行曾删改查的。</p><h3 id="1-1-2-MVC模型"><a href="#1-1-2-MVC模型" class="headerlink" title="1.1.2 MVC模型"></a>1.1.2 MVC模型</h3><p><strong>MVC</strong> 全名是 Model View Controller，是<strong>模型(model)</strong>－<strong>视图(view)</strong>－<strong>控制器(controller)</strong>的缩写，是一种用于设计创建 Web 应用程序表现层的模式。MVC 中每个部分各司其职： </p><p><strong>Model（模型）</strong>：通常指的就是我们的数据模型。作用一般情况下用于封装数据。 </p><p><strong>View（视图）</strong>：通常指的就是我们的 jsp 或者 html。作用一般就是展示数据的。 通常视图是依据模型数据创建的。</p><h2 id="1-2-SpringMVC概述"><a href="#1-2-SpringMVC概述" class="headerlink" title="1.2 SpringMVC概述"></a>1.2 SpringMVC概述</h2><h3 id="1-2-1-什么是SpringMVC？"><a href="#1-2-1-什么是SpringMVC？" class="headerlink" title="1.2.1 什么是SpringMVC？"></a>1.2.1 什么是SpringMVC？</h3><p>SpringMVC 是一种基于 Java 的<strong>实现 MVC 设计模型</strong>的<strong>请求驱动类型</strong>的<strong>轻量级 Web 框架</strong>，属于 Spring FrameWork 的后续产品，已经融合在 Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功 能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他 MVC 开发框架。</p><h3 id="1-2-2-SpringMVC的优势"><a href="#1-2-2-SpringMVC的优势" class="headerlink" title="1.2.2 SpringMVC的优势"></a>1.2.2 SpringMVC的优势</h3><p>1、清晰的角色划分： </p><p>​            前端控制器（DispatcherServlet） </p><p>​            请求到处理器映射（HandlerMapping） </p><p>​            处理器适配器（HandlerAdapter） </p><p>​            视图解析器（ViewResolver） </p><p>​            处理器或页面控制器（Controller） </p><p>​            验证器（ Validator） </p><p>​            命令对象（Command 请求参数绑定到的对象就叫命令对象）</p><p>​            表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</p><p>2、分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。</p><p>3、由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。 </p><p>4、和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。 </p><p>5、可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</p><p> 6、可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。</p><p>7、功能强大的数据验证、格式化、绑定机制。 </p><p>8、利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</p><p>9、本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</p><p>10、强大的 JSP 标签库，使 JSP 编写更容易。 </p><p>………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。</p><h3 id="1-2-3-SpringMVC和-Struts2-的优略分析"><a href="#1-2-3-SpringMVC和-Struts2-的优略分析" class="headerlink" title="1.2.3 SpringMVC和 Struts2 的优略分析"></a>1.2.3 SpringMVC和 Struts2 的优略分析</h3><p>共同点：<br>            它们都是表现层框架，都是基于 MVC 模型编写的。 它们的底层都离不开原始 ServletAPI。 它们处理请求的机制都是一个核心控制器。<br>区别：<br>            Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。 Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;SSM框架之SpringMVC学习笔记&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SSM框架" scheme="https://lemenk.github.io/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://lemenk.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="https://lemenk.github.io/2019/11/21/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lemenk.github.io/2019/11/21/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-21T13:38:03.000Z</published>
    <updated>2020-04-05T10:28:20.607Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SSM框架之Spring学习笔记</strong></p><a id="more"></a><h2 id="一-、Spring基础"><a href="#一-、Spring基础" class="headerlink" title="一 、Spring基础"></a>一 、Spring基础</h2><h3 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1.Spring概述"></a>1.Spring概述</h3><p>​        spring是分层的Java SE/EE应用<strong>全栈式</strong>轻量级开源框架，以<strong>IOC</strong>(Inverse Of Control，控制反转)和<strong>AOP</strong>(Aspect Oriented Progranming，面向切面编程)为内核，提供了展现层SpringMVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的JavaEE企业应用开源框架。</p><h3 id="2-Spring的体系结构"><a href="#2-Spring的体系结构" class="headerlink" title="2. Spring的体系结构"></a>2. Spring的体系结构</h3><p><img src="http://ww1.sinaimg.cn/large/006zQofnly1gbh0mtz179j30k00f00u1.jpg" alt="Spring的体系结构"></p><h1 id="二、IoC的概念和作用"><a href="#二、IoC的概念和作用" class="headerlink" title="二、IoC的概念和作用"></a>二、IoC的概念和作用</h1><h3 id="1-程序的耦合"><a href="#1-程序的耦合" class="headerlink" title="1.程序的耦合"></a>1.程序的耦合</h3><p>​        耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关 系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)。</p><p>​        耦合是影响软件复杂程度和设计质量的一个重要因素，在设计上我们应采用以下原则：如果模块间必须 存在耦合，就尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，尽量避免使用内容耦合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcDemo1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.注册驱动</span></span><br><span class="line">            <span class="comment">//DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">            <span class="comment">//2.获取链接</span></span><br><span class="line">            Connection con = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/spring?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC"</span>,<span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">            <span class="comment">//3.获取操作数据库的预处理</span></span><br><span class="line">            PreparedStatement ps = con.prepareStatement(<span class="string">"select * from account"</span>);</span><br><span class="line">            <span class="comment">//4.执行SQL，得到结果集</span></span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line">            <span class="comment">//5.遍历结果集</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                System.out.println(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//6.释放资源</span></span><br><span class="line">            rs.close();</span><br><span class="line">            ps.close();</span><br><span class="line">            con.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JDBC操作中使用<code>Class.forName</code>的方式比使用<code>DriverManager.registerDriver</code>好是因为DriverManager 的 register 方法需要依赖数据库的MuSQL驱动类，当更换了数据库类型时就需要修改源码。使用Class.forName降低耦合度。</p><p><code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code>中是使用反射来注册驱动的。</p><h3 id="2-解耦"><a href="#2-解耦" class="headerlink" title="2. 解耦"></a>2. 解耦</h3><h4 id="2-1-工厂方式解耦"><a href="#2-1-工厂方式解耦" class="headerlink" title="2.1 工厂方式解耦"></a>2.1 工厂方式解耦</h4><p>在实际开发中我们可以把三层的对象都使用配置文件配置起来，当启动服务器应用加载的时候，让一个类中的方法通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。 </p><p>那么，这个读取配置文件，创建和获取三层对象的类就是工厂。</p><h4 id="2-2-控制反转-Inversion-Of-Control-解耦"><a href="#2-2-控制反转-Inversion-Of-Control-解耦" class="headerlink" title="2.2 控制反转(Inversion Of Control)解耦"></a>2.2 控制反转(Inversion Of Control)解耦</h4><p>控制反转把创建对象的权力交给框架，是框架的主要特征，并非面向对象的专用术语。它包括依赖注入（Dependency Injection，简称DI）和依赖查找（Dependency Lookup）</p><h1 id="三、使用Spring的IOC解决程序的耦合"><a href="#三、使用Spring的IOC解决程序的耦合" class="headerlink" title="三、使用Spring的IOC解决程序的耦合"></a>三、使用Spring的IOC解决程序的耦合</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;SSM框架之Spring学习笔记&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SSM框架" scheme="https://lemenk.github.io/categories/SSM%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://lemenk.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Pyhon之网络爬虫开发学习笔记</title>
    <link href="https://lemenk.github.io/2019/11/21/Pyhon%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lemenk.github.io/2019/11/21/Pyhon%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-21T02:58:29.000Z</published>
    <updated>2020-04-05T10:30:17.855Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Python网络爬虫学习笔记</strong></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Python网络爬虫学习笔记&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://lemenk.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://lemenk.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记</title>
    <link href="https://lemenk.github.io/2019/11/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lemenk.github.io/2019/11/01/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-01T08:36:46.000Z</published>
    <updated>2020-04-05T10:29:58.397Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Python学习笔记</strong></p><a id="more"></a><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1-了解python"><a href="#1-了解python" class="headerlink" title="1.了解python"></a>1.了解python</h3><ul><li>Python的创始人为吉多·范罗苏姆。</li><li>Python是完全面向对象的语言。函数、模块、数字、字符串都是对象。并且完全支持继承、重载、派生、多重继承，有益于增强源代码的复用性。Python支持重载运算符，因此Python也支持泛型设计。相对于Lisp这种传统的函数式编程语言，Python对函数式编程]只提供了有限的支持。有两个标准库（functools, itertools）提供了与Haskell和Standard ML中类似的函数式程序设计工具。</li><li>Python是可扩展的。提供了丰富的API和工具，以便程序员能够轻松地使用C、C++、Cython来编写扩展模块。Python编译器本身也可以被集成到其它需要脚本语言的程序内。</li><li>应用范围：<ul><li>网络应用程序</li><li>GUI开发</li><li>数据挖掘、人工智能</li><li>网络爬虫</li><li>自动化脚本</li></ul></li><li>两种版本：2.x和3.x</li></ul><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h3><ul><li><p>单行注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 说明文字</span></span><br></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">说明文字</span></span><br><span class="line"><span class="string">说明文字</span></span><br><span class="line"><span class="string">"""</span>  </span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">说明文字</span></span><br><span class="line"><span class="string">说明文字</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-基本数据类型"><a href="#3-基本数据类型" class="headerlink" title="3.基本数据类型"></a>3.基本数据类型</h3><p>Python中有六个标准的数据类型</p><ul><li><p>Number（数字）</p><ul><li>int（整数）</li><li>float（浮点数）：1.23，3.1415</li><li>bool（布尔类型）：True和False</li><li>complex（复数）：如1+2j</li></ul></li><li><p>String（字符串）</p><ul><li><p>Python中字符串用单引号<code>&#39;</code>或者双引号<code>&quot;</code>括起来</p></li><li><p>字符串的下标及截取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下标</span></span><br><span class="line">str = <span class="string">'Python'</span></span><br><span class="line">a = str[<span class="number">2</span>]</span><br><span class="line">b = str[<span class="number">-3</span>]</span><br><span class="line"><span class="comment"># 字符串有两种索引方式，分别为从前和从后索引</span></span><br><span class="line"><span class="comment"># 从前索引：索引值从0开始递增</span></span><br><span class="line"><span class="comment"># 从后索引：从-1开始，-1，-2……递减</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 截取</span></span><br><span class="line">str = <span class="string">'China'</span></span><br><span class="line"></span><br><span class="line">print(str)  <span class="comment"># 输出字符串</span></span><br><span class="line">print(str[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment">#输出第一个到第四个之间所有的字符</span></span><br><span class="line">print(str[<span class="number">1</span>:<span class="number">-1</span>])  <span class="comment">#输出第二个到倒数第一个之间的所有字符</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>List（列表）：其使用最为频繁，类似于数组，但可以存放不同数据结构的元素</p><ul><li><p>截取方式与字符串相同</p></li><li><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list = [<span class="string">'abcd'</span>, <span class="number">123</span>, <span class="number">2.34</span>]</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>Tuple（元组）:</p><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 <code>()</code> 里，元素之间用逗号隔开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">tuple = ( <span class="string">'abcd'</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">'runoob'</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">'runoob'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (tuple)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="keyword">print</span> (tuple[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="keyword">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="keyword">print</span> (tuple + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Set（集合）:</p><ul><li><p>定义：集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <code>{ }</code> 或者 <code>set()</code> 函数创建集合，注意：创建一个空集合必须用 <code>set()</code> 而不是 <code>{ }</code>，因为 <code>{ }</code> 是用来创建一个空字典。</p></li><li><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line">或者</span><br><span class="line">set(value)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">student = &#123;<span class="string">'Tom'</span>, <span class="string">'Jim'</span>, <span class="string">'Mary'</span>, <span class="string">'Tom'</span>, <span class="string">'Jack'</span>, <span class="string">'Rose'</span>&#125;</span><br><span class="line"> </span><br><span class="line">print(student)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 成员测试</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'Rose'</span> <span class="keyword">in</span> student :</span><br><span class="line">    print(<span class="string">'Rose 在集合中'</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    print(<span class="string">'Rose 不在集合中'</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line">b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"> </span><br><span class="line">print(a)</span><br><span class="line"> </span><br><span class="line">print(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"> </span><br><span class="line">print(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"> </span><br><span class="line">print(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"> </span><br><span class="line">print(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure><p>以上实例输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'Mary'</span>, <span class="string">'Jim'</span>, <span class="string">'Rose'</span>, <span class="string">'Jack'</span>, <span class="string">'Tom'</span>&#125;</span><br><span class="line">Rose 在集合中</span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">&#123;<span class="string">'b'</span>, <span class="string">'d'</span>, <span class="string">'r'</span>&#125;</span><br><span class="line">&#123;<span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'z'</span>, <span class="string">'m'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line">&#123;<span class="string">'l'</span>, <span class="string">'r'</span>, <span class="string">'z'</span>, <span class="string">'m'</span>, <span class="string">'b'</span>, <span class="string">'d'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Dictionary（字典）：</p><ul><li><p>定义：字典是一种映射类型，字典用 <code>{ }</code> 标识，它是一个无序的 <code>键(key) : 值(value)</code> 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&#125;</span><br><span class="line">dict[<span class="string">'one'</span>] = <span class="string">"1 - 菜鸟教程"</span></span><br><span class="line">dict[<span class="number">2</span>]     = <span class="string">"2 - 菜鸟工具"</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">'name'</span>: <span class="string">'runoob'</span>,<span class="string">'code'</span>:<span class="number">1</span>, <span class="string">'site'</span>: <span class="string">'www.runoob.com'</span>&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> (dict[<span class="string">'one'</span>])       <span class="comment"># 输出键为 'one' 的值</span></span><br><span class="line"><span class="keyword">print</span> (dict[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="keyword">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="keyword">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''输出：</span></span><br><span class="line"><span class="string">1 - 菜鸟教程</span></span><br><span class="line"><span class="string">2 - 菜鸟工具</span></span><br><span class="line"><span class="string">&#123;'name': 'runoob', 'code': 1, 'site': 'www.runoob.com'&#125;</span></span><br><span class="line"><span class="string">dict_keys(['name', 'code', 'site'])</span></span><br><span class="line"><span class="string">dict_values(['runoob', 1, 'www.runoob.com'])</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-数字-Number-及其常用函数"><a href="#4-数字-Number-及其常用函数" class="headerlink" title="4.数字(Number)及其常用函数"></a>4.数字(Number)及其常用函数</h3><ul><li><p>支持三种不同的数值类型：</p><ul><li>整型(Int)：无大小限制的正数或者负数</li><li>浮点型(float)：由整数部分和小数部分组成，也可以用科学计数法表示</li><li>复数(complex)：可以用<code>a+bj</code>或者<code>complex(a,b)</code>来表示，并且复数的实部和虚部都是浮点型</li></ul></li><li><p>数字类型转换：</p><ul><li><strong>int(x)</strong> 将x转换为一个整数。</li><li><strong>float(x)</strong> 将x转换到一个浮点数。</li><li><strong>complex(x)</strong> 将x转换到一个复数，实数部分为 x，虚数部分为 0。</li><li><strong>complex(x, y)</strong> 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</li></ul></li><li><p>数学函数：</p><ul><li><code>abs(x)</code>：返回数字的绝对值，如abs(-10) 返回 10</li><li><code>ceil(x)</code>：返回数字的上入整数，如math.ceil(4.1) 返回 5</li><li><code>exp(x)</code>：返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</li><li><code>fabs(x)</code>：返回数字的绝对值，如math.fabs(-10) 返回10.0</li><li><code>max(x1, x2,...)</code>：返回给定参数的最大值，参数可以为序列。</li><li><code>log10(x)</code>：返回以10为基数的x的对数，如math.log10(100)返回 2.0</li><li><code>pow(x, y)</code>：x**y 运算后的值。</li><li><code>round(x [,n])</code>：返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</li><li><code>sqrt(x)</code>：返回数字x的平方根。</li></ul></li><li><p>随机数函数</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">choice(seq)</td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left">randrange ([start,] stop [,step])</td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left">random()</td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">seed([x])</td><td align="left">改变随机数生成器的种子seed。</td></tr><tr><td align="left">shuffle(lst)</td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left">uniform(x, y)</td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table></li><li><p>数学常量</p><ul><li>pi：圆周率，一般用Π来表示</li><li>e，数学常量e，即自然常数</li></ul></li></ul><h3 id="5-字符串常用方法"><a href="#5-字符串常用方法" class="headerlink" title="5.字符串常用方法"></a>5.字符串常用方法</h3><ul><li><code>capitalize()</code>：将字符串的第一个字符转换为大写</li><li><code>center(width, fillchar)</code>：返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</li><li><code>count(str, beg= 0,end=len(string))</code>：返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</li><li><code>find(str, beg=0, end=len(string))</code>：检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</li><li><code>index(str, beg=0, end=len(string))</code>：跟find()方法一样，只不过如果str不在字符串中会报一个异常.</li><li><code>lower()</code>：转换字符串中所有大写字符为小写.</li><li><code>lstrip()</code>：截掉字符串左边的空格或指定字符。</li><li><code>replace(old, new [, max])</code>：把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。</li><li><code>rstrip()</code>：删除字符串字符串末尾的空格.</li><li><code>split(str=&quot;&quot;, num=string.count(str))</code>：num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</li><li><code>upper()</code>：转换字符串中的小写字母为大写</li></ul><h3 id="6-列表函数"><a href="#6-列表函数" class="headerlink" title="6.列表函数"></a>6.列表函数</h3><table><thead><tr><th align="left">方法</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left">list.append(obj</td><td align="left">在列表末尾添加新的对象</td></tr><tr><td align="left">list.count(obj)</td><td align="left">统计某个元素在列表中出现的次数</td></tr><tr><td align="left">list.extend(seq)</td><td align="left">在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">list.index(obj)</td><td align="left">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">list.insert(index, obj)</td><td align="left">将对象插入列表</td></tr><tr><td align="left">list.pop(index=-1])</td><td align="left">移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">list.remove(obj)</td><td align="left">移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">list.reverse()</td><td align="left">反向列表中元素</td></tr><tr><td align="left">list.sort( key=None, reverse=False)</td><td align="left">对原列表进行排序</td></tr><tr><td align="left">list.clear()</td><td align="left">清空列表</td></tr><tr><td align="left">list.copy()</td><td align="left">复制列表</td></tr></tbody></table><h3 id="7-元组方法"><a href="#7-元组方法" class="headerlink" title="7.元组方法"></a>7.元组方法</h3><ul><li><code>len(tuple)</code>：计算元组元素个数。</li><li><code>max(tuple)</code>：返回元组中元素最大值。</li><li><code>min(tuple)</code>：返回元组中元素最小值。</li><li><code>tuple(seq)</code>：将列表转换为元组。</li></ul><h3 id="8-变量定义"><a href="#8-变量定义" class="headerlink" title="8.变量定义"></a>8.变量定义</h3><ul><li><p>python是弱类型语言，并不需要事先定义变量类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>  <span class="comment"># int类型</span></span><br><span class="line">name = <span class="string">'小明'</span>  <span class="comment"># str类型</span></span><br><span class="line">height = <span class="number">1.80</span>  <span class="comment"># float类型</span></span><br><span class="line">flag = <span class="literal">True</span>  <span class="comment"># bool类型</span></span><br></pre></td></tr></table></figure></li><li><p>查看变量类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(type(name))</span><br><span class="line">print(type(a))</span><br><span class="line">print(type(<span class="number">10.0</span>))</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-命名规范"><a href="#9-命名规范" class="headerlink" title="9.命名规范"></a>9.命名规范</h3><ul><li><p>常量使用以下划线分隔的大写命名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAX_OVERFLOW = <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>变量名尽量小写, 如有多个单词，用下划线连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">school_name = <span class="string">'北京大学'</span></span><br></pre></td></tr></table></figure></li><li><p>函数名一律小写，如有多个单词，用下划线隔开,私有函数在函数名前加一个下划线</p></li><li><p>类名使用大驼峰风格</p></li><li><p>模块名使用小驼峰，避免使用下划线</p></li></ul><h3 id="10-导入模块"><a href="#10-导入模块" class="headerlink" title="10.导入模块"></a>10.导入模块</h3><ul><li><p>使用import关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br></pre></td></tr></table></figure></li><li><p>利用keyword模块查看关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(keyword.kwlist)</span><br></pre></td></tr></table></figure></li><li><p>关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'False'</span>, <span class="string">'None'</span>, <span class="string">'True'</span>, <span class="string">'and'</span>, <span class="string">'as'</span>, <span class="string">'assert'</span>, <span class="string">'break'</span>, <span class="string">'class'</span>, <span class="string">'continue'</span>, <span class="string">'def'</span>, <span class="string">'del'</span>, <span class="string">'elif'</span>, <span class="string">'else'</span>, <span class="string">'except'</span>, <span class="string">'finally'</span>, <span class="string">'for'</span>, <span class="string">'from'</span>, <span class="string">'global'</span>, <span class="string">'if'</span>, <span class="string">'import'</span>, <span class="string">'in'</span>, <span class="string">'is'</span>, <span class="string">'lambda'</span>, <span class="string">'nonlocal'</span>, <span class="string">'not'</span>, <span class="string">'or'</span>, <span class="string">'pass'</span>, <span class="string">'raise'</span>, <span class="string">'return'</span>, <span class="string">'try'</span>, <span class="string">'while'</span>, <span class="string">'with'</span>, <span class="string">'yield'</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="11-输出"><a href="#11-输出" class="headerlink" title="11.输出"></a>11.输出</h3><ul><li><p>常用格式符号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">% s : 字符串(采用str()的显示)</span><br><span class="line">% r : 字符串(采用repr()的显示)</span><br><span class="line">% c : 单个字符</span><br><span class="line">% b : 二进制整数</span><br><span class="line">% d : 十进制整数</span><br><span class="line">% i : 十进制整数</span><br><span class="line">% o : 八进制整数</span><br><span class="line">% x : 十六进制整数</span><br><span class="line">% e : 指数(基底写为e)</span><br><span class="line">% E : 指数(基底写为E)</span><br><span class="line">% f : 浮点数</span><br><span class="line">% F : 浮点数，与上相同</span><br><span class="line">% g : 指数(e)或浮点数(根据显示长度)</span><br><span class="line">% G : 指数(E)或浮点数(根据显示长度)</span><br><span class="line">% % : 字符<span class="string">"%"</span></span><br></pre></td></tr></table></figure></li><li><p>普通输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span></span><br><span class="line">print(<span class="string">'今年我%d岁了'</span> % age)</span><br></pre></td></tr></table></figure></li><li><p>多个变量输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'小明'</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">print(<span class="string">'姓名：%s，年龄：%d'</span> % (name, age))</span><br></pre></td></tr></table></figure></li><li><p>换行输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'您好\n世界'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="12-输入"><a href="#12-输入" class="headerlink" title="12.输入"></a>12.输入</h3><ul><li><p>输入 input()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tel = input(<span class="string">'请输入手机号：'</span>)</span><br><span class="line">print(tel)</span><br></pre></td></tr></table></figure></li></ul><h3 id="13-算术运算符"><a href="#13-算术运算符" class="headerlink" title="13.算术运算符"></a>13.算术运算符</h3><ul><li><p>常见运算符</p><p>+、-、*、/</p></li><li><p>其他运算符</p><p>//：整除运算符，例如9//2的结果为4</p><p>**：指数运算符，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>**<span class="number">3</span></span><br></pre></td></tr></table></figure><p>结果为8</p></li><li><p>运算优先级：<code>**</code>高于 <code>*</code> <code>/</code> <code>%</code> <code>//</code>高于<code>+</code> <code>-</code>，但避免歧义，应使用<code>()</code>来处理优先级 </p></li></ul><h3 id="14-运算符"><a href="#14-运算符" class="headerlink" title="14.运算符"></a>14.运算符</h3><ul><li><p>比较运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义两个变量</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==检查两个操作数的值是否相等，如果是则条件变为真。</span></span><br><span class="line"><span class="comment"># ret = (a == b)</span></span><br><span class="line"><span class="comment"># print(ret)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># !=检查两个操作数的值是否相等，如果值不相等，则条件变为真。</span></span><br><span class="line"><span class="comment"># if a != b:</span></span><br><span class="line"><span class="comment">#     print('a不等于b')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;检查左操作数的值是否大于右操作数的值，如果是，则条件成立。</span></span><br><span class="line"><span class="comment"># if a &gt; b:</span></span><br><span class="line"><span class="comment">#     print("a大于b")</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;=检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。</span></span><br><span class="line"><span class="comment"># if a &lt;= b:</span></span><br><span class="line"><span class="comment">#     print("a小于等于b")</span></span><br></pre></td></tr></table></figure></li><li><p>逻辑运算符</p><ul><li>and：和运算</li><li>or：或运算</li><li>not非运算</li></ul></li><li><p>成员运算符</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"1 - 变量 a 在给定的列表中 list 中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"1 - 变量 a 不在给定的列表中 list 中"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( b <span class="keyword">not</span> <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"2 - 变量 b 不在给定的列表中 list 中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"2 - 变量 b 在给定的列表中 list 中"</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改变量 a 的值</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> list ):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"3 - 变量 a 在给定的列表中 list 中"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"3 - 变量 a 不在给定的列表中 list 中"</span>)</span><br><span class="line">   </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1 - 变量 a 不在给定的列表中 list 中</span></span><br><span class="line"><span class="string">2 - 变量 b 不在给定的列表中 list 中</span></span><br><span class="line"><span class="string">3 - 变量 a 在给定的列表中 list 中</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li><li><p>身份运算符</p><ul><li>is：描述两个标识符是否引自同一对象    </li><li>is not：判断两个标识符是不是引自不同对象</li><li><strong>is和==的区别：is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</strong></li></ul></li><li><p>位运算符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0011</span> <span class="number">1100</span>  <span class="comment"># 60的二进制</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">0000</span> <span class="number">1101</span>  <span class="comment"># 13的二进制</span></span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">a&amp;b = <span class="number">0000</span> <span class="number">1100</span>  <span class="comment"># 按位与：对应位值相同为1，否则为0</span></span><br><span class="line"></span><br><span class="line">a|b = <span class="number">0011</span> <span class="number">1101</span>  <span class="comment"># 按位或：对应位若有一个为1，则结果的该位为1</span></span><br><span class="line"></span><br><span class="line">a^b = <span class="number">0011</span> <span class="number">0001</span>  <span class="comment"># 按位异或：对应位不同时结果为1</span></span><br><span class="line"></span><br><span class="line">~a  = <span class="number">1100</span> <span class="number">0011</span>  <span class="comment"># 按位取反：对每一位取反</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;&lt; ： 左移运算符：各位左移若干位，高位丢弃，低位补零 </span></span><br><span class="line"><span class="comment"># &gt;&gt; ： 右移运算符：向右移动若干位</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="15-选择结构语句"><a href="#15-选择结构语句" class="headerlink" title="15.选择结构语句"></a>15.选择结构语句</h3><h4 id="15-1-if语句基本格式"><a href="#15-1-if语句基本格式" class="headerlink" title="15.1 if语句基本格式"></a>15.1 if语句基本格式</h4><ul><li><p>基本格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件:</span><br><span class="line">条件成立时，需要做的事情</span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">13</span></span><br><span class="line"><span class="keyword">if</span> num &gt; <span class="number">10</span>:</span><br><span class="line">print(<span class="string">'该数字大于10'</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="15-2-if-else"><a href="#15-2-if-else" class="headerlink" title="15.2 if-else"></a>15.2 if-else</h4><ul><li><p>如果一个条件成立, 做一个事情, 如果条件不成立, 做另一个事情</p></li><li><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件:</span><br><span class="line">  如果成立, 执行的代码</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  如果不成立, 执行的代码</span><br></pre></td></tr></table></figure></li></ul><h4 id="15-3-if-elif-else"><a href="#15-3-if-elif-else" class="headerlink" title="15.3 if-elif-else"></a>15.3 if-elif-else</h4><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件<span class="number">1</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">2</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> 判断条件<span class="number">3</span>:</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> 以上都不满足才可以执行</span><br></pre></td></tr></table></figure><h4 id="15-4-三目运算符"><a href="#15-4-三目运算符" class="headerlink" title="15.4 三目运算符"></a>15.4 三目运算符</h4><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">变量 = 如果条件成立 <span class="keyword">if</span> 判断条件 <span class="keyword">else</span> 如果条件不成立</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><h4 id="15-5-while循环"><a href="#15-5-while循环" class="headerlink" title="15.5 while循环"></a>15.5 while循环</h4><ul><li><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">定义一个计数器</span><br><span class="line">定义<span class="keyword">while</span>循环</span><br><span class="line">书写循环体代码</span><br><span class="line">修改计数器</span><br></pre></td></tr></table></figure></li><li><p>例：打印4次hello word</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">3</span></span><br><span class="line">print(<span class="string">'hello word'</span>)</span><br><span class="line">i +=<span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="15-6-for循环"><a href="#15-6-for循环" class="headerlink" title="15.6 for循环"></a>15.6 for循环</h4><ul><li><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">for</span> &lt;variable&gt; <span class="keyword">in</span> &lt;sequence&gt;:</span><br><span class="line">      &lt;statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">      &lt;statements&gt;</span><br></pre></td></tr></table></figure></li><li><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">languages = [<span class="string">"C"</span>, <span class="string">"C++"</span>, <span class="string">"Perl"</span>, <span class="string">"Python"</span>] </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> languages:</span><br><span class="line">    <span class="keyword">print</span> (x)</span><br><span class="line"></span><br><span class="line"><span class="string">'''输出</span></span><br><span class="line"><span class="string">C</span></span><br><span class="line"><span class="string">C++</span></span><br><span class="line"><span class="string">Perl</span></span><br><span class="line"><span class="string">Python</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="15-7-break和continue语句"><a href="#15-7-break和continue语句" class="headerlink" title="15.7 break和continue语句"></a>15.7 break和continue语句</h4><ul><li><p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p></li><li><p>continue语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p></li><li><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while中的break语句</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(n)</span><br><span class="line">print(<span class="string">'循环结束。'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure><p>while中的continue语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">5</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    n -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(n)</span><br><span class="line">print(<span class="string">'循环结束。'</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">循环结束。</span><br></pre></td></tr></table></figure></li></ul><h4 id="15-8-迭代器与生成器"><a href="#15-8-迭代器与生成器" class="headerlink" title="15.8 迭代器与生成器"></a>15.8 迭代器与生成器</h4><ul><li><p>两个方法：<code>iter()</code>和<code>next()</code></p></li><li><p>字符串，列表或元组对象都可用于创建迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = iter(list)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="keyword">print</span> (next(it))   <span class="comment"># 输出迭代器的下一个元素</span></span><br></pre></td></tr></table></figure><ul><li><p>通过for循环遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = iter(list)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> it:</span><br><span class="line">    <span class="keyword">print</span> (x, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure></li><li><p>使用next()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys         <span class="comment"># 引入 sys 模块</span></span><br><span class="line"> </span><br><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = iter(list)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> (next(it))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="16-python中的正则表达式"><a href="#16-python中的正则表达式" class="headerlink" title="16.python中的正则表达式"></a>16.python中的正则表达式</h3><p>Python自1.5版本起增加了re模块，用于支持正则表达式。</p><ul><li><p><code>re.match</code>函数：从字符串的起始位置匹配一个模式，<strong>若匹配成功返回match对象，若匹配失败则返回None</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(pattern, string, [flags])</span><br></pre></td></tr></table></figure><ul><li><p>参数说明：</p><ul><li><code>pattern</code>：匹配的正则表达式</li><li><code>string</code>：要匹配的字符串。</li><li><code>flags</code>：标志位，用于控制正则表达式的匹配方式</li></ul></li><li><p>flags可用值：</p><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">re.I</td><td align="left">使匹配对大小写不敏感</td></tr><tr><td align="left">re.L</td><td align="left">做本地化识别（locale-aware）匹配</td></tr><tr><td align="left">re.M</td><td align="left">多行匹配，影响 ^ 和 $</td></tr><tr><td align="left">re.S</td><td align="left">使 . 匹配包括换行在内的所有字符</td></tr><tr><td align="left">re.U</td><td align="left">根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td></tr><tr><td align="left">re.X</td><td align="left">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td></tr></tbody></table></li><li><p>可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><ul><li><p><code>group(num=0)</code>：匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</p></li><li><p><code>groups()</code>：返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p></li><li><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">line = <span class="string">"Cats are smarter than dogs"</span></span><br><span class="line"><span class="comment"># .* 表示任意匹配除换行符（\n、\r）之外的任何单个或多个字符</span></span><br><span class="line">matchObj = re.match( <span class="string">r'(.*) are (.*?) .*'</span>, line, re.M|re.I)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> matchObj:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"matchObj.group() : "</span>, matchObj.group())</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"matchObj.group(1) : "</span>, matchObj.group(<span class="number">1</span>))</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"matchObj.group(2) : "</span>, matchObj.group(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"No match!!"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matchObj.group() :  Cats are smarter than dogs</span><br><span class="line">matchObj.group(<span class="number">1</span>) :  Cats</span><br><span class="line">matchObj.group(<span class="number">2</span>) :  smarter</span><br></pre></td></tr></table></figure></li></ul></li><li><p>其中match对象包含了匹配值的位置和匹配数据，可使用方法得到。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">匹配值的起始位置： match1.start()</span><br><span class="line">匹配值的结束位置：match1.end()</span><br><span class="line">匹配位置的元组： match1.span()</span><br><span class="line">被匹配的字符串：match1.string</span><br><span class="line">匹配数据： match1.group()</span><br></pre></td></tr></table></figure></li><li><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r'mr_\w+'</span></span><br><span class="line">string = <span class="string">'MR_SHOP mr_shop'</span></span><br><span class="line">match1 = re.match(pattern, string, re.I)</span><br><span class="line">print(match1)</span><br><span class="line">string = <span class="string">'new MR_SHOP mr_shop'</span></span><br><span class="line">match2 = re.match(pattern, string, re.I)</span><br><span class="line">print(match2)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'匹配值的起始位置：'</span>, match1.start())</span><br><span class="line">print(<span class="string">'匹配值的结束位置：'</span>, match1.end())</span><br><span class="line">print(<span class="string">'匹配位置的元组：'</span>, match1.span())</span><br><span class="line">print(<span class="string">'被匹配的字符串：'</span>, match1.string)</span><br><span class="line">print(<span class="string">'匹配数据：'</span>, match1.group())</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;re.Match object; span=(<span class="number">0</span>, <span class="number">7</span>), match=<span class="string">'MR_SHOP'</span>&gt;</span><br><span class="line"><span class="literal">None</span></span><br><span class="line">匹配值的起始位置： <span class="number">0</span></span><br><span class="line">匹配值的结束位置： <span class="number">7</span></span><br><span class="line">匹配位置的元组： (<span class="number">0</span>, <span class="number">7</span>)</span><br><span class="line">被匹配的字符串： MR_SHOP mr_shop</span><br><span class="line">匹配数据： MR_SHOP</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>re.search</code>方法：扫描整个字符串并返回第一个成功的匹配。<strong>匹配成功re.search方法返回一个匹配的对象，否则返回None。</strong></p><ul><li><p>函数语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.search(pattern, string, [flags])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>pattern</code>：匹配的正则表达式</li><li><code>string</code>：要匹配的字符串。</li><li><code>flags</code>：标志位，用于控制正则表达式的匹配方式</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r'mr_\w+'</span></span><br><span class="line">string = <span class="string">'MR_SHOP mr_shop'</span></span><br><span class="line">search = re.search(pattern, string, re.I)</span><br><span class="line">print(search)</span><br></pre></td></tr></table></figure></li><li><p><strong>re.match与re.search的区别</strong>：</p><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p></li></ul></li><li><p><code>findall()</code>方法：用于在整个字符串中搜索所有符合正则表达式的字符串，并以列表返回。若匹配成功，则返回包含匹配结构的列表，若匹配失败，则返回空列表。</p><ul><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(pattern, string, [flags])</span><br></pre></td></tr></table></figure></li><li><p>参数说明：</p><ul><li>pattern：模式字符串，正则表达式</li><li>string：要匹配的字符串</li><li>flags：标志位，可选</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r'mr_\w+'</span></span><br><span class="line">string = <span class="string">'MR_SHOP mr_shop'</span></span><br><span class="line">find = re.findall(pattern, string, re.I)</span><br><span class="line">print(find)</span><br><span class="line">print(type(find))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'MR_SHOP'</span>, <span class="string">'mr_shop'</span>]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>运用：分割IP地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r'([1-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;)'</span></span><br><span class="line">str = <span class="string">'127.0.0.1 192.168.1.66 187.0.1.9'</span></span><br><span class="line">match = re.findall(pattern, str)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> match:</span><br><span class="line">    print(item[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.66</span></span><br><span class="line"><span class="number">187.0</span><span class="number">.1</span><span class="number">.9</span></span><br></pre></td></tr></table></figure><p>注：<code>item[0]</code>需要索引<code>0</code>的必要性：match对象的结果是一个列表，其中包含了三个元组，每一个元组包含了两个字符串。</p><p>直接输出item的结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'127.0.0.1'</span>, <span class="string">'.1'</span>)</span><br><span class="line">(<span class="string">'192.168.1.66'</span>, <span class="string">'.66'</span>)</span><br><span class="line">(<span class="string">'187.0.1.9'</span>, <span class="string">'.9'</span>)</span><br></pre></td></tr></table></figure><p>第一个字符串是所要输出的字符串，因此需要索引号。</p></li></ul></li><li><p><code>re.sub()</code>方法：用于实现字符串的替换。返回值为字符串。</p><ul><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sub(pattern, repl, string, [count], [flags])</span><br></pre></td></tr></table></figure><ul><li>pattern：表示模式字符串，正则表达式</li><li>repl：表示要替换的字符串</li><li>string：表示要被查找替换的原始字符串</li><li>count：可选，表示模式匹配后替换的最大次数，默认值为0，表示替换所有</li><li>flags：可选，标志位，用于控制匹配方式</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r'(黑客)|(抓包)|(监听)|(Trojan)'</span></span><br><span class="line">about = <span class="string">'我是一名黑客，喜欢抓包，监听网络，想研究Trojan。'</span></span><br><span class="line">sub = re.sub(pattern, <span class="string">'**'</span>, about)</span><br><span class="line">print(sub)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是一名**，喜欢**，**网络，想研究**。</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>re.split()</code>：分割字符串。返回值为列表。</p><ul><li><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(pattern, string, [maxsplit], [flags])</span><br></pre></td></tr></table></figure><ul><li>maxsplit：可选，表示最大可拆分的次数</li><li>flags：标志位</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">r'[?|&amp;]'</span></span><br><span class="line">url = <span class="string">'http://www.baidu.com/login.jsp?username="liming"&amp;pwd="123"'</span></span><br><span class="line">result = re.split(pattern, url)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'http://www.baidu.com/login.jsp'</span>, <span class="string">'username="liming"'</span>, <span class="string">'pwd="123"'</span>]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="17-函数"><a href="#17-函数" class="headerlink" title="17.函数"></a>17.函数</h3><ol><li><p>一般语法：使用def关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名（参数列表）:</span></span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure><p>实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在控制台输出hello world!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure><p>示例二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算长方形面积函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(width, height)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_welcome</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">"Welcome to"</span>, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print_welcome(<span class="string">"python"</span>)</span><br><span class="line">w = <span class="number">4</span></span><br><span class="line">h = <span class="number">5</span></span><br><span class="line">print(<span class="string">"width ="</span>, w, <span class="string">"height ="</span>, h, <span class="string">"area ="</span>, area(w, h))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Welcome to python</span><br><span class="line">width = <span class="number">4</span> height = <span class="number">5</span> area = <span class="number">20</span></span><br></pre></td></tr></table></figure><p>示例三：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeme</span><span class="params">( mylist )</span>:</span></span><br><span class="line">   <span class="string">"修改传入的列表"</span></span><br><span class="line">   mylist.append([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"函数内取值: "</span>, mylist)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用changeme函数</span></span><br><span class="line">mylist = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">changeme( mylist )</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"函数外取值: "</span>, mylist)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数内取值:  [10, 20, 30, [1, 2, 3, 4]]</span><br><span class="line">函数外取值:  [10, 20, 30, [1, 2, 3, 4]]</span><br></pre></td></tr></table></figure></li><li><p>return语句：用于退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。</p></li></ol><h3 id="18-面向对象编程"><a href="#18-面向对象编程" class="headerlink" title="18.面向对象编程"></a>18.面向对象编程</h3><h4 id="18-1-类的定义："><a href="#18-1-类的定义：" class="headerlink" title="18.1 类的定义："></a>18.1 类的定义：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line"><span class="string">'''类的帮助信息'''</span></span><br><span class="line">statement</span><br></pre></td></tr></table></figure><p>示例一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Geese</span>:</span></span><br><span class="line">    <span class="string">"""大雁类"""</span></span><br><span class="line">    print(<span class="string">"我是大雁"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">wildGoose = Geese()</span><br><span class="line">print(wildGoose)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是大雁</span><br><span class="line">&lt;__main__.Geese object at 0x000001AF79E3FFA0&gt;</span><br></pre></td></tr></table></figure><p><code>_init_()</code>方法：类似于JAVA的构造方法，在创建类的实例时，会自动调用该方法。<code>_init_()</code>必须包含一个self参数，并且是第一个参数。self参数是指向实力本身的引用，用于访问类的属性和方法，在方法被调用时主动传递实际参数self。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Geese</span>:</span></span><br><span class="line">    <span class="string">"""大雁类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, beak, wing, claw)</span>:</span></span><br><span class="line">        print(<span class="string">"我是大雁类，包含以下特征："</span>)</span><br><span class="line">        print(beak)</span><br><span class="line">        print(wing)</span><br><span class="line">        print(claw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">beak_1 = <span class="string">"喙的基部比较高，长度和头部的长度几乎相同"</span></span><br><span class="line">wing_1 = <span class="string">"翅膀长而尖"</span></span><br><span class="line">claw_1 = <span class="string">"爪子是蹼状的"</span></span><br><span class="line">wildGoose = Geese(beak_1, wing_1, claw_1)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是大雁类，包含以下特征：</span><br><span class="line">喙的基部比较高，长度和头部的长度几乎相同</span><br><span class="line">翅膀长而尖</span><br><span class="line">爪子是蹼状的</span><br></pre></td></tr></table></figure><p><strong>注：<code>__init__()</code>方法前后时两个下划线。</strong></p><h4 id="18-2-类的实例方法："><a href="#18-2-类的实例方法：" class="headerlink" title="18.2 类的实例方法："></a>18.2 类的实例方法：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionName</span><span class="params">(self, paramenterlist)</span>:</span></span><br><span class="line">    block</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Geese</span>:</span></span><br><span class="line">    <span class="string">"""大雁类"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, beak, wing, claw)</span>:</span></span><br><span class="line">        print(<span class="string">"我是大雁类，包含以下特征："</span>)</span><br><span class="line">        print(beak)</span><br><span class="line">        print(wing)</span><br><span class="line">        print(claw)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fly</span><span class="params">(self, state)</span>:</span>       <span class="comment"># 定义实例方法</span></span><br><span class="line">        print(state)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">beak_1 = <span class="string">"喙的基部比较高，长度和头部的长度几乎相同"</span></span><br><span class="line">wing_1 = <span class="string">"翅膀长而尖"</span></span><br><span class="line">claw_1 = <span class="string">"爪子是蹼状的"</span></span><br><span class="line">wildGoose = Geese(beak_1, wing_1, claw_1)</span><br><span class="line">wildGoose.fly(<span class="string">"我飞行的时候，一会儿排成人字，一会儿排成一个一字"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我是大雁类，包含以下特征：</span><br><span class="line">喙的基部比较高，长度和头部的长度几乎相同</span><br><span class="line">翅膀长而尖</span><br><span class="line">爪子是蹼状的</span><br><span class="line">我飞行的时候，一会儿排成人字，一会儿排成一个一字</span><br></pre></td></tr></table></figure><h4 id="18-3-访问权限"><a href="#18-3-访问权限" class="headerlink" title="18.3 访问权限"></a>18.3 访问权限</h4><ul><li><p><code>_fun</code>：以单下划线开头表示<code>protected</code>（保护）类型的成员，只允许类的本身和子类进行访问，不能用<code>from module import *</code>语句导入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swan</span>:</span></span><br><span class="line">    <span class="string">"""天鹅类"""</span></span><br><span class="line">    _neck_swan = <span class="string">'天鹅的脖子很长'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"__init__()"</span>, Swan._neck_swan)  <span class="comment"># 在实例方法中访问</span></span><br><span class="line">swan = Swan()</span><br><span class="line">print(<span class="string">"直接访问："</span>, swan._neck_swan)  <span class="comment">#通过实例访问</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__init__() 天鹅的脖子很长</span><br><span class="line">直接访问： 天鹅的脖子很长</span><br></pre></td></tr></table></figure></li><li><p><code>__fun</code>：双下划线表示private（私有）类型的成员，只允许定义该方法的类本身进行访问，而且也不能通过类的实例进行访问，但是可以通过“类的实例名.类名_XXX”方式进行访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># private</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Swan</span>:</span></span><br><span class="line">    <span class="string">"""天鹅类"""</span></span><br><span class="line">    __neck_swan = <span class="string">'天鹅的脖子很长'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"__init__()"</span>, Swan.__neck_swan)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">swan = Swan()</span><br><span class="line">print(<span class="string">"加入类名访问："</span>, swan._Swan__neck_swan)</span><br><span class="line"><span class="comment"># print("直接访问：", swan.__neck_swan)</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__init__() 天鹅的脖子很长</span><br><span class="line">加入类名访问： 天鹅的脖子很长</span><br></pre></td></tr></table></figure></li><li><p><code>__fun__()</code>定义特殊方法，如<code>__init__()</code>。</p></li></ul><h4 id="18-4-属性"><a href="#18-4-属性" class="headerlink" title="18.4 属性"></a>18.4 属性</h4><p>可以通过<code>@property</code>（装饰器）将一个方法转化为属性，从而实现用于计算的属性。将方法转化为属性后，可以通过方法名来访问方法，而不需要再添加小括号。</p><ul><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">methodname</span><span class="params">(self)</span>:</span></span><br><span class="line">    block</span><br></pre></td></tr></table></figure></li><li><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, width, height)</span>:</span></span><br><span class="line">        self.width = width  <span class="comment"># 实例属性</span></span><br><span class="line">        self.height = height  <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.width * self.height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rect = Rect(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">print(<span class="string">"面积为："</span>, rect.area)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">面积为： 480000</span><br></pre></td></tr></table></figure><p><strong>注：通过@property转换后的属性不能重新赋值。</strong></p></li></ul><h4 id="18-5-继承"><a href="#18-5-继承" class="headerlink" title="18.5 继承"></a>18.5 继承</h4><ul><li><p>基本语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassName</span><span class="params">(baseclasslist)</span>:</span></span><br><span class="line">    <span class="string">'''类的帮助信息'''</span></span><br><span class="line">    Statement</span><br></pre></td></tr></table></figure><p>baseclasslist：用于指定要继承的父类，可以有多个，用“,”隔开。</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>:</span></span><br><span class="line">    color = <span class="string">"绿色"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">harvest</span><span class="params">(self, color)</span>:</span></span><br><span class="line">        print(<span class="string">"水果是："</span> + color + <span class="string">"的"</span>)</span><br><span class="line">        print(<span class="string">"水果已经收获"</span>)</span><br><span class="line">        print(<span class="string">"水果原来是："</span> + Fruit.color + <span class="string">"的"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    color = <span class="string">"红色"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我是苹果"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    color = <span class="string">"橙色"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我是橘子"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apple = Apple()</span><br><span class="line">apple.harvest(apple.color)</span><br><span class="line">orange = Orange()</span><br><span class="line">orange.harvest(orange.color)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我是苹果</span><br><span class="line">水果是：红色的</span><br><span class="line">水果已经收获</span><br><span class="line">水果原来是：绿色的</span><br><span class="line">我是橘子</span><br><span class="line">水果是：橙色的</span><br><span class="line">水果已经收获</span><br><span class="line">水果原来是：绿色的</span><br></pre></td></tr></table></figure></li><li><p>方法重写：</p><p>在Orange类中重写<code>harves()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    color = <span class="string">"橙色"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我是橘子"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">harvest</span><span class="params">(self, color)</span>:</span></span><br><span class="line">        print(<span class="string">"水果是："</span> + color + <span class="string">"的"</span>)</span><br><span class="line">        print(<span class="string">"橘子已经收获"</span>)</span><br><span class="line">        print(<span class="string">"水果原来是："</span> + Fruit.color + <span class="string">"的"</span>);</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我是橘子</span><br><span class="line">水果是：橙色的</span><br><span class="line">橘子已经收获</span><br><span class="line">水果原来是：绿色的</span><br></pre></td></tr></table></figure></li><li><p>调用基类的<code>__init__()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, color=<span class="string">"绿色"</span>)</span>:</span></span><br><span class="line">        Fruit.color = color</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">harvest</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"水果原来是："</span> + Fruit.color + <span class="string">"的"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"我是苹果"</span>)</span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">apple = Apple()</span><br><span class="line">apple.harvest()</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是苹果</span><br><span class="line">水果原来是：绿色的</span><br></pre></td></tr></table></figure></li></ul><h3 id="19-模块"><a href="#19-模块" class="headerlink" title="19.模块"></a>19.模块</h3><ul><li><p>定义：一个拓展名为.py的文件就是一个模块，包含了一个完整的功能</p></li><li><p>使用import语句导入模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> modulename [<span class="keyword">as</span> alias]</span><br></pre></td></tr></table></figure><ul><li>modulename：要导入的模块名</li><li>[as alias]：为模块起的别名</li></ul></li><li><p>实例：创建两个模块，分别包含矩形和圆形的计算周长面积函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: lemenk</span></span><br><span class="line"><span class="string">@Blog: blog.lemenk.top</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: rectangle.py</span></span><br><span class="line"><span class="string">@time: 2019/11/7 21:34</span></span><br><span class="line"><span class="string">@Desc: 计算矩形周长和面积</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">girth</span><span class="params">(width, height)</span>:</span></span><br><span class="line">    <span class="string">"""功能：计算矩形周长</span></span><br><span class="line"><span class="string">       参数 ：width（宽度），height（高度）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> (width + height) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(width, height)</span>:</span></span><br><span class="line">    <span class="string">"""功能：计算矩形面积</span></span><br><span class="line"><span class="string">           参数 ：width（宽度），height（高度）</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="keyword">return</span> width * height</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(area(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: lemenk</span></span><br><span class="line"><span class="string">@Blog: blog.lemenk.top</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: circular.py</span></span><br><span class="line"><span class="string">@time: 2019/11/7 21:34</span></span><br><span class="line"><span class="string">@Desc: 计算圆形周长和面积</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">PI = math.pi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">girth</span><span class="params">(r)</span>:</span></span><br><span class="line">    <span class="string">"""功能：计算圆形周长</span></span><br><span class="line"><span class="string">       参数 ：r（半径）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> round(<span class="number">2</span> * PI * r, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">area</span><span class="params">(r)</span>:</span></span><br><span class="line">    <span class="string">"""功能：计算圆形面积</span></span><br><span class="line"><span class="string">           参数 ：r（半径）</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">    <span class="keyword">return</span> round(PI * r * r, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(area(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: lemenk</span></span><br><span class="line"><span class="string">@Blog: blog.lemenk.top</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: computer.py</span></span><br><span class="line"><span class="string">@time: 2019/11/7 21:46</span></span><br><span class="line"><span class="string">@Desc: 调用rectangle.py和circular.py</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rectangle <span class="keyword">as</span> r</span><br><span class="line"><span class="keyword">import</span> circular <span class="keyword">as</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"圆形的周长为："</span>, c.girth(<span class="number">10</span>))</span><br><span class="line">    print(<span class="string">"矩形周长为："</span>, r.girth(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">圆形的周长为： 62.83</span><br><span class="line">矩形周长为： 60</span><br></pre></td></tr></table></figure><p><strong>注：<code>if __name__ == &#39;__main__&#39;</code>代码块的必要性：</strong></p><p>类似于Java的main方法，<code>__name__</code>是python的内置变量，用于指代当前模块。</p><p>当模块A导入到模块B中时，若需要模块A中的某些代码不需要在B中执行时，可放在<code>if __name__ == &#39;__main__&#39;:</code>内部。</p></li><li><p>标准模块：</p><ul><li><p>random模块：用于生成随机函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.randint(<span class="number">0</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>生成验证码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: lemenk</span></span><br><span class="line"><span class="string">@Blog: blog.lemenk.top</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: checkcode.py</span></span><br><span class="line"><span class="string">@time: 2019/11/7 22:33</span></span><br><span class="line"><span class="string">@Desc: 随机生成由数字和字母组成的4位验证码</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    checkcode = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        index = random.randrange(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="keyword">if</span> index != i <span class="keyword">and</span> index + <span class="number">1</span> != i:</span><br><span class="line">            checkcode += chr(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">        <span class="keyword">elif</span> index + <span class="number">1</span> == i:</span><br><span class="line">            checkcode += str(random.randint(<span class="number">1</span>, <span class="number">9</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            checkcode += str(random.randint(<span class="number">1</span>, <span class="number">9</span>))</span><br><span class="line">    print(<span class="string">"验证码："</span>, checkcode)</span><br></pre></td></tr></table></figure></li><li><p>其他标准模块</p></li></ul></li></ul><h3 id="20-异常"><a href="#20-异常" class="headerlink" title="20.异常"></a>20.异常</h3><p>常用语法：</p><ul><li><p>try…except</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    block1</span><br><span class="line"><span class="keyword">except</span> [ExceptionName [<span class="keyword">as</span> alias]]:</span><br><span class="line">    block2</span><br></pre></td></tr></table></figure></li><li><p>try…except…else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    block1</span><br><span class="line"><span class="keyword">except</span> [ExceptionName [<span class="keyword">as</span> alias]]:</span><br><span class="line">    block2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    block3</span><br></pre></td></tr></table></figure></li><li><p>try…except…finally语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    block1</span><br><span class="line"><span class="keyword">except</span> [ExceptionName [<span class="keyword">as</span> alias]]:</span><br><span class="line">    block2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    block3</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    block4</span><br></pre></td></tr></table></figure></li><li><p>raise语句抛出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>:</span></span><br><span class="line">    num = int(input(<span class="string">"请输入不小与3的数字："</span>))</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"输入值出错"</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="21-文件"><a href="#21-文件" class="headerlink" title="21.文件"></a>21.文件</h3><ul><li><p>创建和打开文件：</p><ul><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file = open(filename[,mode[,buffering]])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><p>file：被创建的文件对象</p></li><li><p>filename：要创建或者打开的文件路径</p></li><li><p>mode：可选参数，用于指定文件的打开方式</p><table><thead><tr><th>t</th><th align="left">文本模式 (默认)</th></tr></thead><tbody><tr><td>x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td>b</td><td align="left">二进制模式。</td></tr><tr><td>+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td>r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是<strong>默认模式</strong>。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>注：以r开头的参数需要文件必须存在，否则会出错。以w开头的参数，若文件不存在，则会创建文件；若存在，则会覆盖该文件。以a开头的参数，会对已存在的文件追加内容。</p></li><li><p>buffering：可选参数，用于指定读写文件的缓冲模式，0表示不缓存；1表示缓存；如果大于1，则表示缓冲区的大小。默认为1。</p></li><li><p>encoding: 一般使用utf8</p></li><li><p>errors: 报错级别</p></li><li><p>newline: 区分换行符</p></li><li><p>closefd: 传入的file参数类型</p></li></ul></li><li><p>例子：</p><ul><li><p>1.创建一个文件，并存储一些信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""创建一个不存在的文件"""</span></span><br><span class="line">print(<span class="string">"\n"</span>, <span class="string">"="</span>*<span class="number">10</span>, <span class="string">"学习记录"</span>, <span class="string">"="</span>*<span class="number">10</span>)   <span class="comment"># 正则表达式</span></span><br><span class="line">file = open(<span class="string">'msg.txt'</span>, <span class="string">'w'</span>)   <span class="comment"># 在此目录下创建msg.txt</span></span><br><span class="line">print(<span class="string">"\n 即将显示……\n"</span>)</span><br></pre></td></tr></table></figure><p>运行结果：在此目录下创建了msg.txt文件，并打印以下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 学习记录 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">      </span><br><span class="line">即将显示……</span><br></pre></td></tr></table></figure></li><li><p>2.以二进制形式打开文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="string">'p.png'</span>, <span class="string">'rb'</span>)</span><br><span class="line">print(file)</span><br></pre></td></tr></table></figure></li><li><p>3.打开文件时指定编码方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file = open(<span class="string">'e.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">print(file)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>关闭文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.close()</span><br></pre></td></tr></table></figure></li><li><p>打开文件时使用with语句：使用with语句，可以避免在打开文件时出现异常导致文件不能被即时关闭。</p><ul><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> expression <span class="keyword">as</span> target:</span><br><span class="line">    <span class="keyword">with</span>-body</span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"\n"</span>, <span class="string">"="</span>*<span class="number">10</span>, <span class="string">"学习记录"</span>, <span class="string">"="</span>*<span class="number">10</span>)   <span class="comment"># 正则表达式</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'msg.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:  <span class="comment"># 在此目录下创建msg.txt</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">print(<span class="string">"\n 即将显示……\n"</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>写入文件内容</p><ul><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.write(string)</span><br></pre></td></tr></table></figure></li><li><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"\n"</span>, <span class="string">"="</span>*<span class="number">10</span>, <span class="string">"学习记录"</span>, <span class="string">"="</span>*<span class="number">10</span>)   <span class="comment"># 正则表达式</span></span><br><span class="line">string = <span class="string">"今天学习了python的文件操作"</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'msg.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file: </span><br><span class="line">    file.write(string + <span class="string">"\n"</span>)</span><br><span class="line">print(<span class="string">"\n 在文件中写入了内容……\n"</span>)</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>读取文件</p><ul><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file.read([size])</span><br></pre></td></tr></table></figure><p>size：可选参数，用于指定要读取的字符个数，省略则一次性读取所有内容</p></li><li><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'msg.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    string = file.read(<span class="number">7</span>)</span><br><span class="line">    print(string)</span><br></pre></td></tr></table></figure><p>注：read(size)方法读取文件时时从文件头开始读的。</p></li><li><p>使用seek()方法移动文件指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'msg.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.seek(<span class="number">3</span>)</span><br><span class="line">    string = file.read(<span class="number">3</span>)</span><br><span class="line">    print(string)</span><br></pre></td></tr></table></figure><p><strong>注：<code>seek()</code>方法中文占两个字符，数字和英文占一个字符。和<code>read()</code>不同</strong></p></li></ul></li><li><p>其他方法：</p><ul><li>file.flush()：刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</li><li>file.readline([size])：读取整行，包括 “\n” 字符。</li><li>file.readlines([sizeint])：读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</li></ul></li></ul><h3 id="22-数据库"><a href="#22-数据库" class="headerlink" title="22.数据库"></a>22.数据库</h3><ul><li><p>使用mysql-connector 驱动连接mysql数据库</p><ul><li><p>安装<strong>mysql-connector</strong>驱动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector</span><br></pre></td></tr></table></figure></li><li><p>创建数据库连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"> </span><br><span class="line">mydb = mysql.connector.connect(  <span class="comment"># 创建连接对象mydb</span></span><br><span class="line">  host=<span class="string">"localhost"</span>,       <span class="comment"># 数据库主机地址</span></span><br><span class="line">  user=<span class="string">"yourusername"</span>,    <span class="comment"># 数据库用户名</span></span><br><span class="line">  passwd=<span class="string">"yourpassword"</span>   <span class="comment"># 数据库密码</span></span><br><span class="line">)</span><br><span class="line"> </span><br><span class="line">print(mydb)</span><br></pre></td></tr></table></figure><p>连接对象有如下几个方法：</p><ul><li>close()：关闭数据库连接</li><li>commit()：提交事务</li><li>rollback()：回滚事务</li><li>cursor()：获取游标对象，操作数据库</li></ul></li><li><p>游标对象：代表数据库中的游标，用于指示抓取数据操作的上下文。主要提供执行SQL语句、调用存储过程、获取查询结果等方法。</p><ul><li>callproc(name[,params])：使用指定的参数调用指定的数据库过程；</li><li>close()：关闭当前游标，关闭后，这个游标就不能使用了；</li><li>execute(oper[,params])：执行一个SQL操作；</li><li>executemany(oper,pseq)：执行SQL操作多次，每次用序列中的一组参数；</li><li>fetchone()：以序列的方式取回查询结果中的下一行，如果没有更多的行，就返回None；</li><li>fetchmany([size])：取回查询时结果中的多行，其中参数size的值默认为arraysize；</li><li>fetchall()：已序列的方式取回余下的行；</li><li>nextset()：跳到下一个结果集，这个方法是可选的；</li><li>setinputsizes(sizes)：用于为参数预定义内存区域；</li><li>setoutputsize(size[,col])：围裙会大量数据而设置缓冲区长度。</li></ul><p>创建游标对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycursor = mydb.cursor()</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>其他语句：</p><ul><li><p>查看数据库列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mycursor.execute(<span class="string">"SHOW DATABASES"</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mycursor:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure></li><li><p>创建数据库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycursor.execute(<span class="string">"CREATE DATABASE DBName"</span>)</span><br></pre></td></tr></table></figure></li><li><p>创建数据表sites：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycursor.execute(<span class="string">"CREATE TABLE sites (name VARCHAR(255), url VARCHAR(255))"</span>)</span><br></pre></td></tr></table></figure></li><li><p>给已经存在的sites表添加主键：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycursor.execute(<span class="string">"ALTER TABLE sites ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY"</span>)</span><br></pre></td></tr></table></figure></li><li><p>向表中添加数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">"INSERT INTO sites (name, url) VALUES (%s, %s)"</span></span><br><span class="line">val = (<span class="string">"百度"</span>, <span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">mycursor.execute(sql, val)</span><br><span class="line"></span><br><span class="line">mydb.commit()  <span class="comment"># 数据表内容有更新，必须使用到该语句</span></span><br></pre></td></tr></table></figure></li><li><p>向表中批量添加数据，第二个参数为元组列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sql = <span class="string">"INSERT INTO sites (name, url) VALUES (%s, %s)"</span></span><br><span class="line">val = [</span><br><span class="line">    (<span class="string">'Google'</span>, <span class="string">'https://www.google.com'</span>),</span><br><span class="line">    (<span class="string">'Github'</span>, <span class="string">'https://www.github.com'</span>),</span><br><span class="line">    (<span class="string">'Taobao'</span>, <span class="string">'https://www.taobao.com'</span>),</span><br><span class="line">    (<span class="string">'stackoverflow'</span>, <span class="string">'https://www.stackoverflow.com/'</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">mycursor.executemany(sql, val)   <span class="comment">#批量操作</span></span><br><span class="line"></span><br><span class="line">mydb.commit()</span><br></pre></td></tr></table></figure></li><li><p>查询数据：</p><ul><li><p>查询下一条记录：<code>fetchone()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mycursor.execute(<span class="string">"SELECT * FROM sites"</span>)</span><br><span class="line"></span><br><span class="line">my_result = mycursor.fetchone()  <span class="comment"># fetchone() 获取结果集中下一条记录</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure></li><li><p>查询表中所有记录：<code>fetchall()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mycursor.execute(<span class="string">"SELECT * FROM sites"</span>)</span><br><span class="line"></span><br><span class="line">my_result = mycursor.fetchall()  <span class="comment"># fetchall() 获取所有记录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> my_result:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure></li><li><p>查询指定数量的记录：<code>fetchmany()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mycursor.execute(<span class="string">"SELECT * FROM sites"</span>)</span><br><span class="line"></span><br><span class="line">my_result = mycursor.fetchmany(<span class="number">3</span>)  <span class="comment"># fetchmany() 获取指定数量的记录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> my_result:</span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p>PyMySQL 驱动连接数据库：</p><ul><li><p>PyMySQL 安装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install PyMySQL</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Python学习笔记&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://lemenk.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://lemenk.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://lemenk.github.io/2019/09/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://lemenk.github.io/2019/09/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2019-09-08T03:06:30.000Z</published>
    <updated>2020-04-05T10:41:28.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正则表达式学习笔记"><a href="#正则表达式学习笔记" class="headerlink" title="正则表达式学习笔记"></a>正则表达式学习笔记</h3><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;正则表达式学习笔记&quot;&gt;&lt;a href=&quot;#正则表达式学习笔记&quot; class=&quot;headerlink&quot; title=&quot;正则表达式学习笔记&quot;&gt;&lt;/a&gt;正则表达式学习笔记&lt;/h3&gt;
    
    </summary>
    
    
      <category term="正则表达式" scheme="https://lemenk.github.io/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="正则表达式" scheme="https://lemenk.github.io/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="https://lemenk.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>多线程（二）之线程池</title>
    <link href="https://lemenk.github.io/2019/08/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://lemenk.github.io/2019/08/19/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8B%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2019-08-19T09:26:10.000Z</published>
    <updated>2020-04-05T10:48:03.196Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JAVA——多线程之线程池</strong></p><a id="more"></a><h3 id="一、线程池简介"><a href="#一、线程池简介" class="headerlink" title="一、线程池简介"></a>一、线程池简介</h3><ol><li><p>概念：线程池是程序在运行初期就首先创建了一些线程，这些线程的集合叫做线程池。使用线程池可以很好地提高性能，线程池在系统启动时即创建大量空闲的线程，程序将一个任务传给线程池，线程池就会启动一条线程来执行这个任务，执行结束以后，该线程并不会死亡，而是再次返回线程池中成为空闲状态，等待执行下一个任务。</p></li><li><p>工作机制：</p><ol><li><p>在线程池的编程模式下，任务是提交给整个线程池，而不是直接提交给某个线程，线程池在拿到任务后，就在内部寻找是否有空闲的线程，如果有，则将任务交给某个空闲的线程。</p></li><li><p>一个线程同时只能执行一个任务，但可以同时向一个线程池提交多个任务。</p><p><img src="http://img.cdn.lemenk.top/20190809200646357.png"></img></p></li></ol></li><li><p>使用线程池的原因：</p><p>多线程运行时，系统需要不断地启动和关闭新的线程，资源消耗比较大，并且会产生线程切换时的危险。</p></li><li><p><strong>总结：</strong></p><ol><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ol></li></ol><h3 id="二、线程池的使用"><a href="#二、线程池的使用" class="headerlink" title="二、线程池的使用"></a>二、线程池的使用</h3><h4 id="一、Exectutor"><a href="#一、Exectutor" class="headerlink" title="一、Exectutor"></a>一、Exectutor</h4><p>Exectutor是Java线程池的顶级接口。</p><p><img src="http://img.cdn.lemenk.top/16015500-4dc0d547170f70db.png">Executor类和接口示意图</img></p><p>Executor是一个接口，它是Executor框架的基础，它将任务的提交与任务的执行分离开来。</p><p>ThreadPoolExecutor是线程池的核心实现类，用来执行被提交的任务。</p><p>ScheduledThreadPoolExecutor是一个实现类，可以在给定的延迟后运行命令，或者定期执行命令。ScheduledThreadPoolExecutor比Timer更灵活，功能更强大。</p><p>Future接口和实现Future接口的FutureTask类，代表异步计算的结果。</p><p>Runnable接口和Callable接口的实现类，都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行。</p><h4 id="二、ThreadPoolExecutor"><a href="#二、ThreadPoolExecutor" class="headerlink" title="二、ThreadPoolExecutor"></a>二、ThreadPoolExecutor</h4><p>ThreadPoolExecutor通常使用工厂类Executors来创建。Executors可以创建3种类型的ThreadPoolExecutor：SingleThreadExecutor、FixedThreadPool和CachedThreadPool。</p><p>它的构造方法有下面四种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             threadFactory, defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">                <span class="keyword">null</span> :</span><br><span class="line">                AccessController.getContext();</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主要参数：</p><ul><li><strong>corePoolSize</strong>（必需）：核心线程数。默认情况下，核心线程会一直存活，但是当将allowCoreThreadTimeout设置为true时，核心线程也会超时回收。</li><li><strong>maximumPoolSize</strong>（必需）：线程池所能容纳的最大线程数。当活跃线程数达到该数值后，后续的新任务将会阻塞。</li><li><strong>keepAliveTime</strong>（必需）：线程闲置超时时长。如果超过该时长，非核心线程就会被回收。如果将allowCoreThreadTimeout设置为true时，核心线程也会超时回收。</li><li><strong>unit</strong>（必需）：指定keepAliveTime参数的时间单位。常用的有：TimeUnit.MILLISECONDS（毫秒）、TimeUnit.SECONDS（秒）、TimeUnit.MINUTES（分）。</li><li><strong>workQueue</strong>（必需）：任务队列。通过线程池的execute()方法提交的Runnable对象将存储在该参数中。其采用阻塞队列实现。</li><li><strong>threadFactory</strong>（可选）：线程工厂。用于指定为线程池创建新线程的方式。</li><li><strong>handler</strong>（可选）：拒绝策略。当达到最大线程数时需要执行的饱和策略。</li></ul><h4 id="三、FixedThreadPool。"><a href="#三、FixedThreadPool。" class="headerlink" title="三、FixedThreadPool。"></a>三、<strong>FixedThreadPool</strong>。</h4><p>下面是Executors提供的，创建使用固定线程数的FixedThreadPool的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory  threadFactoty)</span></span></span><br></pre></td></tr></table></figure><p>FixedThreadPool适用于为了满足资源管理的需求，而需要限制当前线程数量的应用场景，它适用于负载比较重的服务器。</p><h4 id="四、SingleThreadExecutor。"><a href="#四、SingleThreadExecutor。" class="headerlink" title="四、SingleThreadExecutor。"></a>四、<strong>SingleThreadExecutor</strong>。</h4><p>下面是Executors提供的，创建使用单个线程的SingleThreadExecutor的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">(ThreadFactory threadFactory)</span></span></span><br></pre></td></tr></table></figure><p>SingleThreadExecutor适用于需要保证顺序地执行各个任务；并且在任意时间点，不会有多个线程是活动的应用场景。</p><h4 id="五、CachedThreadPool。"><a href="#五、CachedThreadPool。" class="headerlink" title="五、CachedThreadPool。"></a>五、<strong>CachedThreadPool</strong>。</h4><p>下面是Executors提供的，创建一个会根据需要创建新线程的CachedThreadPool的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">(ThreadFactory threadFactory)</span></span></span><br></pre></td></tr></table></figure><p>CachedThreadPool是大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者是负载较轻的服务器</p><h4 id="六、ScheduledThreadPoolExecutor"><a href="#六、ScheduledThreadPoolExecutor" class="headerlink" title="六、ScheduledThreadPoolExecutor"></a>六、ScheduledThreadPoolExecutor</h4><p>ScheduledThreadPoolExecutor：通常用来创建定时线程任务的线程池，例如定时轮询数据库中的表的数据</p><p>ScheduledThreadPoolExecutor通常使用工厂类Executors来创建。Executors可以创建2种类型的ScheduledThreadPoolExecutor，如下。</p><h5 id="1、ScheduledThreadPoolExecutor"><a href="#1、ScheduledThreadPoolExecutor" class="headerlink" title="1、ScheduledThreadPoolExecutor"></a>1、ScheduledThreadPoolExecutor</h5><p>下面是工厂类Executors提供的，创建固定个数线程的ScheduledThreadPoolExecutor的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize,ThreadFactory threadFactory)</span></span></span><br></pre></td></tr></table></figure><p>ScheduledThreadPoolExecutor适用于需要多个后台线程执行周期任务，同时为了满足资源管理的需求而需要限制后台线程的数量的应用场景。</p><h5 id="2、SingleThreadScheduledExecutor"><a href="#2、SingleThreadScheduledExecutor" class="headerlink" title="2、SingleThreadScheduledExecutor"></a>2、SingleThreadScheduledExecutor</h5><p>下面是Executors提供的，创建单个线程的SingleThreadScheduledExecutor的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newSingleThreadScheduledExecutor</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newSingleThreadScheduledExecutor</span><span class="params">(ThreadFactory threadFactory)</span></span></span><br></pre></td></tr></table></figure><p>SingleThreadScheduledExecutor适用于需要单个后台线程执行周期任务，同时需要保证顺序地执行各个任务的应用场景。</p><h4 id="七、Future接口"><a href="#七、Future接口" class="headerlink" title="七、Future接口"></a>七、Future接口</h4><p>Future接口和实现Future接口的FutureTask类用来表示异步计算的结果。当我们把Runnable接口或Callable接口的实现类提交（submit）给ThreadPoolExecutor或ScheduledThreadPoolExecutor时，ThreadPoolExecutor或ScheduledThreadPoolExecutor会向我们返回一个FutureTask对象。下面是对应的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Future <span class="title">submit</span><span class="params">(Callable task)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Future <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;&gt; submit(Runnable task)</span><br></pre></td></tr></table></figure><h4 id="八、Runnable接口和Callable接口"><a href="#八、Runnable接口和Callable接口" class="headerlink" title="八、Runnable接口和Callable接口"></a>八、Runnable接口和Callable接口</h4><p>Runnable接口和Callable接口的实现类，都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行。它们之间的区别是Runnable不会返回结果，而Callable可以返回结果。除了可以自己创建实现Callable接口的对象外，还可以使用工厂类Executors来把一个Runnable包装成一个Callable。下面是Executors提供的，把一个Runnable包装成一个Callable的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Callable&lt;Object&gt; <span class="title">callable</span><span class="params">(Runnable task)</span></span></span><br></pre></td></tr></table></figure><p>下面是Executors提供的，把一个Runnable和一个待返回的结果包装成一个Callable的API。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Callable&lt;T&gt; <span class="title">callable</span><span class="params">(Runnable task, T result)</span></span></span><br></pre></td></tr></table></figure><p>提交给ThreadPoolExecutor或ScheduledThreadPoolExecutor执行时，submit（…）会向我们返回一个FutureTask对象。我们可以执行FutureTask.get()方法来等待任务执行完成。当任务成功完成后FutureTask.get()将返回该任务的结果。例如，如果提交的是对象Callable1，FutureTask.get()方法将返回null；如果提交的是对象Callable2，FutureTask.get()方法将返回result对象。</p><p>线程池的使用流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建线程池</span></span><br><span class="line">Executor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE,MAXIMUM_POOL_SIZE,KEEP_ALIVE,TimeUnit.SECONDS,sPoolWorkQueue,sThreadFactory);</span><br><span class="line"><span class="comment">// 向线程池提交任务</span></span><br><span class="line">threadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ... <span class="comment">// 线程执行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 关闭线程池</span></span><br><span class="line">threadPool.shutdown(); <span class="comment">// 设置线程池的状态为SHUTDOWN，然后中断所有没有正在执行任务的线程</span></span><br><span class="line">threadPool.shutdownNow(); <span class="comment">// 设置线程池的状态为 STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表</span></span><br></pre></td></tr></table></figure><p>三、</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JAVA——多线程之线程池&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="https://lemenk.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="面试题" scheme="https://lemenk.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="多线程" scheme="https://lemenk.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程池" scheme="https://lemenk.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>多线程（一）</title>
    <link href="https://lemenk.github.io/2019/08/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://lemenk.github.io/2019/08/14/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2019-08-14T07:59:02.000Z</published>
    <updated>2020-04-05T10:48:21.540Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JAVA——多线程基础</strong></p><a id="more"></a><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><ol><li><p>程序线程进程协程</p><ol><li>程序：程序是通过某些编程语言编写的一组计算机能识别和执行的指令，运行于电子计算机上，满足人们某种需求的信息化工具。在Windows中就是.exe文件。程序只占用磁盘空间。</li><li>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是<strong>系统进行资源分配和调度的基本单位，是操作系统结构的基础</strong>。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是<strong>指令</strong>、<strong>数据</strong>及其<strong>组织形式</strong>的描述，<strong>进程是程序的实体</strong>。</li><li>线程：在一个进程内部，要同时干多件事情，就需要同时运行多个子任务，我们把进程内的这些子任务叫做线程。线程是程序执行流的最小单元。一个标准的线程由当前的线程ID、当前指令指针、寄存器和堆栈组成。同一个进程中的多个线程之间可以并发执行。</li><li>协程是一种用户态的<strong>轻量级线程</strong>，协程的调度完全由<strong>用户控制</strong>（进程和线程都是由CPU内核进行调度）。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</li></ol></li><li><p>用户态和内核态</p><ol><li><p>概念：</p><ul><li><p>内核态：CPU可以访问内存的<strong>所有数据</strong>，包括外围设备，例如硬盘，网卡，CPU也可以将自己从一个程序切换到另一个程序。</p><p><strong>当一个进程执行系统调用而陷入内核代码中执行时，我们就称进程处于内核运行态（或简称为内核态）。</strong></p></li><li><p>用户态：只能<strong>受限的访问内存</strong>，且不允许访问外围设备，占用CPU的能力被剥夺，CPU资源可以被其他程序获取。</p><p><strong>当进程在执行用户自己的代码时，则称其处于用户运行态（用户态）。</strong></p></li></ul></li><li><p>为什么要有用户态和内核态？</p><ul><li>由于需要限制不同的程序之间的访问能力, 防止他们获取别的程序的内存数据, 或者获取外围设备的数据。</li></ul></li><li><p>用户态与内核态的切换</p><ul><li><strong>系统调用</strong>：用户态进程主动要求切换到内核态的一种方式，用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作。</li><li><strong>异常</strong>：当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。</li><li><strong>外围设备的中断</strong>：当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。</li></ul></li></ol></li><li><p>并发性（concurrency）和并行性（parallel）</p><ul><li>并行是指在同一时刻，有多条指令在多个处理器上同时运行。</li><li>并发指的是在同一时刻只能有一条指令执行，即每个指令以时间片为单位来执行。</li></ul></li><li><p>线程生命周期</p><ul><li><p>New(初始化状态)：在执行new语句之后就新建了一个线程。</p></li><li><p>Runnable(可运行/运行状态)：start()方法调用后就处于可运行态</p></li><li><p>Blocked(阻塞状态)：通过synchronized使线程阻塞</p></li><li><p>Waiting(无时间限制的等待状态)：</p><p><code>Object.wait()</code>方法、<code>Thread.join()</code>方法、<code>LockSupport.park()</code>方法都可以使线程从Runnable状态到waiting状态</p></li><li><p>Timed_Waiting(有时间限制的等待状态)：<code>Object.wait(long timeout)</code> 、<code>Thread.join(long millis)</code> 、<code>Thread.sleep(long millis)</code>、<code>LockSupport.parkUntil(long deadline)</code>都会使线程从Runnable状态到waiting状态。</p></li><li><p>Terminated(终止状态)：<code>interrupt()</code>中断线程</p><img src="http://img.cdn.lemenk.top/20180720141305449.png"/></li></ul></li><li><p>线程的优先级</p><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p><p>Java 线程的优先级是一个整数，其取值范围是 1 （<code>Thread.MIN_PRIORITY</code> ） - 10 （<code>Thread.MAX_PRIORITY</code> ）。</p><p>默认情况下，每一个线程都会分配一个优先级 <code>NORM_PRIORITY（5）</code>。</p><p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，依赖于平台。</p></li><li><p>创建线程的方法：</p><ol><li>通过实现 Runnable 接口；</li><li>通过继承 Thread 类本身；</li><li>通过 Callable 和 Future 创建线程。</li></ol></li></ol><h2 id="二、创建线程"><a href="#二、创建线程" class="headerlink" title="二、创建线程"></a>二、创建线程</h2><ol><li><p>通过实现Runnable接口来创建线程:</p><p>Runnable接口中包含了<code>run()</code>抽象方法，因此在实现Runnable接口时必须重写<code>run()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用构造方法：<code>Thread(Runnable target, String name)</code>，其中target为启动此线程时调用其run方法的对象。 如果null ，则调用此线程的run方法。 name为新线程的名称 。</p><p>代码实现：</p><p>重写run()方法，开启两个线程，并打印出线程名字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ID;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadTest</span><span class="params">(String ID)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(ID + <span class="string">" is running "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadTest h1 = <span class="keyword">new</span> ThreadTest(<span class="string">"线程1"</span>);</span><br><span class="line">        Thread demo1 = <span class="keyword">new</span> Thread(h1);</span><br><span class="line">        ThreadTest h2 = <span class="keyword">new</span> ThreadTest(<span class="string">"线程2"</span>);</span><br><span class="line">        Thread demo2 = <span class="keyword">new</span> Thread(h2);</span><br><span class="line">        demo1.start();</span><br><span class="line">        demo2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写run()和start()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        RunnableDemo R1 = <span class="keyword">new</span> RunnableDemo( <span class="string">"Thread-1"</span>);</span><br><span class="line">        R1.start();</span><br><span class="line"></span><br><span class="line">        RunnableDemo R2 = <span class="keyword">new</span> RunnableDemo( <span class="string">"Thread-2"</span>);</span><br><span class="line">        R2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread t;</span><br><span class="line">    <span class="keyword">private</span> String threadName;</span><br><span class="line"></span><br><span class="line">    RunnableDemo( String name) &#123;</span><br><span class="line">        threadName = name;</span><br><span class="line">        System.out.println(<span class="string">"Creating "</span> +  threadName );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Running "</span> +  threadName );</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread: "</span> + threadName + <span class="string">", "</span> + i);</span><br><span class="line">                <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">                Thread.sleep(<span class="number">50</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> +  threadName + <span class="string">" interrupted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Thread "</span> +  threadName + <span class="string">" exiting."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Starting "</span> +  threadName );</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            t = <span class="keyword">new</span> Thread (<span class="keyword">this</span>, threadName);</span><br><span class="line">            t.start ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>通过继承Thread来创建线程：本质上也是实现了 Runnable 接口的一个实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*省略*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且Thread类已经重写了接口的<code>run()</code>方法，实际情况时需要重写run()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String ID;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadTest</span><span class="params">(String ID)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            System.out.println(ID + <span class="string">" is running "</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadTest h1 = <span class="keyword">new</span> ThreadTest(<span class="string">"线程1"</span>);</span><br><span class="line">        Thread demo1 = <span class="keyword">new</span> Thread(h1);</span><br><span class="line">        ThreadTest h2 = <span class="keyword">new</span> ThreadTest(<span class="string">"线程2"</span>);</span><br><span class="line">        Thread demo2 = <span class="keyword">new</span> Thread(h2);</span><br><span class="line">        demo1.start();</span><br><span class="line">        demo2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Thread类的一些重要方法：</p><table><thead><tr><th>方法及其描述</th></tr></thead><tbody><tr><td><small>public void start()<br/>使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</small></td></tr><tr><td><small><strong>public void run()</strong><br/>如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</small></td></tr><tr><td><small><strong>public final void setName(String name)</strong><br/>改变线程名称，使之与参数 name 相同。</small></td></tr><tr><td><small><strong>public final void setPriority(int priority)</strong><br/> 更改线程的优先级。</small></td></tr><tr><td><small><strong>public final void setDaemon(boolean on)</strong><br/>将该线程标记为守护线程或用户线程。</small></td></tr><tr><td><small><strong>public final void join(long millisec)</strong><br/>等待该线程终止的时间最长为 millis 毫秒。</small></td></tr><tr><td><small><strong>public void interrupt()</strong><br/>中断线程。</small></td></tr><tr><td><small><strong>public final boolean isAlive()</strong><br/>测试线程是否处于活动状态。</small></td></tr></tbody></table></li></ol><ol start="3"><li><p><strong>通过实现Callable接口通过FutureTask包装器来创建Thread线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.lemenk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest4</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ThreadTest4 tt = <span class="keyword">new</span> ThreadTest4();</span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> FutureTask&lt;&gt;(tt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" 的循环变量i的值"</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">20</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Thread(ft,<span class="string">"有返回值的线程"</span>).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">"子线程的返回值："</span>+ft.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e)</span><br><span class="line">        &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">" "</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>实现Runnable和继承Thread的区别:</strong></p><ol><li>Runnable接口的话，可以避免单继承的局限性，具有较强的健壮性。</li><li>Runnable可以实现资源的共享，同时处理同一资源。</li><li>Thread类的线程间都是独立运行的，资源不共享。</li><li>继承Thread类不再被其他类继承（Java不存在多继承）</li></ol><p>采用实现Runnable，Callable接口优缺点：</p><ol><li><p>接口可以多继承，继承了Runnable接口还能继承其他接口</p></li><li><p>适合多个相同线程来处理同一份资源的情况，</p></li><li><p>缺点是，编程稍微复杂，访问当前线程必须使用<code>Thread.currentThread()</code></p><p>采用继承Thread类优缺点：<br>1，编写简单，访问当前线程可直接用this<br>2，缺点是，不能再继承其他类<br>综上，建议采用实现Runnable接口的方法来创建和启动线程</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JAVA——多线程基础&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="多线程" scheme="https://lemenk.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="面试题" scheme="https://lemenk.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="多线程" scheme="https://lemenk.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JVM知识笔记一</title>
    <link href="https://lemenk.github.io/2019/08/10/JVM%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>https://lemenk.github.io/2019/08/10/JVM%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E4%B8%80/</id>
    <published>2019-08-10T07:10:04.000Z</published>
    <updated>2020-04-05T10:37:28.226Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JVM学习笔记</strong></p><a id="more"></a><h4 id="一、JVM模型概述"><a href="#一、JVM模型概述" class="headerlink" title="一、JVM模型概述"></a>一、JVM模型概述</h4><p>​        JVM是Java Virtual Machine(Java虚拟机)的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><p>​        引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言[编译程序]只需生成在Java虚拟机上运行的目标代码(字节码)，就可以在多种平台上不加修改地运行。</p><p>Java程序从源码到运行一般有下面3步：</p><p><img src="JVM%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E4%B8%80%5Cjvmp1.jpg" alt=""></p><p>从.class文件–&gt;机器码这一步时，JVM类加载器加载字节码文件，然后解释器逐一解释执行。这种方式比较慢，后面引进了JIT(Just In Time Compiler 即时编译器)，将“热点代码”编译成与本地平台相关的机器码，并进行各种层次的优化，提高效率。</p><p><img src="JVM%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E4%B8%80%5Cjvmp2.png" alt=""></p><p>在JDK8的版本中，方法区被移除，取而代之的是metaspace（元数据空间）。</p><ul><li>程序计数器：它是一块较小的地址空间，它可以看作是当前线程所执行的字节码的行号指示器。是线程私有的，每个线程拥有一个程序计数器。为了使线程切换后可以回到正确的位置继续执行。</li><li>Java虚拟机栈：线程私有，生命周期与线程相同。方法在执行时都会创建一个栈帧，用于存放局部变量表、方法出口等信息。局部变量表存放基本数据类型和对象引用。方法调用直至结束就对应着一个栈帧在虚拟机中入栈和出栈。</li><li>本地方法栈：与虚拟机栈相似，但是本地方法栈是为虚拟机所用到的Native方法，而虚拟机栈是为虚拟机执行Java方法服务。</li><li>Java堆：他是Java虚拟机所管理的内存中最大的一块，被所有线程所共享，用来存放对象实例。所有的对象实例和数组都在堆上分配。java堆在逻辑上连续即可。</li><li>方法区：线程共享，用来存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JVM学习笔记&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="https://lemenk.github.io/categories/JVM/"/>
    
      <category term="面试题" scheme="https://lemenk.github.io/categories/JVM/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="JVM" scheme="https://lemenk.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>面试问题积累一</title>
    <link href="https://lemenk.github.io/2019/07/20/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF%E4%B8%80/"/>
    <id>https://lemenk.github.io/2019/07/20/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E7%A7%AF%E7%B4%AF%E4%B8%80/</id>
    <published>2019-07-20T10:06:08.000Z</published>
    <updated>2020-04-05T10:45:25.638Z</updated>
    
    <content type="html"><![CDATA[<p><strong>面试常问之类与接口</strong></p><a id="more"></a><ol><li><p>类的实例化顺序</p><p>父类静态成员–&gt;父类静态初始化块–&gt;子类静态成员–&gt;子类静态初始化块–&gt;父类实例成员–&gt;实例初始化块–&gt;父类构造方法–&gt;子类实例成员–&gt;子类实例初始化块–&gt;子类构造方法即：先静态方法，再构造方法，每个又是先父类后子类</p></li><li><p>抽象类和接口</p><ol><li><p>抽象类：即用abstract修饰的类。</p><ul><li><p>抽象类不能有对象，不能实例化。即不能用new</p></li><li><p>包含抽象方法的类一定是抽象类，而抽象类不一定有抽象方法。</p></li><li><p>抽象方法中不能有方法体，只是对方法的定义。</p></li><li><p>抽象类中的抽象方法必须在子类中被重写</p></li><li><p>抽象类的子类必须重写父类所有的抽象方法，否则必须也是抽象类。</p></li><li><p>抽象方法不能是静态的，即不能用<code>static</code>来修饰</p></li><li><p>子类实现方法必须含有相同的或者耕地的访问级别(public-&gt;protected-&gt;private)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">    <span class="comment">//public abstract static void move();  //抽象方法不能是静态方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="comment">//可以不重写普通方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重写父类的抽象方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><pre><code>- 关于构造函数  - 如果在父类中显示的写了**有参数的构造函数**，在子类继承就必须写一个构造函数来调用父类的构造函数；    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;<span class="comment">//抽象类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"有参构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    B(<span class="keyword">int</span> a)&#123;</span><br><span class="line">        <span class="keyword">super</span>(a);<span class="comment">//显示调用父类构造方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  - 如果父类中有无参数的构造函数，在子类中可以不显式的写父类的构造函数，Java会自动调用没有参数的构造函数。    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//无参构造</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    B()&#123;</span><br><span class="line">        <span class="comment">//super();//可以省略不写，Java会自动调用super()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol start="2"><li><p>接口Interface</p><ul><li><p>定义接口时用Interface关键字来声明，一般一个接口为一个Java文件</p></li><li><p>接口中定义的变量和方法都包含默认的修饰符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ID = <span class="number">1</span>; <span class="comment">//定义全局常量</span></span><br><span class="line">    <span class="comment">//public static final int ID = 1; </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;<span class="comment">//定义抽象方法</span></span><br><span class="line">    <span class="comment">//public abstract void run();</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口中的方法都是抽象方法，因此不能通过实例化对象来调用接口中的方法</p></li><li><p>当一个类为抽象类时，则实现接口中的部分方法即可，否则必须实现所有方法。</p></li><li><p>一个类可以通过<code>implements</code>关键字实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> <span class="keyword">implements</span> <span class="title">Fly</span>,<span class="title">Run</span></span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><pre><code>- 接口可以继承自另一个接口，或多个接口- 一个类在继承另一个类的同时还可以实现接口，但先继承后实现  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Canidea</span> <span class="keyword">implements</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    …………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>- Java8新特性——接口中可以定义方法体  1. 定义静态方法：在接口中定义的静态方法，不是抽象的，具体实现的，可以直接使用接口名称调用。     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1、定义一个静态的带有方法体的方法</span></span><br><span class="line"><span class="comment">         * 2、接口不能创建对象，调用静态方法不需要对象</span></span><br><span class="line"><span class="comment">         * 3、接口名调用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"接口中静态方法"</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args )</span> </span>&#123;</span><br><span class="line">  <span class="comment">//接口名称，直接调用---TestMethod（接口名称）</span></span><br><span class="line">    TestMethod.method();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  2. 定义普通方法：在接口可以定义非抽象的普通方法，可以使用关键字default     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义接口中默认方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 不同于静态方法，默认方法是一个非静态方法</span></span><br><span class="line"><span class="comment">  * 对于非静态方法，只能通过对象进行调用</span></span><br><span class="line"><span class="comment">  * 但是接口是不能创建对象的名故而我们需要子类来实现接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span>  <span class="title">methodDefault</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"默认方法"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用子类对象，调用接口中的默认方法</span></span><br><span class="line">Inter8Impl inter8 = <span class="keyword">new</span> Inter8Impl();</span><br><span class="line">inter8.methodDefault();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用多态的特点，接口指向自己的实现类，调用对应的方法</span></span><br><span class="line">TestMethod i88=<span class="keyword">new</span> Inter8Impl();</span><br><span class="line">i88.methodDefault();</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;面试常问之类与接口&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试题" scheme="https://lemenk.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://lemenk.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>牛客网-剑指offer</title>
    <link href="https://lemenk.github.io/2019/07/16/%E7%89%9B%E5%AE%A2%E7%BD%91-%E5%89%91%E6%8C%87offer/"/>
    <id>https://lemenk.github.io/2019/07/16/%E7%89%9B%E5%AE%A2%E7%BD%91-%E5%89%91%E6%8C%87offer/</id>
    <published>2019-07-16T06:49:44.000Z</published>
    <updated>2020-04-05T10:44:34.546Z</updated>
    
    <content type="html"><![CDATA[<p><strong>牛客网-剑指offer学习笔记</strong></p><a id="more"></a><h5 id="一-、二维数组中的查找"><a href="#一-、二维数组中的查找" class="headerlink" title="一 、二维数组中的查找"></a>一 、二维数组中的查找</h5><p>1、题目描述：<a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&tqId=11154&tPage=1&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">链接</a></p><p>​        在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>时间限制：1秒 空间限制：32768K</p><p>2、思路分析：</p><p>题中所述，每行从左到右递增的顺序排序，每列从上到下递增的顺序排序，因此可以得到二维数组中每行的最后一个数字必是该行最大数字。若要判断该元素是否存在在二位数组中，只要判断该元素是否小于某一行的最后一个元素。即：对于此二维数组来说，只用判断target是否小于每一行的最后一个数字即可判断target是否存在于该二维数组中。</p><img src="http://img.cdn.lemenk.top/Q1p1.png" /><img src="http://img.cdn.lemenk.top/Q1p2.png" /><p>若要查找target=22，则判断target&lt;=行内最大元素即可。</p><p>3、代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="keyword">int</span> [][] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = array.length;</span><br><span class="line">        <span class="keyword">int</span> x = array[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(x ==<span class="number">0</span> || y ==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;y;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[i][x-<span class="number">1</span>] &gt;= target)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;x;j++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(array[i][j] == target)&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交结果：</p><img src="http://img.cdn.lemenk.top/Q1p3.png" /><h5 id="二、替换空格"><a href="#二、替换空格" class="headerlink" title="二、替换空格"></a>二、替换空格</h5><ol><li><p>题目描述：<a href="nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&tqId=11155&rp=1&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking">链接</a></p><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><p>时间限制：1秒 空间限制：32768K</p></li><li><p>思路分析：</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;牛客网-剑指offer学习笔记&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://lemenk.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://lemenk.github.io/categories/%E7%AE%97%E6%B3%95/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法" scheme="https://lemenk.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的两种引擎的区别</title>
    <link href="https://lemenk.github.io/2019/07/07/MySQL%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%BC%95%E6%93%8E%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://lemenk.github.io/2019/07/07/MySQL%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%BC%95%E6%93%8E%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2019-07-07T07:26:48.000Z</published>
    <updated>2020-04-05T10:33:36.131Z</updated>
    
    <content type="html"><![CDATA[<p><strong>两种引擎：Innodb和MyISAM</strong></p><a id="more"></a><p><strong>Innodb引擎概述</strong></p><p>Innodb引擎提供了对数据库<a href="http://blog.lemenk.top/2019/09/10/%E4%BA%8B%E5%8A%A1%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E5%BE%81/#more" target="_blank" rel="noopener">ACID事务</a>的支持，并且实现了SQL标准的四种隔离级别。该引擎还提供了行级锁和外键约束，它的设计目标是处理大容量数据库系统，它本身其实就是基于MySQL后台的完整数据库系统，MySQL运行时Innodb会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎不支持FULLTEXT类型的索引，而且它没有保存表的行数，当SELECT COUNT(*) FROM TABLE时需要扫描全表。当需要使用数据库事务时，该引擎当然是首选。由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用Innodb引擎会提升效率。但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表。</p><p><strong>MyISAM引擎概述</strong></p><p>MyISAM是MySQL默认的引擎，但是它没有提供对数据库事务的支持，也不支持行级锁和外键，因此当INSERT(插入)或UPDATE(更新)数据时即写操作需要锁定整个表，效率便会低一些。不过和Innodb不同，MyISAM中存储了表的行数，于是SELECT COUNT(*) FROM TABLE时只需要直接读取已经保存好的值而不需要进行全表扫描。如果表的读操作远远多于写操作且不需要数据库事务的支持，那么MyISAM也是很好的选择。</p><p>总结：</p><ol><li>MyISAM是非事务安全的，而InnoDB是事务安全的</li><li>MyISAM锁的粒度是表级的，而InnoDB支持行级锁</li><li>MyISAM支持全文类型索引，而InnoDB不支持全文索引</li><li>MyISAM相对简单，效率上要优于InnoDB，小型应用可以考虑使用MyISAM</li><li>MyISAM表保存成文件形式，跨平台使用更加方便</li></ol><p>MyISAM是mysql默认的插件式存储引擎，适用于主要插入和查询记录；</p><p>InnoDB：用于事务处理，包括ACID事务支持（提供行级锁），适用于需要实现并发控制和事务（ACID）的项目。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;两种引擎：Innodb和MyISAM&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://lemenk.github.io/categories/MySQL/"/>
    
      <category term="面试题" scheme="https://lemenk.github.io/categories/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://lemenk.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="MySQL" scheme="https://lemenk.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL面试必知知识</title>
    <link href="https://lemenk.github.io/2019/07/06/MySQL%E9%9D%A2%E8%AF%95%E5%BF%85%E7%9F%A5%E7%9F%A5%E8%AF%86/"/>
    <id>https://lemenk.github.io/2019/07/06/MySQL%E9%9D%A2%E8%AF%95%E5%BF%85%E7%9F%A5%E7%9F%A5%E8%AF%86/</id>
    <published>2019-07-06T07:35:35.000Z</published>
    <updated>2020-04-05T10:33:16.430Z</updated>
    
    <content type="html"><![CDATA[<p><strong>面试常问之MySQL</strong></p><a id="more"></a><h4 id="一、索引相关"><a href="#一、索引相关" class="headerlink" title="一、索引相关"></a>一、索引相关</h4><ol><li><p>什么是索引？</p><p><strong>索引是一种数据结构，可以帮助我们快速的进行数据的查找。</strong></p><p>在关系数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种<strong>存储结构</strong>，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。</p><p>索引提供指向存储在表的指定列中的数据值的指针，然后根据您指定的排序顺序对这些指针排序。数据库使用索引以找到特定值，然后顺指针找到包含该值的行。这样可以使对应于表的SQL语句执行得更快，可快速访问数据库表中的特定信息。</p><p>当表中有大量记录时，若要对表进行查询，第一种搜索信息方式是全表搜索，是将所有记录一一取出，和查询条件进行一一对比，然后返回满足条件的记录，这样做会消耗大量数据库系统时间，并造成大量磁盘I/O操作；第二种就是在表中建立索引，然后在索引中找到符合查询条件的索引值，最后通过保存在索引中的ROWID（相当于页码）快速找到表中对应的记录。</p><ul><li><p>作用：</p><ul><li>快速取数据；</li><li>保证数据记录的唯一性；</li><li>实现表与表之间的参照完整性；</li><li>在使用ORDER BY、GROUP BY子句进行数据检索时，利用索引可以减少排序和分组的时间。</li></ul></li><li><p>优缺点：</p><ul><li>优点：<ul><li>大大加快数据的检索速度;</li><li>创建唯一性索引，保证数据库表中每一行数据的唯一性;</li><li>加速表和表之间的连接;</li><li>在使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间。</li></ul></li><li>缺点：<ul><li>索引需要占物理空间。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度。</li></ul></li></ul></li><li><p>普通索引的创建、修改、删除</p><p><a href="[http://blog.lemenk.top/2019/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93/#more](http://blog.lemenk.top/2019/09/27/数据库/#more)">链接</a></p></li></ul></li><li><p>MySQL数据库索引的数据结构</p><p>InnoDB存储引擎的默认索引的数据结构为B+树。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;面试常问之MySQL&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://lemenk.github.io/categories/MySQL/"/>
    
      <category term="面试题" scheme="https://lemenk.github.io/categories/MySQL/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://lemenk.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="MySQL数据库" scheme="https://lemenk.github.io/tags/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>IO相关知识</title>
    <link href="https://lemenk.github.io/2019/06/27/IO%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>https://lemenk.github.io/2019/06/27/IO%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2019-06-27T05:48:25.000Z</published>
    <updated>2020-04-05T10:39:45.754Z</updated>
    
    <content type="html"><![CDATA[<p><strong>IO相关知识</strong></p><a id="more"></a><p><strong>JAVA——IO相关知识</strong></p><!--more--><p>java.io.File类：只能新建、删除、重命名，不能查看文件内容的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="comment">/*略*/</span></span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">"D:/a.txt"</span>)</span><br></pre></td></tr></table></figure><p>输入流：相对于程序，将数据写入到程序中</p><p>输出流：相对于程序，通过程序将数据输出到指定目录</p><p>文件流：基于文件</p><p>FileInputStream/FileOutputStream/FileReader/FileWriter</p><p>缓冲流：基于内存的操作</p><p>BufferedInputStream/BufferedoutputStream/BufferedReader/BufferedWriter</p><p>转换流：文件流与缓冲流的转换</p><p>InputStreamReader/OutputStreamWriter</p><p>对象流：把对象转化为数据流进行读写</p><p>ObjectInputStream/ObjectOutputStream</p><p>随机存取文件流：可以随机的在文件中的某一行读取/插入数据</p><p>RandomAccessFile</p><h3 id="字节流：传输数据为字节的流"><a href="#字节流：传输数据为字节的流" class="headerlink" title="字节流：传输数据为字节的流"></a>字节流：传输数据为字节的流</h3><h4 id="一、字节输入流"><a href="#一、字节输入流" class="headerlink" title="一、字节输入流"></a>一、字节输入流</h4><p>常用的字节输入流主要有：</p><ul><li><strong>InputStream</strong> </li><li><strong>FileInputStream</strong></li><li><strong>BufferedInputStream</strong>（是FilterInputStream的子类）</li></ul><p><strong>InputStream</strong> 为字节输入流的基类，以下为几个常用方法：</p><ul><li>read(byte[] b)：从流中读取b的长度个字节的数据存储到b中，返回结果是读取的字节个数（当再次读时，如果返回-1说明到了结尾，没有了数据）</li><li>read(byte[] b, int off, int len)：从流中从off的位置开始读取len个字节的数据存储到b中，返回结果是实际读取到的字节个数（当再次读时，如果返回-1说明到了结尾，没有了数据）</li><li>close()：关闭流，释放资源。</li></ul><p><strong>FileInputStream</strong>主要用来操作文件输入流，实现了父类的无参数的read()方法。</p><ul><li>int read()：返回值为int，字符的ASCll码。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字节输入流FileInputStream</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String path = <span class="string">"D:/a.java"</span>;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];<span class="comment">//创建一个字节长度为5的字符数组，用于临时存放读出的字符。</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(b,<span class="number">0</span>,len));<span class="comment">//参数：字符数组；起始位置；字节数；</span></span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BufferedInputStream</strong>：先将数据封装到内存中，然后从内存中读，所以它的效率要要非缓冲的要高。它是一种封装别的流以提高效率的流，所以它的初始化需要一个的InputStream流对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字节输入流BufferedInputStream</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String path = <span class="string">"D:/a.java"</span>;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);<span class="comment">//参数为其他流</span></span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(b)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(b,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、字节输出流"><a href="#二、字节输出流" class="headerlink" title="二、字节输出流"></a>二、字节输出流</h4><p>常用的字节输入流主要有：</p><ul><li>OutputStream</li><li>FileOutputStream</li><li>BufferedOutputStream（是FilterOutputStream的子类）</li></ul><p>OutputStream是字节输出流的基类：</p><ul><li>write(byte[] b):将b的长度个字节数据写到输出流中。</li><li>write(byte[] b,int off,int len):从b的off位置开始，获取len个字节数据，写到输出流中。</li><li>flush():刷新输出流，把数据马上写到输出流中。</li><li>close():关闭流，释放系统资源。</li></ul><p>FileOutputStream是用于写文件的输出流：</p><ul><li>write(int b)：将b转成一个字节数据，写到输出流中。</li></ul><p>FileOutputStream包含两个参数：1，所要写入的文件路径，若不存在则新建；2，是否使用追加写入默认，为true时代表在原有文件内容后面追加写入数据，默认为false。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字节输出流FileOutputStream</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String path = <span class="string">"D:/b.java"</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(path,<span class="keyword">true</span>);<span class="comment">//路径+是否追加</span></span><br><span class="line">        String str = <span class="string">"I Like China!"</span>;</span><br><span class="line">        fos.write(str.getBytes());</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BufferedOutputStream</p><ul><li>write(int b):write(int b)：将b转成一个字节数据，写到输出流中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字节输出流BufferedOutputStream</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        String path = <span class="string">"D:/b.java"</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(path,<span class="keyword">true</span>);<span class="comment">//路径+是否追加</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);<span class="comment">//参数为其他流对象</span></span><br><span class="line">        String str = <span class="string">"I Like China!"</span>;</span><br><span class="line">        bos.write(str.getBytes());</span><br><span class="line">        bos.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符流：传输数据的最基本单位是字符的流。"><a href="#字符流：传输数据的最基本单位是字符的流。" class="headerlink" title="字符流：传输数据的最基本单位是字符的流。"></a>字符流：传输数据的最基本单位是字符的流。</h3><h4 id="一、字符输入流"><a href="#一、字符输入流" class="headerlink" title="一、字符输入流"></a>一、字符输入流</h4><p>字符流的类通常以reader和writer结尾</p><p><strong>Reader</strong>：字符输入流的抽象父类</p><ul><li>read() ：读取单个字符，返回结果是一个int，需要转成char;到达流的末尾时，返回-1</li><li>read(char[] cbuf):读取cbuf的长度个字符到cbuf这种，返回结果是读取的字符数，到达流的末尾时，返回-1</li><li>close()  ：关闭流，释放占用的系统资源。</li></ul><p><strong>InputStreamReader</strong>：把InputStream中的字节数据流根据字符编码方式转成字符数据流</p><ul><li><p>read(char[] cbuf, int offset, int length) ：从offset位置开始，读取length个字符到cbuf中，返回结果是实际读取的字符数，到达流的末尾时，返回-1</p></li><li><p>需要一个字节输入流对象作为实例化参数。还可以指定第二个参数，第二个参数是字符编码方式，可以是编码方式的字符串形式，也可以是一个字符集对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字节转换输入流InputStreamReader 字节流---&gt;字符流</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//参数1：字节输入流对象作为实例化参数。参数2（可选）：是字符编码方式，可以是编码方式的字符串形式，也可以是一个字符集对象</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">"D:/a.java"</span>));</span><br><span class="line">        <span class="keyword">int</span> ch;</span><br><span class="line">        <span class="keyword">while</span> ((ch = isr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) ch);</span><br><span class="line">        &#125;</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>FileReader</strong>：把FileInputStream中的字节数据转成根据字符编码方式转成字符数据流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符输入流FileReader</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileReader fr = <span class="keyword">new</span> FileReader(filepath);</span><br><span class="line">            <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fr.read(cbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len));</span><br><span class="line">            &#125;</span><br><span class="line">            fr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>BufferedReader</strong>：把字符输入流进行封装，将数据进行缓冲，提高读取效率</p><ul><li><p>read(char[] cbuf, int offset, int length) ：从offset位置开始，读取length个字符到cbuf中，返回结果是实际读取的字符数，到达流的末尾时，返回-1</p></li><li><p>readLine() ：读取一个文本行，以行结束符作为末尾，返回结果是读取的字符串。如果已到达流末尾，则返回 null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符缓冲输入流</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileReader fr = <span class="keyword">new</span> FileReader(filepathin);</span><br><span class="line">            BufferedReader bf = <span class="keyword">new</span> BufferedReader(fr);<span class="comment">//将字符文件输入流作为对象</span></span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line=bf.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            bf.close();</span><br><span class="line">            fr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="二、字符输出流"><a href="#二、字符输出流" class="headerlink" title="二、字符输出流"></a>二、字符输出流</h4><p><strong>Writer</strong>：抽象父类</p><ul><li>write(char[] cbuf) :往输出流写入一个字符数组。</li><li>write(int c) ：往输出流写入一个字符。</li><li>write(String str) ：往输出流写入一串字符串。</li><li>write(String str, int off, int len) :往输出流写入字符串的一部分。</li><li>flush()：刷新输出流，把数据马上写到输出流中。</li><li>close() ：关闭流，释放资源。 关闭之前回刷新内部缓冲区的数据，将其刷到目的位置。与flush的区别是flush刷新后，流可以继续使用，close刷新后将会将流关闭。</li></ul><p><strong>OutputStreamWriter</strong>：直接往流中写字符串数据，根据字符编码方式把字符数据转成字节数据再写给输出流。需要一个字节文件输出流对象作为参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符转换输出流OutputStreamWriter，字符流---&gt;字节流</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;    </span><br><span class="line">    <span class="keyword">try</span> &#123;        </span><br><span class="line">        <span class="comment">//两个参数，路径+是否追加        </span></span><br><span class="line">        FileOutputStream out = <span class="keyword">new</span> FileOutputStream(filepathout,<span class="keyword">true</span>);<span class="comment">//创建一个字节文件输出流        </span></span><br><span class="line">        OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(out);</span><br><span class="line">        osw.write(<span class="string">"abcdefg"</span>);        </span><br><span class="line">        osw.close();    </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;        </span><br><span class="line">        e.printStackTrace();    &#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>FileWriter</strong>：与OutputStreamWriter类似。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符输出流</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(filepathout,<span class="keyword">true</span>);</span><br><span class="line">            fw.write(<span class="string">"ABCDEFG"</span>);</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>BufferedWriter</strong>：利用缓冲区来提高写入的效率。</p><ul><li><p>newLine():写入一行行分隔符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符缓冲输出流</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileWriter fw = <span class="keyword">new</span> FileWriter(filepathout,<span class="keyword">true</span>);</span><br><span class="line">            BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(fw);</span><br><span class="line">            bw.write(<span class="string">"我爱中国"</span>);</span><br><span class="line">            bw.close();</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;IO相关知识&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA_IO" scheme="https://lemenk.github.io/categories/JAVA-IO/"/>
    
    
      <category term="JAVA_IO" scheme="https://lemenk.github.io/tags/JAVA-IO/"/>
    
  </entry>
  
  <entry>
    <title>获取字符串中相同字符个数的问题</title>
    <link href="https://lemenk.github.io/2019/06/27/%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B8%AA%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://lemenk.github.io/2019/06/27/%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%E4%B8%AA%E6%95%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2019-06-27T01:59:53.000Z</published>
    <updated>2020-04-05T10:46:46.313Z</updated>
    
    <content type="html"><![CDATA[<p><strong>面试题之获取字符串中相同字符个数</strong></p><a id="more"></a><p>获取字符串中相同字符的个数有两种题型，分别是</p><ol><li>对字符串进行RLE压缩，将相邻的相同字符，用计数值和字符值来代替。例如：aaabccccccddeee，则可用3a1b6c2d3e来代替。<a href="https://www.nowcoder.com/questionTerminal/44da6966beb449d383f62b12e8df6317" target="_blank" rel="noopener">快手笔试题</a></li><li>计算一个字符串里面每个字符出现的次数。例如：Ilikebananas，则结果是I1l1i1k1e1b1a3n2s1。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对字符串进行RLE压缩，将相邻的相同字符，用计数值和字符值来代替。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stringRLE</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        s+=<span class="string">"@"</span>;<span class="comment">//加上@可避免数组越界，可得到最后一个字符</span></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(i - <span class="number">1</span>)) &#123;<span class="comment">//判断字符相邻是否相同</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(count + <span class="string">""</span> + s.charAt(i - <span class="number">1</span>));</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算一个字符串里面每个字符出现的次数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(c)) &#123;</span><br><span class="line">                <span class="comment">//获取集合中c的value，重新存入++count</span></span><br><span class="line">                Integer count = map.get(c);</span><br><span class="line">                map.put(c, ++count);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果集合中还没有，直接存入</span></span><br><span class="line">                map.put(c, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;面试题之获取字符串中相同字符个数&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://lemenk.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="笔试题" scheme="https://lemenk.github.io/categories/%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="算法" scheme="https://lemenk.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://lemenk.github.io/2019/06/20/%E9%9B%86%E5%90%88/"/>
    <id>https://lemenk.github.io/2019/06/20/%E9%9B%86%E5%90%88/</id>
    <published>2019-06-20T10:25:14.000Z</published>
    <updated>2020-04-05T10:45:50.980Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JAVA_集合相关学习笔记</strong></p><a id="more"></a><h3 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h3><p>集合就是一个放数据对象引用的容器。常用的两大父接口：Collection和Map</p><h3 id="二、主要结构图"><a href="#二、主要结构图" class="headerlink" title="二、主要结构图"></a>二、主要结构图</h3><img src="http://img.cdn.lemenk.top/cp1.png" width="" height="" /><h3 id="三、概述："><a href="#三、概述：" class="headerlink" title="三、概述："></a>三、概述：</h3><p>Collection包含List , Set，Queue</p><p>Map包含Hashtable，LinkedHashMap，HashMap，TreeMap</p><p>List包含：ArrayList，Vector，LinkedList</p><p>Set包含：HashSet，LinkedHashSet，TreeSet</p><p>四、详解</p><h4 id="Collection："><a href="#Collection：" class="headerlink" title="Collection："></a><strong>Collection：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>可见<code>Collection</code>接口继承自<code>Iterable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*略*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用方法：</p><p><code>int size()</code>：返回此集合中的元素数。 如果此收藏包含超过Integer.MAX_VALUE个元素，则返回<code>Integer.MAX_VALUE</code> 。 </p><p><code>boolean isEmpty()</code>：如果此集合为空，则返回 true 。否则返回false。 </p><p><code>boolean contains(Object o)</code>：如果此集合包含指定的元素，则返回true 。</p><p><code>&lt;T&gt; T[] toArray(T[] a)</code>：返回包含此集合中所有元素的数组。</p><p><code>boolean add(E e)</code>：添加元素</p><p><code>boolean remove(Object o)</code>：删除元素</p><p><code>void clear()</code>：从此集合中删除所有元素（可选操作）。 此方法返回后，集合将为空。</p><p><code>boolean equals(Object o)</code>：集合指定对象进行比较</p><h5 id="一List-有序-可重复"><a href="#一List-有序-可重复" class="headerlink" title="一List 有序,可重复"></a><strong>一List 有序,可重复</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/*略*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JAVA_集合相关学习笔记&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试题" scheme="https://lemenk.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="面试题" scheme="https://lemenk.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
</feed>
