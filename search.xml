<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录SQLFeatureNotSupportedException异常</title>
      <link href="/2020/05/11/ji-lu-sqlfeaturenotsupportedexception-yi-chang/"/>
      <url>/2020/05/11/ji-lu-sqlfeaturenotsupportedexception-yi-chang/</url>
      
        <content type="html"><![CDATA[<p>记录<code>SQLFeatureNotSupportedException</code>异常</p><p>数据库中<code>create_time</code>字段的类型是<code>datetime</code></p><p>使用<code>mybatis-plus</code>逆向工程生成实体类后，<code>create_time</code>的类型为<code>LocalDateTime</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> LocalDateTime createTime<span class="token punctuation">;</span></code></pre><p>这是由于<code>mybatis-plus</code>在3.0以上默认时间为<code>LocalDateTime</code>类型。</p><p>至于为什么是<code>LocalDateTime</code>，可以</p><p>因此就会报错：</p><pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>InvalidDataAccessApiUsageException<span class="token operator">:</span> Error attempting to get column <span class="token string">'create_time'</span> from result set<span class="token punctuation">.</span>  Cause<span class="token operator">:</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLFeatureNotSupportedException<span class="token punctuation">;</span> null<span class="token punctuation">;</span>nested exception is java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLFeatureNotSupportedException</code></pre><p>解决办法：</p><ul><li><strong>mybatis-plus版本降至3.1.0或以下即可</strong></li><li><strong>也可以参考下面网友提供的其它解决方法</strong></li><li><strong><a href="https://mp.baomidou.com/guide/faq.html#error-attempting-to-get-column-create-time-from-result-set-cause-java-sql-sqlfeaturenotsupportedexception" target="_blank" rel="noopener">官方解决方案</a>： 1. 升级druid到1.1.21解决这个问题；2.保持mp版本3.1.0；3.紧跟mp版本，换掉druid数据源</strong></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git学习笔记</title>
      <link href="/2020/03/04/git-xue-xi-bi-ji/"/>
      <url>/2020/03/04/git-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h4 id="Git技巧总结"><a href="#Git技巧总结" class="headerlink" title="Git技巧总结"></a>Git技巧总结</h4><a id="more"></a><h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><h2 id="Git的诞生"><a href="#Git的诞生" class="headerlink" title="Git的诞生"></a>Git的诞生</h2><p>1991年，Linus创建了开源的Linux，由于多人参与代码编写，代码管理十分麻烦。最初是由Linus手工方式合并的。2005年，Linus使用C语言编写了一个分布式版本控制系统，就是Git。</p><p>2008年，GitHub网站上线，可以免费且开源的方式提供Git存储。众多项目开始迁移至GitHub。</p><h2 id="集中式和分布式"><a href="#集中式和分布式" class="headerlink" title="集中式和分布式"></a>集中式和分布式</h2><p>集中式版本控制系统：CVS、SVN</p><p>分布式版本控制系统：Git</p><p>区别：</p><ol><li>集中式版本控制系统：版本库存放在中央服务器，需要先从中央服务器获取最新版本的代码下载至本机，然后修改完成后再将代码推送至中央服务器。<strong>需要联网</strong>。</li><li>分布式版本控制系统：每个人的电脑上都有一个完整的版本库，在修改完成后只要将修改的内容推送到对方或者存储库（如GitHub）即可。</li></ol><p><strong>与集中式相比，分布式安全性能更高。而且还具有强大的分支管理功能。</strong></p><h1 id="Git的安装"><a href="#Git的安装" class="headerlink" title="Git的安装"></a>Git的安装</h1><h2 id="在Windows上"><a href="#在Windows上" class="headerlink" title="在Windows上"></a>在Windows上</h2><p>1、在官网下载安装程序：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">传送门</a></p><p>2、打开<strong>Git Bash</strong></p><p>3、配置本机Git参数</p><pre class=" language-shell"><code class="language-shell">$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"</code></pre><h2 id="在Linux上"><a href="#在Linux上" class="headerlink" title="在Linux上"></a>在Linux上</h2><p><a href="https://git-scm.com/download/linux" target="_blank" rel="noopener">官网教程</a></p><p><strong>Debian/Ubuntu</strong></p><p><code># apt-get install git</code></p><p><strong>CentOS</strong></p><p>一、使用yum安装</p><ol><li><p>安装git：<code>yum install git</code></p></li><li><p>查看yum源仓库Git信息：<code>yum info git</code></p></li><li><p>安装依赖库：</p><pre class=" language-shell"><code class="language-shell">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-develyum install gcc-c++ perl-ExtUtils-MakeMaker</code></pre></li></ol><p>二、通过源码构建，<a href="https://mirrors.edge.kernel.org/pub/software/scm/git/" target="_blank" rel="noopener">下载地址</a>。</p><p>查看版本信息：<strong>git –version</strong></p><h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>版本库，又名仓库，英文名为<strong>repository</strong>。是一个被Git管理起来的目录。</p><p>1、在Windows上进入<strong>Git Bash</strong>，在Linux中进入命令行</p><pre class=" language-she"><code class="language-she"># 创建名为test的目录$ mkdir test$ cd test#查看目录$ pwd/c/~~~/Desktop/test</code></pre><p>2、通过<code>git init</code>命令将其作为Git仓库</p><pre class=" language-she"><code class="language-she">$ git init</code></pre><p>文件夹中会出现一个<code>.git</code>文件夹目录，默认是隐藏的。</p><p>3、编写文件，first.txt</p><p>4、用命令<code>git add</code>告诉Git，把文件添加到仓库：</p><p>提交名为<code>first.txt</code>的文件</p><pre class=" language-shell"><code class="language-shell">$ git add first.txt</code></pre><p>提交所有文件：</p><pre class=" language-shell"><code class="language-shell">$ git add .</code></pre><p>5、用命令<code>git commit</code>告诉Git，把文件提交到仓库：</p><pre class=" language-shell"><code class="language-shell"># 双引号内为说明信息$ git commit -m "第一次提交"[master (root-commit) 9aa8dfe] 第一次提交 1 file changed, 1 insertion(+) create mode 100644 first.txt</code></pre><p>6、使用<code>git status</code>命令看看结果：</p><pre class=" language-shell"><code class="language-shell">$ git statusOn branch masternothing to commit, working tree clean</code></pre><h1 id="修改删除文件"><a href="#修改删除文件" class="headerlink" title="修改删除文件"></a>修改删除文件</h1><ol><li><p>修改first.txt文件</p></li><li><p>运行<code>git status</code>命令看看结果：</p><pre class=" language-shell"><code class="language-shell">$ git statusOn branch masterChanges not staged for commit:  (use "git add <file>..." to update what will be committed)  (use "git restore <file>..." to discard changes in working directory)        modified:   first.txt</code></pre><p>提示first.txt文件已经被修改过了，使用<code>git add</code>添加到仓库或者使用<code>git restore</code>命令取消修改</p></li><li><p>使用 git diff命令查看修改信息记录：</p><pre class=" language-shell"><code class="language-shell">$ git diffdiff --git a/first.txt b/first.txtindex ba9c1ad..84fc394 100644--- a/first.txt+++ b/first.txt@@ -1 +1,2 @@ nihao+你好</code></pre></li><li><p>使用 <code>git restore</code>命令取消修改：</p><pre class=" language-shell"><code class="language-shell">$ git restore first.txt</code></pre><p>使用<code>git status</code>命令看看结果：</p><pre class=" language-shell"><code class="language-shell">$ git statusOn branch masternothing to commit, working tree clean</code></pre></li></ol><h1 id="版本修改"><a href="#版本修改" class="headerlink" title="版本修改"></a>版本修改</h1><ol><li><p>使用<code>git log</code>命令查看提交历史记录</p><pre class=" language-shell"><code class="language-shell">$ git logcommit 925cdee529fb05cbdf3ae1b65e0d3199be173a2a (HEAD -> master)Author: 用户名和邮箱Date:   日期    第二次提交commit 9aa8dfe6369f514a3b73f58be89ed048de4bed1fAuthor: 用户名和邮箱Date:   日期    第一次提交</code></pre><p>其中，HEAD标识当前版本。上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，以此类推。也可以写成<code>HEAD~150</code>标识150个版本以前。</p><p>可以根据日期查看提交的先后顺序。</p></li><li><p>使用<code>git reset</code>命令回退到上一个版本</p><pre class=" language-shell"><code class="language-shell">$ git reset --hard HEAD^HEAD is now at 9aa8dfe 第一次提交</code></pre><p>当前first.txt内容已经改变。</p></li><li><p>再使用<code>git log</code>查看日志：</p><pre class=" language-shell"><code class="language-shell">$ git logcommit 9aa8dfe6369f514a3b73f58be89ed048de4bed1f (HEAD -> master)Author: Lemenk <Lemenk@163.com>Date:   Wed Mar 4 11:10:18 2020 +0800    第一次提交</code></pre></li><li><p>如果想要回退到上次版本，可以根据版本号回退</p><pre class=" language-shell"><code class="language-shell"># 其中925cd为版本号前几位，并不用写全。git会自动查找。$ git reset --hard 925cdHEAD is now at 925cdee 第二次提交</code></pre></li><li><p>使用git reflog命令查看此前的每一次命令：</p><pre class=" language-shell"><code class="language-shell">$ git reflog925cdee (HEAD -> master) HEAD@{0}: reset: moving to 925cd9aa8dfe HEAD@{1}: reset: moving to HEAD^925cdee (HEAD -> master) HEAD@{2}: commit: 第二次提交9aa8dfe HEAD@{3}: commit (initial): 第一次提交</code></pre></li></ol><p><strong>总结</strong>：Git中可以随时查看版本信息，并且可以通过命令进行回退操作。</p><p>Git管理的文件分为：工作区，版本库。</p><p>版本库又分为暂存区stage和暂存区分支master(仓库)</p><p>工作区—–&gt;&gt;暂存区—–&gt;&gt;仓库</p><p>git add把文件从工作区—–&gt;&gt;暂存区，<code>git commit</code>把文件从暂存区—–&gt;&gt;仓库，</p><p><code>git diff</code>查看工作区和暂存区差异，</p><p><code>git diff --cached</code>查看暂存区和仓库差异，</p><p><code>git diff HEAD</code> 查看工作区和仓库的差异，</p><p>git add的反向命令<code>git checkout</code>或者<code>git restore</code>，撤销工作区修改，即把暂存区最新版本转移到工作区，</p><p><code>git commit</code>的反向命令<code>git reset HEAD</code>或者<code>git restore --staged</code>，就是把仓库最新版本转移到暂存区。</p><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>使用GitHub或者Gitee创建远程仓库。</p><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以需要设置SSH Key。</p><ol><li><p>创建SSH Key</p><pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -C "你的GitHub注册邮箱"</code></pre></li><li><p>在用户目录下可以看到.ssh文件夹。<code>id_rsa</code>是私钥，不能泄露出去，<code>id_rsa.pub</code>是公钥，可以放心地告诉任何人。</p></li><li><p>将<code>id_rsa.pub</code>内容全部复制，打开GitHub，“Account settings”，“SSH Keys”页面，填写随意的title，粘贴<code>id_rsa.pub</code>内容即可。</p></li><li><p>GitHub允许添加多个Key，只要将key添加到GitHub即可。</p></li></ol><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><ol><li><p>创建一个新的仓库，Repository name最好与本地仓库名称一致。</p></li><li><p>在本地仓库运行命令：关联远程仓库</p><pre class=" language-shell"><code class="language-shell"># 账户名处应为GitHub的用户名# origin为远程库的名字。可以更改，但建议使用该名称。# git部分参数也可以使用github上仓库的url地址$ git remote add origin git@github.com:Lemenk/test.git</code></pre></li><li><p>用<code>git pull</code>命令合并两个仓库</p><pre class=" language-shell"><code class="language-shell"># --allo……为参数$git pull origin master --allow-unrelated-histories</code></pre></li><li><p>用<code>git push</code>命令，把当前分支<code>master</code>推送到远程。</p><pre class=" language-shell"><code class="language-shell"># $ git push <远程主机名> <本地分支名>:<远程分支名>$git push origin master:master</code></pre></li></ol><h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><pre class=" language-shell"><code class="language-shell"># url例如：https://github.com/Lemenk/test.git$ git clone 仓库url</code></pre><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><p>在Git中，master为主分支，即master分支。</p><h2 id="创建合并删除分支"><a href="#创建合并删除分支" class="headerlink" title="创建合并删除分支"></a>创建合并删除分支</h2><ol><li><p>创建dev分支，并切换到dev分支。</p><pre class=" language-shell"><code class="language-shell">$ git switch -c devSwitched to a new branch 'dev'</code></pre><p><code>git switch</code>命令加上<code>-c</code>参数表示创建并切换，相当于以下两条命令：</p><pre class=" language-shell"><code class="language-shell">$ git branch dev$ git switch devSwitched to branch 'dev'</code></pre></li><li><p>用<code>git branch</code>命令查看当前分支：</p><pre class=" language-shell"><code class="language-shell">$ git branch* dev  master</code></pre><p>在当前分支前会标上<code>*</code>号。</p></li><li><p>在dev分支上对文件进行修改，比如修改first.txt。</p></li><li><p>提交：</p><pre class=" language-shell"><code class="language-shell">$ git commit -m "new branch"[dev 324481f] new branch 2 files changed, 3 insertions(+)</code></pre></li><li><p>切换到master分支：</p><pre class=" language-shell"><code class="language-shell">$ git switch masterSwitched to branch 'master'</code></pre></li><li><p>此时查看文件时并没有修改的信息。，表明刚才的提交是在dev分支。</p></li><li><p>合并分支<code>git merge</code></p><pre class=" language-shell"><code class="language-shell">$ git merge devUpdating 8471d6f..324481fFast-forward README.md | 2 ++ first.txt | 1 + 2 files changed, 3 insertions(+)</code></pre><p><code>git merge</code>命令用于合并指定分支到当前分支。</p></li><li><p>删除分支</p><pre class=" language-shell"><code class="language-shell">$ git branch -d devDeleted branch dev (was 324481f).</code></pre></li><li><p>查看分支：</p><pre class=" language-shell"><code class="language-shell">$ git branch* master</code></pre></li></ol><h2 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h2><p>在创建dev分支后，修改文件并提交。然后切换到master主分支修改文件后提交会自动进入vi页面。</p><p>此时需要填写合并信息。</p><pre class=" language-shell"><code class="language-shell">$ git merge devMerge made by the 'recursive' strategy. first.txt | 3 ++- 1 file changed, 2 insertions(+), 1 deletion(-)</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记</title>
      <link href="/2020/02/26/springboot-xue-xi-bi-ji/"/>
      <url>/2020/02/26/springboot-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBoot学习笔记"><a href="#SpringBoot学习笔记" class="headerlink" title="SpringBoot学习笔记"></a>SpringBoot学习笔记</h3><a id="more"></a><h1 id="一、Spring-Boot基础"><a href="#一、Spring-Boot基础" class="headerlink" title="一、Spring Boot基础"></a>一、Spring Boot基础</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><p>简化Spring应用开发的一个框架；</p><p>整个Spring技术栈的一个大整合；</p><p>J2EE开发的一站式解决方案；</p><h2 id="2、入门案例HelloWorld"><a href="#2、入门案例HelloWorld" class="headerlink" title="2、入门案例HelloWorld"></a>2、入门案例HelloWorld</h2><p>实现功能：浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><h3 id="1、步骤"><a href="#1、步骤" class="headerlink" title="1、步骤"></a>1、步骤</h3><ol><li><p>创建maven普通jar工程，导入spring boot依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5.9.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre></li><li><p>编写主程序，用来启动spring boot</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @SpringBootApplication :该注解标注一个主程序类，说明这是一个spring boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorldMainApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将Spring boot程序启动起来</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>HelloWorldMainApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>编写相关controller、service相关类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello World"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>运行及部署</p><ul><li><p>运行：直接执行主程序</p></li><li><p>部署：使用maven插件，将应用打包成可执行的jar包，直接使用<strong>java -jar</strong>命令执行。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre></li></ul></li></ol><h3 id="2、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#2、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="2、使用Spring Initializer快速创建Spring Boot项目"></a>2、使用Spring Initializer快速创建Spring Boot项目</h3><p>使用Spring Initializer会联网创建一个Spring Boot项目。</p><ul><li>主程序自动生成，只用编写业务逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @RestController 注解是@ResponseBody和@Controller结合 */</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello world quick"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、配置文件"><a href="#3、配置文件" class="headerlink" title="3、配置文件"></a>3、配置文件</h3><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><ul><li>application.properties</li><li>application.yml</li></ul><p>配置文件的<strong>作用</strong>：修改SpringBoot自动配置的默认值；</p><h4 id="1、YAML"><a href="#1、YAML" class="headerlink" title="1、YAML"></a>1、YAML</h4><p>YAML（YAML Ain’t Markup Language）</p><p><em>YAML<em>是”YAML Ain’t a Markup Language”（YAML不是一种标记语言的递归缩写。在开发的这种语言时，</em>YAML</em> 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言），但为了强调这种语言<strong>以数据做为中心</strong>，而不是以标记语言为重点，而用<strong>反向缩略语重命名</strong>。</p><p>与XML语言对比：</p><pre class=" language-YAml"><code class="language-YAml">#YAML方式server:  port: 8090</code></pre><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--XML方式--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>8090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>port</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span></code></pre><h4 id="2、YAML语法"><a href="#2、YAML语法" class="headerlink" title="2、YAML语法"></a>2、YAML语法</h4><h5 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h5><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8090</span>    <span class="token key atrule">path</span><span class="token punctuation">:</span> /hello</code></pre><p>属性和值也是大小写敏感；</p><h5 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h5><p>2.1、<strong>普通值</strong>（数字，字符串，布尔）</p><p>k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                例子：name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                例子：name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><p>2.2、<strong>对象、Map</strong>（属性和值）（键值对）：</p><p>k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span>        <span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan        <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">20</span></code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><p>2.3、<strong>数组</strong>（List、Set）：</p><p>用- 值表示数组中的一个元素</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> cat <span class="token punctuation">-</span> dog <span class="token punctuation">-</span> pig</code></pre><p>行内写法:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><h4 id="3、配置文件注入"><a href="#3、配置文件注入" class="headerlink" title="3、配置文件注入"></a>3、配置文件注入</h4><p>3.1、编写配置文件：application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>  <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">birthday</span><span class="token punctuation">:</span> 2012/05/23  <span class="token key atrule">map</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span> <span class="token key atrule">k2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>  <span class="token key atrule">list</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> lisi    <span class="token punctuation">-</span> zhaoliu  <span class="token key atrule">dog</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> 狗子    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span></code></pre><p>3.2、在javaBean中使用注解注入：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 将配置文件中配置的属性值映射到该组件中 * @ConfigurationProperties ：该注解将本类中所有属性与配置文件中属性绑定 * prefix = "person"：与配置文件中的进行绑定 * @Component ：把普通pojo实例化到spring容器中 */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//省略</span><span class="token punctuation">}</span></code></pre><p>3.3、添加pom坐标，配置文件处理器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3.4、测试类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4、相关注解"><a href="#4、相关注解" class="headerlink" title="4、相关注解"></a>4、相关注解</h4><ol><li><p><strong>@ConfigurationProperties</strong>：该注解将本类中所有属性与配置文件中属性绑定。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span></code></pre><p><code>prefix = "person"</code>：与配置文件中的进行绑定</p></li><li><p>@<strong>PropertySource</strong>：加载指定的配置文件。</p><p><code>@PropertySource(value = {"classpath:person.properties"})</code></p><p>person.properties为指定的文件</p></li><li><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别。@<strong>ImportResource</strong>需要标注在一个配置类上。</p><pre class=" language-xml"><code class="language-xml">@ImportResource(locations = {"classpath:beans.xml"})导入Spring的配置文件让其生效</code></pre><p>xml配置文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>helloService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.lemenk.springboot.service.HelloService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token comment" spellcheck="true">//指明当前类是配置类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplicationConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将方法的返回值添加到容器中，容器中这些组件的默认的id就是方法名</span>    <span class="token annotation punctuation">@Bean</span><span class="token comment" spellcheck="true">//给容器中添加组件</span>    <span class="token keyword">public</span> HelloService <span class="token function">helloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"配置类@Bean给容器中添加组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="5、profile"><a href="#5、profile" class="headerlink" title="5、profile"></a>5、profile</h4><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><ol><li><p>yml文件方式</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> prod<span class="token punctuation">---</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev</code></pre></li></ol><hr><p>   server:<br>     port: 8084<br>   spring:<br>     profiles: prod  #指定属于哪个环境</p><pre><code>2. 其他方式   在配置文件中指定  spring.profiles.active={profile}# 二、日志## 1、常见日志常见日志种类：JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j....**SpringBoot选用 SLF4j和logback；**## 2、SLF4j使用# 三、Web开发|      | 普通CRUD（uri来区分操作） | RestfulCRUD       || ---- | ------------------------- | ----------------- || 查询 | getEmp                    | emp---GET         || 添加 | addEmp?xxx                | emp---POST        || 修改 | updateEmp?id=xxx&amp;xxx=xx   | emp/{id}---PUT    || 删除 | deleteEmp?id=1            | emp/{id}---DELETE |# 四、SpringBoot与数据访问## 1、JDBC数据访问1、pom文件依赖~~~xml&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;    &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;</code></pre><p>2、配置文件：application.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//39.96.42.61<span class="token punctuation">:</span>3307/springboot    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span></code></pre><p>3、测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>DataSource dataSource<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、结果：</p><pre class=" language-java"><code class="language-java">Spring Boot2之后默认数据源为：    <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span>HikariDataSource</span>    可以在配置文件中配置HikariProxyConnection<span class="token annotation punctuation">@1195909598</span> wrapping com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ConnectionImpl<span class="token annotation punctuation">@3d64c581</span></code></pre><p>5、运行建表语句：</p><pre class=" language-yaml"><code class="language-yaml">schema<span class="token punctuation">-</span>*.sql、data<span class="token punctuation">-</span>*.sql默认规则，将sql文件命名为：schema.sql，schema<span class="token punctuation">-</span>all.sql；默认在resources目录下寻找也可以在配置文件中指定位置：<span class="token key atrule">schema</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>department.sql***：在运行完建表语句后需要将改文件删除，否则会在下次重启服务器是覆盖掉该表</code></pre><p>6、自动配置了JdbcTemplate</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplateController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * from department"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="2、整合Mybatis"><a href="#2、整合Mybatis" class="headerlink" title="2、整合Mybatis"></a>2、整合Mybatis</h2><p>1、pom文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--mybatis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--导入druid--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、配置druid</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#配置jdbc数据连接</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#基本配置</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//数据库地址    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">initialization-mode</span><span class="token punctuation">:</span> always    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource    <span class="token comment" spellcheck="true">#其他配置</span>    <span class="token key atrule">druid</span><span class="token punctuation">:</span>      <span class="token key atrule">initial-size</span><span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">100</span>      <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">5</span>      <span class="token key atrule">max-wait</span><span class="token punctuation">:</span> <span class="token number">60000</span>      <span class="token key atrule">pool-prepared-statements</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">max-pool-prepared-statement-per-connection-size</span><span class="token punctuation">:</span> <span class="token number">20</span>      <span class="token key atrule">validation-query</span><span class="token punctuation">:</span> SELECT 1 FROM DUAL      <span class="token key atrule">validation-query-timeout</span><span class="token punctuation">:</span> <span class="token number">60000</span>      <span class="token key atrule">test-on-borrow</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">test-on-return</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">test-while-idle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">time-between-eviction-runs-millis</span><span class="token punctuation">:</span> <span class="token number">60000</span>      <span class="token key atrule">min-evictable-idle-time-millis</span><span class="token punctuation">:</span> <span class="token number">100000</span>      <span class="token comment" spellcheck="true">#监控配置#</span>      <span class="token comment" spellcheck="true"># WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter</span>      <span class="token key atrule">web-stat-filter.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">web-stat-filter.url-pattern</span><span class="token punctuation">:</span> /*      <span class="token key atrule">web-stat-filter.exclusions</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>.js<span class="token punctuation">,</span>.gif<span class="token punctuation">,</span>.jpg<span class="token punctuation">,</span>.png<span class="token punctuation">,</span>.css<span class="token punctuation">,</span>.sql<span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置</span>      <span class="token key atrule">stat-view-servlet.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment" spellcheck="true">#配置url打开，此时为http://localhost:8080/druid</span>      <span class="token key atrule">stat-view-servlet.url-pattern</span><span class="token punctuation">:</span> /druid/*      <span class="token key atrule">stat-view-servlet.reset-enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token comment" spellcheck="true">#配置登陆用户名和密码</span>      <span class="token key atrule">stat-view-servlet.login-username</span><span class="token punctuation">:</span> admin      <span class="token key atrule">stat-view-servlet.login-password</span><span class="token punctuation">:</span> admin      <span class="token comment" spellcheck="true"># 配置StatFilter</span>      <span class="token key atrule">filter</span><span class="token punctuation">:</span>        <span class="token key atrule">stat</span><span class="token punctuation">:</span>          <span class="token key atrule">db-type</span><span class="token punctuation">:</span> mysql          <span class="token key atrule">log-slow-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">slow-sql-millis</span><span class="token punctuation">:</span> <span class="token number">5000</span>        <span class="token comment" spellcheck="true"># 配置WallFilter</span>        <span class="token key atrule">wall</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>          <span class="token key atrule">db-type</span><span class="token punctuation">:</span> mysql          <span class="token comment" spellcheck="true">#学习阶段需要开启</span>          <span class="token key atrule">config</span><span class="token punctuation">:</span>            <span class="token key atrule">delete-allow</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>            <span class="token key atrule">drop-table-allow</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>3、创建javaBean</p><p>4、mybatis对数据的CURD操作</p><ol><li><p>注解：</p><ul><li><p>controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    DepartmentMapper departmentMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Department <span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> departmentMapper<span class="token punctuation">.</span><span class="token function">getDeptById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/dept"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Department <span class="token function">insertDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">{</span>        departmentMapper<span class="token punctuation">.</span><span class="token function">insertDept</span><span class="token punctuation">(</span>department<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> department<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>Mapper</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentMapper</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Department <span class="token function">getDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from department where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteDeptById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//自动生成递增主键，并指明是id属性</span>    <span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>keyProperty <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into department(departmentName) value(#{departmentName})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update department set departmentName=#{departmentName} where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateDept</span><span class="token punctuation">(</span>Department department<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><ol start="2"><li><p>配置文件：</p><ul><li><p>全局配置文件：mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置驼峰式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>Mapper</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeMapper</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmpById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertEmp</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol><ul><li><p>具体类配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.lemenk.data_mybatis.mapper.EmployeeMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getEmpById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.lemenk.data_mybatis.bean.Employee<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        SELECT * FROM employee WHERE id=#{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>insertEmp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        INSERT INTO employee(lastName,email,gender,d_id) VALUES (#{lastName},#{email},#{gender},#{dId})    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li><li><p>主配置文件需要配置mybatis配置文件路径：</p><pre class=" language-yml"><code class="language-yml">mybatis:  config-location: classpath:mybatis/mybatis-config.xml  mapper-locations: classpath:mybatis/mapper/*.xml</code></pre></li><li><p>web类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmpController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    EmployeeMapper employeeMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/emp/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmp</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">getEmpById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h2 id="3、整合SpringData-JPA"><a href="#3、整合SpringData-JPA" class="headerlink" title="3、整合SpringData JPA"></a>3、整合SpringData JPA</h2><p>1、导入pom依赖文件</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2、编写实体类bean，并用注解和数据表进行映射，配置好映射关系</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用JPA注解配置映射关系</span><span class="token annotation punctuation">@Entity</span><span class="token comment" spellcheck="true">//告诉JPA这是一个实体类，与数据表映射</span><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"tbl_user"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//注定与之对应的数据表名，默认表名为类名小写</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span><span class="token comment" spellcheck="true">//标识主键</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> GenerationType<span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//自增主键</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span>length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//与数据表一个列对应</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Column</span><span class="token comment" spellcheck="true">//若省略则默认数据表类名为属性名</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>3、编写Dao接口来操作实体类对应的数据表（Respository）</p><pre class=" language-java"><code class="language-java"><span class="token operator">/</span>继承JpaRepository来完成对数据库的操作<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token operator">&lt;</span>User<span class="token punctuation">,</span>Integer<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>4、在配置文件中进行基本配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#JAP配置</span>  <span class="token key atrule">jpa</span><span class="token punctuation">:</span>    <span class="token key atrule">hibernate</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#更新或者创建数据表结构</span>      <span class="token key atrule">ddl-auto</span><span class="token punctuation">:</span> update    <span class="token comment" spellcheck="true">#在控制台显示SQL</span>    <span class="token key atrule">show-sql</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre><p>5、Controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    UserRepository userRepository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">insertUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        User save <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> save<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4、整合Redis"><a href="#4、整合Redis" class="headerlink" title="4、整合Redis"></a>4、整合Redis</h2><ol><li><p>安装Redis</p><p>在linux的docker中加入Redis容器，并启动</p></li><li><p>在pom文件加入依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--集成redis--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>在主配置文件中配置redis属性</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#配置redis</span>  <span class="token key atrule">redis</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> 39.96.42.61</code></pre></li><li><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//导入Redis模板</span><span class="token annotation punctuation">@Autowired</span>StringRedisTemplate stringRedisTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span>RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 测试redis的数据类型     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//给key为msg的值追加hello。</span>              stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379>get msg"hello"</code></pre></li></ol><h1 id="五、SpringBoot整合Swagger"><a href="#五、SpringBoot整合Swagger" class="headerlink" title="五、SpringBoot整合Swagger"></a>五、SpringBoot整合Swagger</h1><h2 id="1、Swagger简介"><a href="#1、Swagger简介" class="headerlink" title="1、Swagger简介"></a>1、Swagger简介</h2><p><a href="https://swagger.io/" target="_blank" rel="noopener">swagger官网</a></p><ul><li>号称最流行的API框架</li><li>RestFul API文档在线自动生成，<strong>同步更新</strong></li><li>直接运行，可在线测试</li><li>支持多种语言</li></ul><h2 id="2、在SpringBoot中集成Swagger"><a href="#2、在SpringBoot中集成Swagger" class="headerlink" title="2、在SpringBoot中集成Swagger"></a>2、在SpringBoot中集成Swagger</h2><p>1、创建spring-web工程</p><p>2、导入swagger相关依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入swagger2依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--swagger-ui依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>3、编写一个hello工程</p><p>4、集成Swagger</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token comment" spellcheck="true">//声明配置类</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">//开启Swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>5、访问测试：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></p><h2 id="3、配置Swagger"><a href="#3、配置Swagger" class="headerlink" title="3、配置Swagger"></a>3、配置Swagger</h2><h3 id="1、示例：修改APIinfo信息"><a href="#1、示例：修改APIinfo信息" class="headerlink" title="1、示例：修改APIinfo信息"></a>1、示例：修改APIinfo信息</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//配置Swagger信息：apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//作者信息</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"Lemenk"</span><span class="token punctuation">,</span> <span class="token string">"https://www.lemenk.top"</span><span class="token punctuation">,</span> <span class="token string">"Lemenk@163.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"Lemenk的SwaggerAPI文档"</span><span class="token punctuation">,</span>                <span class="token string">"这是第一个swaggerAPI示例"</span><span class="token punctuation">,</span>                <span class="token string">"v1.0"</span><span class="token punctuation">,</span>                <span class="token string">"https://www.lemenk.top"</span><span class="token punctuation">,</span>                contact<span class="token punctuation">,</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、配置扫描接口"><a href="#2、配置扫描接口" class="headerlink" title="2、配置扫描接口"></a>2、配置扫描接口</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">//配置Swagger的Docket的bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">/**                 * RequestHandlerSelectors:配置要扫描接口的方式                 *      basePackage：指定要扫描的包                 *      any()：扫描全部                 *      none()：全部不扫描                 *      withClassAnnotation：扫描类上的注解                 *      withMethodAnnotation：扫描方法上的注解                 */</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"top.lemenk.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//.apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</span>                <span class="token comment" spellcheck="true">//.apis(RequestHandlerSelectors.withMethodAnnotation(GetMapping.class))</span>                <span class="token comment" spellcheck="true">/**                 * 过滤路径                 */</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/abc/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、配置是否启动Swagger"><a href="#3、配置是否启动Swagger" class="headerlink" title="3、配置是否启动Swagger"></a>3、配置是否启动Swagger</h3><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//是否启动Swagger，ture为启动</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p><strong>问：如何根据当前开发环境判断是否开启Swagger？</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置Swagger的Docket的bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//设置要显示的Swagger环境</span>        Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span><span class="token string">"prod"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过environment.acceptsProfiles判断是否处在自己设定的环境当中</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//传入flage参数，使其根据环境判断是否开启</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre><p>需要在配置文件中配置当前开发环境，注：测试时需要同步修改端口</p><h3 id="4、配置API文档分组"><a href="#4、配置API文档分组" class="headerlink" title="4、配置API文档分组"></a>4、配置API文档分组</h3><p>创建多个分组，只需要创建多个Docket即可。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置多个分组，只需要创建多个Docket即可</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"Lemenk"</span><span class="token punctuation">)</span></code></pre><h3 id="5、注解"><a href="#5、注解" class="headerlink" title="5、注解"></a>5、注解</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis学习笔记</title>
      <link href="/2020/02/25/mybatis-xue-xi-bi-ji/"/>
      <url>/2020/02/25/mybatis-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>SSM框架之Mybatis学习笔记</strong></p><a id="more"></a><h2 id="一、-Mybatis基础"><a href="#一、-Mybatis基础" class="headerlink" title="一、 Mybatis基础"></a>一、 Mybatis基础</h2><h3 id="1-Mybatis概述"><a href="#1-Mybatis概述" class="headerlink" title="1.Mybatis概述"></a>1.Mybatis概述</h3><p>Mybatis本是apache的一个开源项目iBatis，后来改名为Mybais，并迁移到Github。是一个基于Java的<strong>持久层框架</strong>。</p><p>它的内部封装了JDBC，使开发者只需关注sql语句本身，而不需要花费更多时间去处理加载驱动、创建连接等过程。</p><p>mybatis使用xml或者注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql 的动态参数进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射为 java 对象并 返回。</p><h3 id="2-jdbc编程的问题分析"><a href="#2-jdbc编程的问题分析" class="headerlink" title="2.jdbc编程的问题分析"></a>2.jdbc编程的问题分析</h3><ol><li>数据库链接创建、释放频繁造成系统资源浪费从而<strong>影响系统性能</strong>，如果使用数据库链接池可解决此问题。</li><li>Sql 语句在代码中硬编码，造成<strong>代码不易维护</strong>，实际应用 sql 变化的可能较大，sql 变动需要改变 java代码。</li><li>使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where 条件不一定，可能多也可能少，修改 sql 还要修改代码，系统不易维护。</li><li>对结果集解析存在硬编码（查询列名），sql 变化导致解析代码变化，<strong>系统不易维护</strong>，如果能将数据库记录封装成 pojo 对象解析比较方便。</li></ol><h2 id="二、-Mybatis框架入门"><a href="#二、-Mybatis框架入门" class="headerlink" title="二、 Mybatis框架入门"></a>二、 Mybatis框架入门</h2><h3 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1.环境搭建"></a>1.环境搭建</h3><ol><li><p>创建maven工程并导入相关坐标</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>x.x.x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建实体类和dao的接口</p></li><li><p>创建Mybatis的<strong>主配置文件</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置环境--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--配置mysql的环境--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--配置事务的类型--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--配置数据源(连接池)--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--配置连接数据库的四个基本信息--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>utf8&amp;amp;serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--指定映射配置文件的位置            映射配置文件：每个dao独立的配置文件        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top/lemenk/dao/***.xml<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建映射配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--namespace值为Dao接口的全限定类名--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.lemenk.dao.IUserDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置查询所有，注意resultType用于指定封装的实体类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top.lemenk.domain.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        //sql语句        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="2-环境搭建的注意事项："><a href="#2-环境搭建的注意事项：" class="headerlink" title="2.环境搭建的注意事项："></a>2.环境搭建的注意事项：</h3><ol><li>mybatis的映射配置文件位置必须和dao接口的包结构相同</li><li>映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</li><li>映射配置文件的操作配置（select），id属性的取值必须是dao接口的方法名</li></ol><h3 id="3-测试入门案例"><a href="#3-测试入门案例" class="headerlink" title="3.测试入门案例"></a>3.测试入门案例</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1.读取配置文件(从类路径加载配置文件)</span>    InputStream in <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"SqlMapConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2.创建SqlSessionFactory工厂</span>    SqlSessionFactoryBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    SqlSessionFactory factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//3.使用工厂生产SqlSession对象</span>    SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//4.使用SqlSession创建Dao接口的代理对象</span>    IUserDao userDao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>IUserDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//5.使用代理对象执行方法</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>User user <span class="token operator">:</span> users<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//6.释放资源</span>    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>为什么要使用Dao接口的代理对象来实现功能呢？</p><p>因为在开发中，如果自己写Dao接口的实现类，就需要自己写相关的实现方法。</p><p>UserImpl：</p><pre class=" language-java"><code class="language-java">SqlSessionFactory factory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建有参数的构造函数，用于传入参数</span><span class="token keyword">public</span> <span class="token function">UserDaoImpl</span><span class="token punctuation">(</span>SqlSessionFactory factory<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用工厂创建SqlSession对象</span>    SqlSession session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*    *使用session执行查询所有方法    *    其中selectList方法为SqlSession中的方法，用于查询所有    *    参数为改sql语句的位置。    */</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"top.lemenk.dao.IUserDao.findAll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> users<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用代理工厂可以减少代码量。</p><h2 id="三、Mybatis-连接池与事务深入"><a href="#三、Mybatis-连接池与事务深入" class="headerlink" title="三、Mybatis 连接池与事务深入"></a>三、Mybatis 连接池与事务深入</h2><h3 id="1-Mybatis-的连接池技术"><a href="#1-Mybatis-的连接池技术" class="headerlink" title="1.Mybatis 的连接池技术"></a>1.Mybatis 的连接池技术</h3><p>在 Mybatis的 SqlMapConfig.xml配置文件中，通过<datasource type="pooled">来实现Mybatis中连接池的配置。</datasource></p><h4 id="1-1-Mybatis-连接池的分类"><a href="#1-1-Mybatis-连接池的分类" class="headerlink" title="1.1 Mybatis 连接池的分类"></a>1.1 Mybatis 连接池的分类</h4><p>UNPOOLED    不使用连接池的数据源</p><p>POOLED         使用连接池的数据源</p><p>JNDI                使用JNDI实现的数据源</p><p>相应地，MyBatis 内部分别定义了实现了 java.sql.DataSource 接口的 UnpooledDataSource， PooledDataSource 类来表示UNPOOLED、POOLED 类型的数据源。</p><h4 id="1-2-Mybatis-中数据源的配置"><a href="#1-2-Mybatis-中数据源的配置" class="headerlink" title="1.2 Mybatis 中数据源的配置"></a>1.2 Mybatis 中数据源的配置</h4><p>在 SqlMapConfig.xml 文件中:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span></code></pre><p>type=”POOLED”：MyBatis 会创建 PooledDataSource 实例 type=”UNPOOLED” ： MyBatis 会创建 UnpooledDataSource 实例 type=”JNDI”：MyBatis会从JNDI服务上查找DataSource 实例，然后返回使用</p><h3 id="2-Mybatis-的事务控制"><a href="#2-Mybatis-的事务控制" class="headerlink" title="2.Mybatis 的事务控制"></a>2.Mybatis 的事务控制</h3><h4 id="2-1-JDBC事务提交方式"><a href="#2-1-JDBC事务提交方式" class="headerlink" title="2.1 JDBC事务提交方式"></a>2.1 JDBC事务提交方式</h4><p>在 JDBC中我们可以通过手动方式将事务的提交改为手动方式，通过 setAutoCommit()方法就可以调整。</p><h4 id="2-2-Mybatis-中事务提交方式"><a href="#2-2-Mybatis-中事务提交方式" class="headerlink" title="2.2 Mybatis 中事务提交方式"></a>2.2 Mybatis 中事务提交方式</h4><p>Mybatis 中事务的提交方式，本质上就是调用 JDBC 的setAutoCommit()来实现事务控制。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSM框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="/2020/02/14/springmvc-xue-xi-bi-ji/"/>
      <url>/2020/02/14/springmvc-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>SSM框架之SpringMVC学习笔记</strong></p><a id="more"></a><h1 id="第一章-SpringMVC的基础"><a href="#第一章-SpringMVC的基础" class="headerlink" title="第一章 SpringMVC的基础"></a>第一章 SpringMVC的基础</h1><h2 id="1-1三层架构和MVC"><a href="#1-1三层架构和MVC" class="headerlink" title="1.1三层架构和MVC"></a>1.1三层架构和MVC</h2><h3 id="1-1-1三层架构"><a href="#1-1-1三层架构" class="headerlink" title="1.1.1三层架构"></a>1.1.1三层架构</h3><p>开发架构一般基于两种形式，一种是<strong>C/S</strong>架构，也就是<strong>客户端/服务器</strong>；另一种是<strong>B/S</strong>架构，也就是<strong>浏览器服务器</strong>。在JavaEE开发中，几乎全都是基于B/S架构的开发。</p><p>在B/S架构中，系统标准的三层架构包括：<strong>表现层</strong>、<strong>业务层</strong>、<strong>持久层</strong>。</p><p><strong>表现层</strong>：也就是我们常说的web层。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求 web 层，web 需要接收 http 请求，完成 http 响应。<br>        表现层包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。 表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。 表现层的设计一般都使用 MVC 模型。（MVC 是表现层的设计模型，和其他层没有关系）</p><p><strong>业务层</strong>： 也就是我们常说的 service 层。它负责业务逻辑处理，和我们开发项目的需求息息相关。web 层依赖业 务层，但是业务层不依赖 web 层。 业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的，事务应该放到业务层来控制） </p><p><strong>持久层</strong>：也就是我们是常说的 dao 层。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库 中。通俗的讲，持久层就是和数据库交互，对数据库表进行曾删改查的。</p><h3 id="1-1-2-MVC模型"><a href="#1-1-2-MVC模型" class="headerlink" title="1.1.2 MVC模型"></a>1.1.2 MVC模型</h3><p><strong>MVC</strong> 全名是 Model View Controller，是<strong>模型(model)</strong>－<strong>视图(view)</strong>－<strong>控制器(controller)</strong>的缩写，是一种用于设计创建 Web 应用程序表现层的模式。MVC 中每个部分各司其职： </p><p><strong>Model（模型）</strong>：通常指的就是我们的数据模型。作用一般情况下用于封装数据。 </p><p><strong>View（视图）</strong>：通常指的就是我们的 jsp 或者 html。作用一般就是展示数据的。 通常视图是依据模型数据创建的。</p><h2 id="1-2-SpringMVC概述"><a href="#1-2-SpringMVC概述" class="headerlink" title="1.2 SpringMVC概述"></a>1.2 SpringMVC概述</h2><h3 id="1-2-1-什么是SpringMVC？"><a href="#1-2-1-什么是SpringMVC？" class="headerlink" title="1.2.1 什么是SpringMVC？"></a>1.2.1 什么是SpringMVC？</h3><p>SpringMVC 是一种基于 Java 的<strong>实现 MVC 设计模型</strong>的<strong>请求驱动类型</strong>的<strong>轻量级 Web 框架</strong>，属于 Spring FrameWork 的后续产品，已经融合在 Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功 能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用Spring进行WEB开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他 MVC 开发框架。</p><h3 id="1-2-2-SpringMVC的优势"><a href="#1-2-2-SpringMVC的优势" class="headerlink" title="1.2.2 SpringMVC的优势"></a>1.2.2 SpringMVC的优势</h3><p>1、清晰的角色划分： </p><p>​            前端控制器（DispatcherServlet） </p><p>​            请求到处理器映射（HandlerMapping） </p><p>​            处理器适配器（HandlerAdapter） </p><p>​            视图解析器（ViewResolver） </p><p>​            处理器或页面控制器（Controller） </p><p>​            验证器（ Validator） </p><p>​            命令对象（Command 请求参数绑定到的对象就叫命令对象）</p><p>​            表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</p><p>2、分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。</p><p>3、由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。 </p><p>4、和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。 </p><p>5、可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</p><p> 6、可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。</p><p>7、功能强大的数据验证、格式化、绑定机制。 </p><p>8、利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</p><p>9、本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</p><p>10、强大的 JSP 标签库，使 JSP 编写更容易。 </p><p>………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。</p><h3 id="1-2-3-SpringMVC和-Struts2-的优略分析"><a href="#1-2-3-SpringMVC和-Struts2-的优略分析" class="headerlink" title="1.2.3 SpringMVC和 Struts2 的优略分析"></a>1.2.3 SpringMVC和 Struts2 的优略分析</h3><p>共同点：<br>            它们都是表现层框架，都是基于 MVC 模型编写的。 它们的底层都离不开原始 ServletAPI。 它们处理请求的机制都是一个核心控制器。<br>区别：<br>            Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。 Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSM框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/2019/11/21/spring-xue-xi-bi-ji/"/>
      <url>/2019/11/21/spring-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>SSM框架之Spring学习笔记</strong></p><a id="more"></a><h2 id="一-、Spring基础"><a href="#一-、Spring基础" class="headerlink" title="一 、Spring基础"></a>一 、Spring基础</h2><h3 id="1-Spring概述"><a href="#1-Spring概述" class="headerlink" title="1.Spring概述"></a>1.Spring概述</h3><p>​        spring是分层的Java SE/EE应用<strong>全栈式</strong>轻量级开源框架，以<strong>IOC</strong>(Inverse Of Control，控制反转)和<strong>AOP</strong>(Aspect Oriented Progranming，面向切面编程)为内核，提供了展现层SpringMVC和持久层Spring JDBC以及业务层事务管理等众多的企业级应用技术，还能整合开源世界众多著名的第三方框架和类库，逐渐成为使用最多的JavaEE企业应用开源框架。</p><h3 id="2-Spring的体系结构"><a href="#2-Spring的体系结构" class="headerlink" title="2. Spring的体系结构"></a>2. Spring的体系结构</h3><p><img src="http://ww1.sinaimg.cn/large/006zQofnly1gbh0mtz179j30k00f00u1.jpg" alt="Spring的体系结构"></p><h1 id="二、IoC的概念和作用"><a href="#二、IoC的概念和作用" class="headerlink" title="二、IoC的概念和作用"></a>二、IoC的概念和作用</h1><h3 id="1-程序的耦合"><a href="#1-程序的耦合" class="headerlink" title="1.程序的耦合"></a>1.程序的耦合</h3><p>​        耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关 系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)。</p><p>​        耦合是影响软件复杂程度和设计质量的一个重要因素，在设计上我们应采用以下原则：如果模块间必须 存在耦合，就尽量使用数据耦合，少用控制耦合，限制公共耦合的范围，尽量避免使用内容耦合。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcDemo1</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1.注册驱动</span>            <span class="token comment" spellcheck="true">//DriverManager.registerDriver(new com.mysql.cj.jdbc.Driver());</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.获取链接</span>            Connection con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/spring?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.获取操作数据库的预处理</span>            PreparedStatement ps <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.执行SQL，得到结果集</span>            ResultSet rs <span class="token operator">=</span> ps<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.遍历结果集</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//6.释放资源</span>            rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在JDBC操作中使用<code>Class.forName</code>的方式比使用<code>DriverManager.registerDriver</code>好是因为DriverManager 的 register 方法需要依赖数据库的MuSQL驱动类，当更换了数据库类型时就需要修改源码。使用Class.forName降低耦合度。</p><p><code>Class.forName("com.mysql.cj.jdbc.Driver");</code>中是使用反射来注册驱动的。</p><h3 id="2-解耦"><a href="#2-解耦" class="headerlink" title="2. 解耦"></a>2. 解耦</h3><h4 id="2-1-工厂方式解耦"><a href="#2-1-工厂方式解耦" class="headerlink" title="2.1 工厂方式解耦"></a>2.1 工厂方式解耦</h4><p>在实际开发中我们可以把三层的对象都使用配置文件配置起来，当启动服务器应用加载的时候，让一个类中的方法通过读取配置文件，把这些对象创建出来并存起来。在接下来的使用的时候，直接拿过来用就好了。 </p><p>那么，这个读取配置文件，创建和获取三层对象的类就是工厂。</p><h4 id="2-2-控制反转-Inversion-Of-Control-解耦"><a href="#2-2-控制反转-Inversion-Of-Control-解耦" class="headerlink" title="2.2 控制反转(Inversion Of Control)解耦"></a>2.2 控制反转(Inversion Of Control)解耦</h4><p>控制反转把创建对象的权力交给框架，是框架的主要特征，并非面向对象的专用术语。它包括依赖注入（Dependency Injection，简称DI）和依赖查找（Dependency Lookup）</p><h1 id="三、使用Spring的IOC解决程序的耦合"><a href="#三、使用Spring的IOC解决程序的耦合" class="headerlink" title="三、使用Spring的IOC解决程序的耦合"></a>三、使用Spring的IOC解决程序的耦合</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> SSM框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pyhon之网络爬虫开发学习笔记</title>
      <link href="/2019/11/21/pyhon-zhi-wang-luo-pa-chong-kai-fa-xue-xi-bi-ji/"/>
      <url>/2019/11/21/pyhon-zhi-wang-luo-pa-chong-kai-fa-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>Python网络爬虫学习笔记</strong></p><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/2019/11/01/python-xue-xi-bi-ji/"/>
      <url>/2019/11/01/python-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>Python学习笔记</strong></p><a id="more"></a><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1-了解python"><a href="#1-了解python" class="headerlink" title="1.了解python"></a>1.了解python</h3><ul><li>Python的创始人为吉多·范罗苏姆。</li><li>Python是完全面向对象的语言。函数、模块、数字、字符串都是对象。并且完全支持继承、重载、派生、多重继承，有益于增强源代码的复用性。Python支持重载运算符，因此Python也支持泛型设计。相对于Lisp这种传统的函数式编程语言，Python对函数式编程]只提供了有限的支持。有两个标准库（functools, itertools）提供了与Haskell和Standard ML中类似的函数式程序设计工具。</li><li>Python是可扩展的。提供了丰富的API和工具，以便程序员能够轻松地使用C、C++、Cython来编写扩展模块。Python编译器本身也可以被集成到其它需要脚本语言的程序内。</li><li>应用范围：<ul><li>网络应用程序</li><li>GUI开发</li><li>数据挖掘、人工智能</li><li>网络爬虫</li><li>自动化脚本</li></ul></li><li>两种版本：2.x和3.x</li></ul><h3 id="2-注释"><a href="#2-注释" class="headerlink" title="2.注释"></a>2.注释</h3><ul><li><p>单行注释</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 说明文字</span></code></pre></li><li><p>多行注释</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""说明文字说明文字"""</span>  <span class="token triple-quoted-string string">'''说明文字说明文字'''</span></code></pre></li></ul><h3 id="3-基本数据类型"><a href="#3-基本数据类型" class="headerlink" title="3.基本数据类型"></a>3.基本数据类型</h3><p>Python中有六个标准的数据类型</p><ul><li><p>Number（数字）</p><ul><li>int（整数）</li><li>float（浮点数）：1.23，3.1415</li><li>bool（布尔类型）：True和False</li><li>complex（复数）：如1+2j</li></ul></li><li><p>String（字符串）</p><ul><li><p>Python中字符串用单引号<code>'</code>或者双引号<code>"</code>括起来</p></li><li><p>字符串的下标及截取</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 下标</span>str <span class="token operator">=</span> <span class="token string">'Python'</span>a <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>b <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 字符串有两种索引方式，分别为从前和从后索引</span><span class="token comment" spellcheck="true"># 从前索引：索引值从0开始递增</span><span class="token comment" spellcheck="true"># 从后索引：从-1开始，-1，-2……递减</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 截取</span>str <span class="token operator">=</span> <span class="token string">'China'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出第一个到第四个之间所有的字符</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#输出第二个到倒数第一个之间的所有字符</span></code></pre></li></ul></li><li><p>List（列表）：其使用最为频繁，类似于数组，但可以存放不同数据结构的元素</p><ul><li><p>截取方式与字符串相同</p></li><li><p>输出</p><pre class=" language-python"><code class="language-python">list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">2.34</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><p>Tuple（元组）:</p><p>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 <code>()</code> 里，元素之间用逗号隔开。</p><pre class=" language-python"><code class="language-python">tuple <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">70.2</span>  <span class="token punctuation">)</span>tinytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 输出完整元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true"># 输出元组的第一个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 输出从第二个元素开始到第三个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 输出从第三个元素开始的所有元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinytuple <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 输出两次元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tuple <span class="token operator">+</span> tinytuple<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 连接元组</span></code></pre></li></ul><ul><li><p>Set（集合）:</p><ul><li><p>定义：集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 <code>{ }</code> 或者 <code>set()</code> 函数创建集合，注意：创建一个空集合必须用 <code>set()</code> 而不是 <code>{ }</code>，因为 <code>{ }</code> 是用来创建一个空字典。</p></li><li><p>格式：</p><pre class=" language-python"><code class="language-python">parame <span class="token operator">=</span> <span class="token punctuation">{</span>value01<span class="token punctuation">,</span>value02<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span>或者set<span class="token punctuation">(</span>value<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">student <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span> <span class="token string">'Mary'</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'Rose'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出集合，重复的元素被自动去掉</span><span class="token comment" spellcheck="true"># 成员测试</span><span class="token keyword">if</span> <span class="token string">'Rose'</span> <span class="token keyword">in</span> student <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Rose 在集合中'</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Rose 不在集合中'</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><pre><code># set可以进行集合运算a = set('abracadabra')b = set('alacazam')print(a)print(a - b)     # a 和 b 的差集print(a | b)     # a 和 b 的并集print(a &amp; b)     # a 和 b 的交集print(a ^ b)     # a 和 b 中不同时存在的元素```以上实例输出结果：```python{'Mary', 'Jim', 'Rose', 'Jack', 'Tom'}Rose 在集合中{'b', 'a', 'c', 'r', 'd'}{'b', 'd', 'r'}{'l', 'r', 'a', 'c', 'z', 'm', 'b', 'd'}{'a', 'c'}{'l', 'r', 'z', 'm', 'b', 'd'}```</code></pre><ul><li><p>Dictionary（字典）：</p><ul><li><p>定义：字典是一种映射类型，字典用 <code>{ }</code> 标识，它是一个无序的 <code>键(key) : 值(value)</code> 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><pre class=" language-python"><code class="language-python">dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>dict<span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1 - 菜鸟教程"</span>dict<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token string">"2 - 菜鸟工具"</span>tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'runoob'</span><span class="token punctuation">,</span><span class="token string">'code'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'site'</span><span class="token punctuation">:</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">}</span></code></pre></li></ul></li></ul><pre><code>print (dict['one'])       # 输出键为 'one' 的值print (dict[2])           # 输出键为 2 的值print (tinydict)          # 输出完整的字典print (tinydict.keys())   # 输出所有键print (tinydict.values()) # 输出所有值'''输出：1 - 菜鸟教程2 - 菜鸟工具{'name': 'runoob', 'code': 1, 'site': 'www.runoob.com'}dict_keys(['name', 'code', 'site'])dict_values(['runoob', 1, 'www.runoob.com'])'''```</code></pre><h3 id="4-数字-Number-及其常用函数"><a href="#4-数字-Number-及其常用函数" class="headerlink" title="4.数字(Number)及其常用函数"></a>4.数字(Number)及其常用函数</h3><ul><li><p>支持三种不同的数值类型：</p><ul><li>整型(Int)：无大小限制的正数或者负数</li><li>浮点型(float)：由整数部分和小数部分组成，也可以用科学计数法表示</li><li>复数(complex)：可以用<code>a+bj</code>或者<code>complex(a,b)</code>来表示，并且复数的实部和虚部都是浮点型</li></ul></li><li><p>数字类型转换：</p><ul><li><strong>int(x)</strong> 将x转换为一个整数。</li><li><strong>float(x)</strong> 将x转换到一个浮点数。</li><li><strong>complex(x)</strong> 将x转换到一个复数，实数部分为 x，虚数部分为 0。</li><li><strong>complex(x, y)</strong> 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。</li></ul></li><li><p>数学函数：</p><ul><li><code>abs(x)</code>：返回数字的绝对值，如abs(-10) 返回 10</li><li><code>ceil(x)</code>：返回数字的上入整数，如math.ceil(4.1) 返回 5</li><li><code>exp(x)</code>：返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045</li><li><code>fabs(x)</code>：返回数字的绝对值，如math.fabs(-10) 返回10.0</li><li><code>max(x1, x2,...)</code>：返回给定参数的最大值，参数可以为序列。</li><li><code>log10(x)</code>：返回以10为基数的x的对数，如math.log10(100)返回 2.0</li><li><code>pow(x, y)</code>：x**y 运算后的值。</li><li><code>round(x [,n])</code>：返回浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。</li><li><code>sqrt(x)</code>：返回数字x的平方根。</li></ul></li><li><p>随机数函数</p><table><thead><tr><th align="left">函数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">choice(seq)</td><td align="left">从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</td></tr><tr><td align="left">randrange ([start,] stop [,step])</td><td align="left">从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1</td></tr><tr><td align="left">random()</td><td align="left">随机生成下一个实数，它在[0,1)范围内。</td></tr><tr><td align="left">seed([x])</td><td align="left">改变随机数生成器的种子seed。</td></tr><tr><td align="left">shuffle(lst)</td><td align="left">将序列的所有元素随机排序</td></tr><tr><td align="left">uniform(x, y)</td><td align="left">随机生成下一个实数，它在[x,y]范围内。</td></tr></tbody></table></li><li><p>数学常量</p><ul><li>pi：圆周率，一般用Π来表示</li><li>e，数学常量e，即自然常数</li></ul></li></ul><h3 id="5-字符串常用方法"><a href="#5-字符串常用方法" class="headerlink" title="5.字符串常用方法"></a>5.字符串常用方法</h3><ul><li><code>capitalize()</code>：将字符串的第一个字符转换为大写</li><li><code>center(width, fillchar)</code>：返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。</li><li><code>count(str, beg= 0,end=len(string))</code>：返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</li><li><code>find(str, beg=0, end=len(string))</code>：检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1</li><li><code>index(str, beg=0, end=len(string))</code>：跟find()方法一样，只不过如果str不在字符串中会报一个异常.</li><li><code>lower()</code>：转换字符串中所有大写字符为小写.</li><li><code>lstrip()</code>：截掉字符串左边的空格或指定字符。</li><li><code>replace(old, new [, max])</code>：把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。</li><li><code>rstrip()</code>：删除字符串字符串末尾的空格.</li><li><code>split(str="", num=string.count(str))</code>：num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串</li><li><code>upper()</code>：转换字符串中的小写字母为大写</li></ul><h3 id="6-列表函数"><a href="#6-列表函数" class="headerlink" title="6.列表函数"></a>6.列表函数</h3><table><thead><tr><th align="left">方法</th><th align="left">方法描述</th></tr></thead><tbody><tr><td align="left">list.append(obj</td><td align="left">在列表末尾添加新的对象</td></tr><tr><td align="left">list.count(obj)</td><td align="left">统计某个元素在列表中出现的次数</td></tr><tr><td align="left">list.extend(seq)</td><td align="left">在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">list.index(obj)</td><td align="left">从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">list.insert(index, obj)</td><td align="left">将对象插入列表</td></tr><tr><td align="left">list.pop(index=-1])</td><td align="left">移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">list.remove(obj)</td><td align="left">移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">list.reverse()</td><td align="left">反向列表中元素</td></tr><tr><td align="left">list.sort( key=None, reverse=False)</td><td align="left">对原列表进行排序</td></tr><tr><td align="left">list.clear()</td><td align="left">清空列表</td></tr><tr><td align="left">list.copy()</td><td align="left">复制列表</td></tr></tbody></table><h3 id="7-元组方法"><a href="#7-元组方法" class="headerlink" title="7.元组方法"></a>7.元组方法</h3><ul><li><code>len(tuple)</code>：计算元组元素个数。</li><li><code>max(tuple)</code>：返回元组中元素最大值。</li><li><code>min(tuple)</code>：返回元组中元素最小值。</li><li><code>tuple(seq)</code>：将列表转换为元组。</li></ul><h3 id="8-变量定义"><a href="#8-变量定义" class="headerlink" title="8.变量定义"></a>8.变量定义</h3><ul><li><p>python是弱类型语言，并不需要事先定义变量类型</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true"># int类型</span>name <span class="token operator">=</span> <span class="token string">'小明'</span>  <span class="token comment" spellcheck="true"># str类型</span>height <span class="token operator">=</span> <span class="token number">1.80</span>  <span class="token comment" spellcheck="true"># float类型</span>flag <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment" spellcheck="true"># bool类型</span></code></pre></li><li><p>查看变量类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="9-命名规范"><a href="#9-命名规范" class="headerlink" title="9.命名规范"></a>9.命名规范</h3><ul><li><p>常量使用以下划线分隔的大写命名</p><pre class=" language-python"><code class="language-python">MAX_OVERFLOW <span class="token operator">=</span> <span class="token number">100</span></code></pre></li><li><p>变量名尽量小写, 如有多个单词，用下划线连接</p><pre class=" language-python"><code class="language-python">school_name <span class="token operator">=</span> <span class="token string">'北京大学'</span></code></pre></li><li><p>函数名一律小写，如有多个单词，用下划线隔开,私有函数在函数名前加一个下划线</p></li><li><p>类名使用大驼峰风格</p></li><li><p>模块名使用小驼峰，避免使用下划线</p></li></ul><h3 id="10-导入模块"><a href="#10-导入模块" class="headerlink" title="10.导入模块"></a>10.导入模块</h3><ul><li><p>使用import关键字</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> keyword</code></pre></li><li><p>利用keyword模块查看关键字</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span></code></pre></li><li><p>关键字</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'nonlocal'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span> <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span><span class="token punctuation">]</span></code></pre></li></ul><h3 id="11-输出"><a href="#11-输出" class="headerlink" title="11.输出"></a>11.输出</h3><ul><li><p>常用格式符号</p><pre class=" language-python"><code class="language-python"><span class="token operator">%</span> s <span class="token punctuation">:</span> 字符串<span class="token punctuation">(</span>采用str<span class="token punctuation">(</span><span class="token punctuation">)</span>的显示<span class="token punctuation">)</span><span class="token operator">%</span> r <span class="token punctuation">:</span> 字符串<span class="token punctuation">(</span>采用repr<span class="token punctuation">(</span><span class="token punctuation">)</span>的显示<span class="token punctuation">)</span><span class="token operator">%</span> c <span class="token punctuation">:</span> 单个字符<span class="token operator">%</span> b <span class="token punctuation">:</span> 二进制整数<span class="token operator">%</span> d <span class="token punctuation">:</span> 十进制整数<span class="token operator">%</span> i <span class="token punctuation">:</span> 十进制整数<span class="token operator">%</span> o <span class="token punctuation">:</span> 八进制整数<span class="token operator">%</span> x <span class="token punctuation">:</span> 十六进制整数<span class="token operator">%</span> e <span class="token punctuation">:</span> 指数<span class="token punctuation">(</span>基底写为e<span class="token punctuation">)</span><span class="token operator">%</span> E <span class="token punctuation">:</span> 指数<span class="token punctuation">(</span>基底写为E<span class="token punctuation">)</span><span class="token operator">%</span> f <span class="token punctuation">:</span> 浮点数<span class="token operator">%</span> F <span class="token punctuation">:</span> 浮点数，与上相同<span class="token operator">%</span> g <span class="token punctuation">:</span> 指数<span class="token punctuation">(</span>e<span class="token punctuation">)</span>或浮点数<span class="token punctuation">(</span>根据显示长度<span class="token punctuation">)</span><span class="token operator">%</span> G <span class="token punctuation">:</span> 指数<span class="token punctuation">(</span>E<span class="token punctuation">)</span>或浮点数<span class="token punctuation">(</span>根据显示长度<span class="token punctuation">)</span><span class="token operator">%</span> <span class="token operator">%</span> <span class="token punctuation">:</span> 字符<span class="token string">"%"</span></code></pre></li><li><p>普通输出</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'今年我%d岁了'</span> <span class="token operator">%</span> age<span class="token punctuation">)</span></code></pre></li><li><p>多个变量输出</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'小明'</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'姓名：%s，年龄：%d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li><li><p>换行输出</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'您好\n世界'</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="12-输入"><a href="#12-输入" class="headerlink" title="12.输入"></a>12.输入</h3><ul><li><p>输入 input()函数</p><pre class=" language-python"><code class="language-python">tel <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入手机号：'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tel<span class="token punctuation">)</span></code></pre></li></ul><h3 id="13-算术运算符"><a href="#13-算术运算符" class="headerlink" title="13.算术运算符"></a>13.算术运算符</h3><ul><li><p>常见运算符</p><p>+、-、*、/</p></li><li><p>其他运算符</p><p>//：整除运算符，例如9//2的结果为4</p><p>**：指数运算符，例如</p><pre class=" language-python"><code class="language-python"><span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span></code></pre><p>结果为8</p></li><li><p>运算优先级：<code>**</code>高于 <code>*</code> <code>/</code> <code>%</code> <code>//</code>高于<code>+</code> <code>-</code>，但避免歧义，应使用<code>()</code>来处理优先级 </p></li></ul><h3 id="14-运算符"><a href="#14-运算符" class="headerlink" title="14.运算符"></a>14.运算符</h3><ul><li><p>比较运算符</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义两个变量</span>a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># ==    检查两个操作数的值是否相等，如果是则条件变为真。</span><span class="token comment" spellcheck="true"># ret = (a == b)</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true"># !=    检查两个操作数的值是否相等，如果值不相等，则条件变为真。</span><span class="token comment" spellcheck="true"># if a != b:</span><span class="token comment" spellcheck="true">#     print('a不等于b')</span><span class="token comment" spellcheck="true"># >    检查左操作数的值是否大于右操作数的值，如果是，则条件成立。</span><span class="token comment" spellcheck="true"># if a > b:</span><span class="token comment" spellcheck="true">#     print("a大于b")</span><span class="token comment" spellcheck="true"># &lt;=    检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。</span><span class="token comment" spellcheck="true"># if a &lt;= b:</span><span class="token comment" spellcheck="true">#     print("a小于等于b")</span></code></pre></li><li><p>逻辑运算符</p><ul><li>and：和运算</li><li>or：或运算</li><li>not非运算</li></ul></li><li><p>成员运算符</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>in</td><td>如果在指定的序列中找到值返回 True，否则返回 False。</td></tr><tr><td>not in</td><td>如果在指定的序列中没有找到值返回 True，否则返回 False。</td></tr></tbody></table><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">20</span>list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> list <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"1 - 变量 a 在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"1 - 变量 a 不在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span> b <span class="token operator">not</span> <span class="token keyword">in</span> list <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"2 - 变量 b 不在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"2 - 变量 b 在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改变量 a 的值</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">if</span> <span class="token punctuation">(</span> a <span class="token keyword">in</span> list <span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"3 - 变量 a 在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"3 - 变量 a 不在给定的列表中 list 中"</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''1 - 变量 a 不在给定的列表中 list 中2 - 变量 b 不在给定的列表中 list 中3 - 变量 a 在给定的列表中 list 中'''</span></code></pre></li><li><p>身份运算符</p><ul><li>is：描述两个标识符是否引自同一对象    </li><li>is not：判断两个标识符是不是引自不同对象</li><li><strong>is和==的区别：is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。</strong></li></ul></li><li><p>位运算符</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">0011</span> <span class="token number">1100</span>  <span class="token comment" spellcheck="true"># 60的二进制</span>b <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">1101</span>  <span class="token comment" spellcheck="true"># 13的二进制</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>a<span class="token operator">&amp;</span>b <span class="token operator">=</span> <span class="token number">0000</span> <span class="token number">1100</span>  <span class="token comment" spellcheck="true"># 按位与：对应位值相同为1，否则为0</span>a<span class="token operator">|</span>b <span class="token operator">=</span> <span class="token number">0011</span> <span class="token number">1101</span>  <span class="token comment" spellcheck="true"># 按位或：对应位若有一个为1，则结果的该位为1</span>a<span class="token operator">^</span>b <span class="token operator">=</span> <span class="token number">0011</span> <span class="token number">0001</span>  <span class="token comment" spellcheck="true"># 按位异或：对应位不同时结果为1</span><span class="token operator">~</span>a  <span class="token operator">=</span> <span class="token number">1100</span> <span class="token number">0011</span>  <span class="token comment" spellcheck="true"># 按位取反：对每一位取反</span><span class="token comment" spellcheck="true"># &lt;&lt; ： 左移运算符：各位左移若干位，高位丢弃，低位补零 </span><span class="token comment" spellcheck="true"># >> ： 右移运算符：向右移动若干位</span></code></pre></li></ul><h3 id="15-选择结构语句"><a href="#15-选择结构语句" class="headerlink" title="15.选择结构语句"></a>15.选择结构语句</h3><h4 id="15-1-if语句基本格式"><a href="#15-1-if语句基本格式" class="headerlink" title="15.1 if语句基本格式"></a>15.1 if语句基本格式</h4><ul><li><p>基本格式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 要判断的条件<span class="token punctuation">:</span>    条件成立时，需要做的事情</code></pre></li><li><p>例子</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">13</span><span class="token keyword">if</span> num <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'该数字大于10'</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="15-2-if-else"><a href="#15-2-if-else" class="headerlink" title="15.2 if-else"></a>15.2 if-else</h4><ul><li><p>如果一个条件成立, 做一个事情, 如果条件不成立, 做另一个事情</p></li><li><p>格式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token punctuation">:</span>  如果成立<span class="token punctuation">,</span> 执行的代码<span class="token keyword">else</span><span class="token punctuation">:</span>  如果不成立<span class="token punctuation">,</span> 执行的代码</code></pre></li></ul><h4 id="15-3-if-elif-else"><a href="#15-3-if-elif-else" class="headerlink" title="15.3 if-elif-else"></a>15.3 if-elif-else</h4><p>格式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> 判断条件<span class="token number">1</span><span class="token punctuation">:</span>      <span class="token keyword">pass</span><span class="token keyword">elif</span> 判断条件<span class="token number">2</span><span class="token punctuation">:</span>      <span class="token keyword">pass</span><span class="token keyword">elif</span> 判断条件<span class="token number">3</span><span class="token punctuation">:</span>      <span class="token keyword">pass</span><span class="token keyword">else</span><span class="token punctuation">:</span>         以上都不满足才可以执行</code></pre><h4 id="15-4-三目运算符"><a href="#15-4-三目运算符" class="headerlink" title="15.4 三目运算符"></a>15.4 三目运算符</h4><p>格式：</p><pre class=" language-python"><code class="language-python">变量 <span class="token operator">=</span> 如果条件成立 <span class="token keyword">if</span> 判断条件 <span class="token keyword">else</span> 如果条件不成立</code></pre><p>例子：</p><pre class=" language-python"><code class="language-python">max <span class="token operator">=</span> a <span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token keyword">else</span> b</code></pre><h4 id="15-5-while循环"><a href="#15-5-while循环" class="headerlink" title="15.5 while循环"></a>15.5 while循环</h4><ul><li><p>格式：</p><pre class=" language-python"><code class="language-python">定义一个计数器定义<span class="token keyword">while</span>循环书写循环体代码修改计数器</code></pre></li><li><p>例：打印4次hello word</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello word'</span><span class="token punctuation">)</span>    i <span class="token operator">+=</span><span class="token number">1</span></code></pre></li></ul><h4 id="15-6-for循环"><a href="#15-6-for循环" class="headerlink" title="15.6 for循环"></a>15.6 for循环</h4><ul><li><p>格式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>variable<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>sequence<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">></span></code></pre></li><li><p>实例：</p><pre class=" language-python"><code class="language-python">languages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"C"</span><span class="token punctuation">,</span> <span class="token string">"C++"</span><span class="token punctuation">,</span> <span class="token string">"Perl"</span><span class="token punctuation">,</span> <span class="token string">"Python"</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> languages<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''输出CC++PerlPython'''</span></code></pre></li></ul><h4 id="15-7-break和continue语句"><a href="#15-7-break和continue语句" class="headerlink" title="15.7 break和continue语句"></a>15.7 break和continue语句</h4><ul><li><p>break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行。</p></li><li><p>continue语句被用来告诉 Python 跳过当前循环块中的剩余语句，然后继续进行下一轮循环。</p></li><li><p>实例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># while中的break语句</span>n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环结束。'</span><span class="token punctuation">)</span></code></pre><p>输出结果：</p><pre class=" language-python"><code class="language-python"><span class="token number">4</span><span class="token number">3</span>循环结束。</code></pre><p>while中的continue语句：</p><pre class=" language-python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    n <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'循环结束。'</span><span class="token punctuation">)</span></code></pre><p>输出结果：</p><pre class=" language-python"><code class="language-python"><span class="token number">4</span><span class="token number">3</span><span class="token number">1</span><span class="token number">0</span>循环结束。</code></pre></li></ul><h4 id="15-8-迭代器与生成器"><a href="#15-8-迭代器与生成器" class="headerlink" title="15.8 迭代器与生成器"></a>15.8 迭代器与生成器</h4><ul><li><p>两个方法：<code>iter()</code>和<code>next()</code></p></li><li><p>字符串，列表或元组对象都可用于创建迭代器</p><pre class=" language-python"><code class="language-python">list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> iter<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建迭代器对象</span><span class="token keyword">print</span> <span class="token punctuation">(</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 输出迭代器的下一个元素</span></code></pre><ul><li><p>通过for循环遍历</p><pre class=" language-python"><code class="language-python">list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> iter<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建迭代器对象</span><span class="token keyword">for</span> x <span class="token keyword">in</span> it<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span></code></pre></li><li><p>使用next()函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys         <span class="token comment" spellcheck="true"># 引入 sys 模块</span>list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>it <span class="token operator">=</span> iter<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建迭代器对象</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h3 id="16-python中的正则表达式"><a href="#16-python中的正则表达式" class="headerlink" title="16.python中的正则表达式"></a>16.python中的正则表达式</h3><p>Python自1.5版本起增加了re模块，用于支持正则表达式。</p><ul><li><p><code>re.match</code>函数：从字符串的起始位置匹配一个模式，<strong>若匹配成功返回match对象，若匹配失败则返回None</strong>。</p><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>match<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li><p>参数说明：</p><ul><li><code>pattern</code>：匹配的正则表达式</li><li><code>string</code>：要匹配的字符串。</li><li><code>flags</code>：标志位，用于控制正则表达式的匹配方式</li></ul></li><li><p>flags可用值：</p><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">re.I</td><td align="left">使匹配对大小写不敏感</td></tr><tr><td align="left">re.L</td><td align="left">做本地化识别（locale-aware）匹配</td></tr><tr><td align="left">re.M</td><td align="left">多行匹配，影响 ^ 和 $</td></tr><tr><td align="left">re.S</td><td align="left">使 . 匹配包括换行在内的所有字符</td></tr><tr><td align="left">re.U</td><td align="left">根据Unicode字符集解析字符。这个标志影响 \w, \W, \b, \B.</td></tr><tr><td align="left">re.X</td><td align="left">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td></tr></tbody></table></li><li><p>可以使用group(num) 或 groups() 匹配对象函数来获取匹配表达式。</p><ul><li><p><code>group(num=0)</code>：匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</p></li><li><p><code>groups()</code>：返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</p></li><li><p>实例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token keyword">import</span> reline <span class="token operator">=</span> <span class="token string">"Cats are smarter than dogs"</span><span class="token comment" spellcheck="true"># .* 表示任意匹配除换行符（\n、\r）之外的任何单个或多个字符</span>matchObj <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span> r<span class="token string">'(.*) are (.*?) .*'</span><span class="token punctuation">,</span> line<span class="token punctuation">,</span> re<span class="token punctuation">.</span>M<span class="token operator">|</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">if</span> matchObj<span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.group() : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.group(1) : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"matchObj.group(2) : "</span><span class="token punctuation">,</span> matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"No match!!"</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class=" language-python"><code class="language-python">matchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  Cats are smarter than dogsmatchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  CatsmatchObj<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>  smarter</code></pre></li></ul></li><li><p>其中match对象包含了匹配值的位置和匹配数据，可使用方法得到。</p><pre class=" language-python"><code class="language-python">匹配值的起始位置： match1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>匹配值的结束位置：match1<span class="token punctuation">.</span>end<span class="token punctuation">(</span><span class="token punctuation">)</span>匹配位置的元组： match1<span class="token punctuation">.</span>span<span class="token punctuation">(</span><span class="token punctuation">)</span>被匹配的字符串：match1<span class="token punctuation">.</span>string匹配数据： match1<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>例子：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re</code></pre></li></ul></li></ul><pre><code>pattern = r'mr_\w+'string = 'MR_SHOP mr_shop'match1 = re.match(pattern, string, re.I)print(match1)string = 'new MR_SHOP mr_shop'match2 = re.match(pattern, string, re.I)print(match2)print('匹配值的起始位置：', match1.start())print('匹配值的结束位置：', match1.end())print('匹配位置的元组：', match1.span())print('被匹配的字符串：', match1.string)print('匹配数据：', match1.group())```运行结果：```python&lt;re.Match object; span=(0, 7), match='MR_SHOP'&gt;None匹配值的起始位置： 0匹配值的结束位置： 7匹配位置的元组： (0, 7)被匹配的字符串： MR_SHOP mr_shop匹配数据： MR_SHOP```</code></pre><ul><li><p><code>re.search</code>方法：扫描整个字符串并返回第一个成功的匹配。<strong>匹配成功re.search方法返回一个匹配的对象，否则返回None。</strong></p><ul><li><p>函数语法：</p><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li><code>pattern</code>：匹配的正则表达式</li><li><code>string</code>：要匹配的字符串。</li><li><code>flags</code>：标志位，用于控制正则表达式的匹配方式</li></ul></li><li><p>示例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> r<span class="token string">'mr_\w+'</span>string <span class="token operator">=</span> <span class="token string">'MR_SHOP mr_shop'</span>search <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>search<span class="token punctuation">)</span></code></pre></li><li><p><strong>re.match与re.search的区别</strong>：</p><p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p></li></ul></li><li><p><code>findall()</code>方法：用于在整个字符串中搜索所有符合正则表达式的字符串，并以列表返回。若匹配成功，则返回包含匹配结构的列表，若匹配失败，则返回空列表。</p><ul><li><p>语法格式：</p><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></li><li><p>参数说明：</p><ul><li>pattern：模式字符串，正则表达式</li><li>string：要匹配的字符串</li><li>flags：标志位，可选</li></ul></li><li><p>示例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> r<span class="token string">'mr_\w+'</span>string <span class="token operator">=</span> <span class="token string">'MR_SHOP mr_shop'</span>find <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>find<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'MR_SHOP'</span><span class="token punctuation">,</span> <span class="token string">'mr_shop'</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'list'</span><span class="token operator">></span></code></pre></li><li><p>运用：分割IP地址</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> re</code></pre></li></ul></li></ul><pre><code>pattern = r'([1-9]{1,3}(\.[0-9]{1,3}){3})'str = '127.0.0.1 192.168.1.66 187.0.1.9'match = re.findall(pattern, str)for item in match:    print(item[0])```运行结果：```python127.0.0.1192.168.1.66187.0.1.9```注：`item[0]`需要索引`0`的必要性：match对象的结果是一个列表，其中包含了三个元组，每一个元组包含了两个字符串。直接输出item的结果是：```python('127.0.0.1', '.1')('192.168.1.66', '.66')('187.0.1.9', '.9')```第一个字符串是所要输出的字符串，因此需要索引号。</code></pre><ul><li><p><code>re.sub()</code>方法：用于实现字符串的替换。返回值为字符串。</p><ul><li><p>语法格式：</p><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> repl<span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>pattern：表示模式字符串，正则表达式</li><li>repl：表示要替换的字符串</li><li>string：表示要被查找替换的原始字符串</li><li>count：可选，表示模式匹配后替换的最大次数，默认值为0，表示替换所有</li><li>flags：可选，标志位，用于控制匹配方式</li></ul></li><li><p>示例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> r<span class="token string">'(黑客)|(抓包)|(监听)|(Trojan)'</span>about <span class="token operator">=</span> <span class="token string">'我是一名黑客，喜欢抓包，监听网络，想研究Trojan。'</span>sub <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">'**'</span><span class="token punctuation">,</span> about<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span></code></pre><p>输出结果：</p><pre class=" language-python"><code class="language-python">我是一名<span class="token operator">**</span>，喜欢<span class="token operator">**</span>，<span class="token operator">**</span>网络，想研究<span class="token operator">**</span>。</code></pre></li></ul></li><li><p><code>re.split()</code>：分割字符串。返回值为列表。</p><ul><li><p>格式：</p><pre class=" language-python"><code class="language-python">re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> <span class="token punctuation">[</span>maxsplit<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>maxsplit：可选，表示最大可拆分的次数</li><li>flags：标志位</li></ul></li><li><p>示例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> repattern <span class="token operator">=</span> r<span class="token string">'[?|&amp;]'</span>url <span class="token operator">=</span> <span class="token string">'http://www.baidu.com/login.jsp?username="liming"&amp;pwd="123"'</span>result <span class="token operator">=</span> re<span class="token punctuation">.</span>split<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>输出结果：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'http://www.baidu.com/login.jsp'</span><span class="token punctuation">,</span> <span class="token string">'username="liming"'</span><span class="token punctuation">,</span> <span class="token string">'pwd="123"'</span><span class="token punctuation">]</span></code></pre></li></ul></li></ul><h3 id="17-函数"><a href="#17-函数" class="headerlink" title="17.函数"></a>17.函数</h3><ol><li><p>一般语法：使用def关键字</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> 函数名（参数列表）<span class="token punctuation">:</span>    函数体</code></pre><p>实例：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 在控制台输出hello world!</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span></code></pre><p>示例二：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 计算长方形面积函数</span><span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> width <span class="token operator">*</span> height</code></pre></li></ol><p>   def print_welcome(name):<br>       print(“Welcome to”, name)</p><p>   print_welcome(“python”)<br>   w = 4<br>   h = 5<br>   print(“width =”, w, “height =”, h, “area =”, area(w, h))</p><pre><code>   输出结果：   ```python   Welcome to python   width = 4 height = 5 area = 20</code></pre><p>   示例三：</p><pre class=" language-python"><code class="language-python">   <span class="token comment" spellcheck="true"># 可写函数说明</span>   <span class="token keyword">def</span> <span class="token function">changeme</span><span class="token punctuation">(</span> mylist <span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token string">"修改传入的列表"</span>      mylist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数内取值: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span>      <span class="token keyword">return</span>   <span class="token comment" spellcheck="true"># 调用changeme函数</span>   mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span>   changeme<span class="token punctuation">(</span> mylist <span class="token punctuation">)</span>   <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"函数外取值: "</span><span class="token punctuation">,</span> mylist<span class="token punctuation">)</span></code></pre><p>   输出结果：</p><pre><code>   函数内取值:  [10, 20, 30, [1, 2, 3, 4]]   函数外取值:  [10, 20, 30, [1, 2, 3, 4]]</code></pre><ol start="2"><li>return语句：用于退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。</li></ol><h3 id="18-面向对象编程"><a href="#18-面向对象编程" class="headerlink" title="18.面向对象编程"></a>18.面向对象编程</h3><h4 id="18-1-类的定义："><a href="#18-1-类的定义：" class="headerlink" title="18.1 类的定义："></a>18.1 类的定义：</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> 类名<span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''类的帮助信息'''</span>    statement</code></pre><p>示例一：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Geese</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""大雁类"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是大雁"</span><span class="token punctuation">)</span>wildGoose <span class="token operator">=</span> Geese<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>wildGoose<span class="token punctuation">)</span></code></pre><p>输出结果：</p><pre><code>我是大雁&lt;__main__.Geese object at 0x000001AF79E3FFA0&gt;</code></pre><p><code>_init_()</code>方法：类似于JAVA的构造方法，在创建类的实例时，会自动调用该方法。<code>_init_()</code>必须包含一个self参数，并且是第一个参数。self参数是指向实力本身的引用，用于访问类的属性和方法，在方法被调用时主动传递实际参数self。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Geese</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""大雁类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beak<span class="token punctuation">,</span> wing<span class="token punctuation">,</span> claw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是大雁类，包含以下特征："</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>beak<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>wing<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>claw<span class="token punctuation">)</span>beak_1 <span class="token operator">=</span> <span class="token string">"喙的基部比较高，长度和头部的长度几乎相同"</span>wing_1 <span class="token operator">=</span> <span class="token string">"翅膀长而尖"</span>claw_1 <span class="token operator">=</span> <span class="token string">"爪子是蹼状的"</span>wildGoose <span class="token operator">=</span> Geese<span class="token punctuation">(</span>beak_1<span class="token punctuation">,</span> wing_1<span class="token punctuation">,</span> claw_1<span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre class=" language-python"><code class="language-python">我是大雁类，包含以下特征：喙的基部比较高，长度和头部的长度几乎相同翅膀长而尖爪子是蹼状的</code></pre><p><strong>注：<code>__init__()</code>方法前后时两个下划线。</strong></p><h4 id="18-2-类的实例方法："><a href="#18-2-类的实例方法：" class="headerlink" title="18.2 类的实例方法："></a>18.2 类的实例方法：</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">functionName</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> paramenterlist<span class="token punctuation">)</span><span class="token punctuation">:</span>    block</code></pre><p>例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Geese</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""大雁类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beak<span class="token punctuation">,</span> wing<span class="token punctuation">,</span> claw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是大雁类，包含以下特征："</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>beak<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>wing<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>claw<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fly</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token comment" spellcheck="true"># 定义实例方法</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>beak_1 <span class="token operator">=</span> <span class="token string">"喙的基部比较高，长度和头部的长度几乎相同"</span>wing_1 <span class="token operator">=</span> <span class="token string">"翅膀长而尖"</span>claw_1 <span class="token operator">=</span> <span class="token string">"爪子是蹼状的"</span>wildGoose <span class="token operator">=</span> Geese<span class="token punctuation">(</span>beak_1<span class="token punctuation">,</span> wing_1<span class="token punctuation">,</span> claw_1<span class="token punctuation">)</span>wildGoose<span class="token punctuation">.</span>fly<span class="token punctuation">(</span><span class="token string">"我飞行的时候，一会儿排成人字，一会儿排成一个一字"</span><span class="token punctuation">)</span></code></pre><p>运行结果：</p><pre><code>我是大雁类，包含以下特征：喙的基部比较高，长度和头部的长度几乎相同翅膀长而尖爪子是蹼状的我飞行的时候，一会儿排成人字，一会儿排成一个一字</code></pre><h4 id="18-3-访问权限"><a href="#18-3-访问权限" class="headerlink" title="18.3 访问权限"></a>18.3 访问权限</h4><ul><li><p><code>_fun</code>：以单下划线开头表示<code>protected</code>（保护）类型的成员，只允许类的本身和子类进行访问，不能用<code>from module import *</code>语句导入。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Swan</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""天鹅类"""</span>    _neck_swan <span class="token operator">=</span> <span class="token string">'天鹅的脖子很长'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__init__()"</span><span class="token punctuation">,</span> Swan<span class="token punctuation">.</span>_neck_swan<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 在实例方法中访问</span>swan <span class="token operator">=</span> Swan<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"直接访问："</span><span class="token punctuation">,</span> swan<span class="token punctuation">.</span>_neck_swan<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#通过实例访问</span></code></pre><p>运行结果：</p><pre><code>__init__() 天鹅的脖子很长直接访问： 天鹅的脖子很长</code></pre></li><li><p><code>__fun</code>：双下划线表示private（私有）类型的成员，只允许定义该方法的类本身进行访问，而且也不能通过类的实例进行访问，但是可以通过“类的实例名.类名_XXX”方式进行访问。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># private</span><span class="token keyword">class</span> <span class="token class-name">Swan</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""天鹅类"""</span>    __neck_swan <span class="token operator">=</span> <span class="token string">'天鹅的脖子很长'</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"__init__()"</span><span class="token punctuation">,</span> Swan<span class="token punctuation">.</span>__neck_swan<span class="token punctuation">)</span></code></pre></li></ul><p>  swan = Swan()<br>  print(“加入类名访问：”, swan._Swan__neck_swan)</p><h1 id="print-“直接访问：”-swan-neck-swan"><a href="#print-“直接访问：”-swan-neck-swan" class="headerlink" title="print(“直接访问：”, swan.__neck_swan)"></a>print(“直接访问：”, swan.__neck_swan)</h1><pre><code>  运行结果：  ```python  __init__() 天鹅的脖子很长  加入类名访问： 天鹅的脖子很长</code></pre><ul><li><code>__fun__()</code>定义特殊方法，如<code>__init__()</code>。</li></ul><h4 id="18-4-属性"><a href="#18-4-属性" class="headerlink" title="18.4 属性"></a>18.4 属性</h4><p>可以通过<code>@property</code>（装饰器）将一个方法转化为属性，从而实现用于计算的属性。将方法转化为属性后，可以通过方法名来访问方法，而不需要再添加小括号。</p><ul><li><p>语法格式：</p><pre class=" language-python"><code class="language-python">@property<span class="token keyword">def</span> <span class="token function">methodname</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    block</code></pre></li><li><p>例子：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Rect</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>width <span class="token operator">=</span> width  <span class="token comment" spellcheck="true"># 实例属性</span>        self<span class="token punctuation">.</span>height <span class="token operator">=</span> height  <span class="token comment" spellcheck="true"># 实例属性</span>    @property    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>width <span class="token operator">*</span> self<span class="token punctuation">.</span>height</code></pre></li></ul><p>  rect = Rect(800, 600)<br>  print(“面积为：”, rect.area)</p><pre><code>  运行结果：</code></pre><p>  面积为： 480000</p><pre><code>  **注：通过@property转换后的属性不能重新赋值。**#### 18.5 继承- 基本语法：  ```python  class ClassName(baseclasslist):      '''类的帮助信息'''      Statement</code></pre><p>  baseclasslist：用于指定要继承的父类，可以有多个，用“,”隔开。</p><ul><li><p>示例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fruit</span><span class="token punctuation">:</span>    color <span class="token operator">=</span> <span class="token string">"绿色"</span>    <span class="token keyword">def</span> <span class="token function">harvest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"水果是："</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">"的"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"水果已经收获"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"水果原来是："</span> <span class="token operator">+</span> Fruit<span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">"的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><p>  class Apple(Fruit):<br>      color = “红色”</p><pre><code>  def __init__(self):      print("我是苹果")</code></pre><p>  class Orange(Fruit):<br>      color = “橙色”</p><pre><code>  def __init__(self):      print("我是橘子")</code></pre><p>  apple = Apple()<br>  apple.harvest(apple.color)<br>  orange = Orange()<br>  orange.harvest(orange.color)</p><pre><code>  运行结果：  ```python  我是苹果  水果是：红色的  水果已经收获  水果原来是：绿色的  我是橘子  水果是：橙色的  水果已经收获  水果原来是：绿色的</code></pre><ul><li><p>方法重写：</p><p>在Orange类中重写<code>harves()</code>方法。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Orange</span><span class="token punctuation">(</span>Fruit<span class="token punctuation">)</span><span class="token punctuation">:</span>    color <span class="token operator">=</span> <span class="token string">"橙色"</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是橘子"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">harvest</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"水果是："</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">"的"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"橘子已经收获"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"水果原来是："</span> <span class="token operator">+</span> Fruit<span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">"的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：</p><pre><code>我是橘子水果是：橙色的橘子已经收获水果原来是：绿色的</code></pre></li><li><p>调用基类的<code>__init__()</code>方法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Fruit</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"绿色"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        Fruit<span class="token punctuation">.</span>color <span class="token operator">=</span> color    <span class="token keyword">def</span> <span class="token function">harvest</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"水果原来是："</span> <span class="token operator">+</span> Fruit<span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">"的"</span><span class="token punctuation">)</span></code></pre></li></ul><p>  class Apple(Fruit):<br>      def <strong>init</strong>(self):<br>          print(“我是苹果”)<br>          super().<strong>init</strong>()</p><p>  apple = Apple()<br>  apple.harvest()</p><pre><code>  运行结果：</code></pre><p>  我是苹果<br>  水果原来是：绿色的</p><pre><code>### 19.模块- 定义：一个拓展名为.py的文件就是一个模块，包含了一个完整的功能- 使用import语句导入模块  ```python  import modulename [as alias]</code></pre><ul><li>modulename：要导入的模块名</li><li>[as alias]：为模块起的别名</li></ul><ul><li><p>实例：创建两个模块，分别包含矩形和圆形的计算周长面积函数</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token triple-quoted-string string">"""@author: lemenk@Blog: blog.lemenk.top@software: PyCharm@file: rectangle.py@time: 2019/11/7 21:34@Desc: 计算矩形周长和面积"""</span></code></pre></li></ul><p>  def girth(width, height):<br>      “””功能：计算矩形周长<br>         参数 ：width（宽度），height（高度）<br>      “””<br>      return (width + height) * 2</p><p>  def area(width, height):<br>      “””功能：计算矩形面积<br>             参数 ：width（宽度），height（高度）<br>          “””<br>      return width * height</p><p>  if <strong>name</strong> == ‘<strong>main</strong>‘:<br>      print(area(10, 20))</p><pre><code>  ```python  #!/usr/bin/env python  # encoding: utf-8  """  @author: lemenk  @Blog: blog.lemenk.top  @software: PyCharm  @file: circular.py  @time: 2019/11/7 21:34  @Desc: 计算圆形周长和面积  """  import math  PI = math.pi  def girth(r):      """功能：计算圆形周长         参数 ：r（半径）      """      return round(2 * PI * r, 2)  def area(r):      """功能：计算圆形面积             参数 ：r（半径）          """      return round(PI * r * r, 2)  if __name__ == '__main__':      print(area(10))</code></pre><p>  测试代码：</p><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true">#!/usr/bin/env python</span>  <span class="token comment" spellcheck="true"># encoding: utf-8</span>  <span class="token triple-quoted-string string">"""  @author: lemenk  @Blog: blog.lemenk.top  @software: PyCharm  @file: computer.py  @time: 2019/11/7 21:46  @Desc: 调用rectangle.py和circular.py  """</span>  <span class="token keyword">import</span> rectangle <span class="token keyword">as</span> r  <span class="token keyword">import</span> circular <span class="token keyword">as</span> c  <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"圆形的周长为："</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>girth<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"矩形周长为："</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>girth<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>  运行结果：</p><pre><code>  圆形的周长为： 62.83  矩形周长为： 60</code></pre><p>  <strong>注：<code>if __name__ == '__main__'</code>代码块的必要性：</strong></p><p>  类似于Java的main方法，<code>__name__</code>是python的内置变量，用于指代当前模块。</p><p>  当模块A导入到模块B中时，若需要模块A中的某些代码不需要在B中执行时，可放在<code>if __name__ == '__main__':</code>内部。</p><ul><li><p>标准模块：</p><ul><li><p>random模块：用于生成随机函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>生成验证码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># encoding: utf-8</span><span class="token triple-quoted-string string">"""@author: lemenk@Blog: blog.lemenk.top@software: PyCharm@file: checkcode.py@time: 2019/11/7 22:33@Desc: 随机生成由数字和字母组成的4位验证码"""</span><span class="token keyword">import</span> random<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    checkcode <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        index <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> index <span class="token operator">!=</span> i <span class="token operator">and</span> index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> i<span class="token punctuation">:</span>            checkcode <span class="token operator">+=</span> chr<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> index <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>            checkcode <span class="token operator">+=</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            checkcode <span class="token operator">+=</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"验证码："</span><span class="token punctuation">,</span> checkcode<span class="token punctuation">)</span></code></pre></li><li><p>其他标准模块</p></li></ul></li></ul><h3 id="20-异常"><a href="#20-异常" class="headerlink" title="20.异常"></a>20.异常</h3><p>常用语法：</p><ul><li><p>try…except</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    block1<span class="token keyword">except</span> <span class="token punctuation">[</span>ExceptionName <span class="token punctuation">[</span><span class="token keyword">as</span> alias<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    block2</code></pre></li><li><p>try…except…else</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    block1<span class="token keyword">except</span> <span class="token punctuation">[</span>ExceptionName <span class="token punctuation">[</span><span class="token keyword">as</span> alias<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    block2<span class="token keyword">else</span><span class="token punctuation">:</span>    block3</code></pre></li><li><p>try…except…finally语句</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    block1<span class="token keyword">except</span> <span class="token punctuation">[</span>ExceptionName <span class="token punctuation">[</span><span class="token keyword">as</span> alias<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    block2<span class="token keyword">else</span><span class="token punctuation">:</span>    block3<span class="token keyword">finally</span><span class="token punctuation">:</span>    block4</code></pre></li><li><p>raise语句抛出</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> fun<span class="token punctuation">:</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入不小与3的数字："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"输入值出错"</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="21-文件"><a href="#21-文件" class="headerlink" title="21.文件"></a>21.文件</h3><ul><li><p>创建和打开文件：</p><ul><li><p>语法格式：</p><pre class=" language-python"><code class="language-python">file <span class="token operator">=</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">[</span><span class="token punctuation">,</span>mode<span class="token punctuation">[</span><span class="token punctuation">,</span>buffering<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>参数说明：</p><ul><li><p>file：被创建的文件对象</p></li><li><p>filename：要创建或者打开的文件路径</p></li><li><p>mode：可选参数，用于指定文件的打开方式</p><table><thead><tr><th>t</th><th align="left">文本模式 (默认)</th></tr></thead><tbody><tr><td>x</td><td align="left">写模式，新建一个文件，如果该文件已存在则会报错。</td></tr><tr><td>b</td><td align="left">二进制模式。</td></tr><tr><td>+</td><td align="left">打开一个文件进行更新(可读可写)。</td></tr><tr><td>r</td><td align="left">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td align="left">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是<strong>默认模式</strong>。一般用于非文本文件如图片等。</td></tr><tr><td>r+</td><td align="left">打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td align="left">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td></tr><tr><td>w</td><td align="left">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td align="left">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>w+</td><td align="left">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td align="left">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td></tr><tr><td>a</td><td align="left">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td align="left">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td align="left">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>注：以r开头的参数需要文件必须存在，否则会出错。以w开头的参数，若文件不存在，则会创建文件；若存在，则会覆盖该文件。以a开头的参数，会对已存在的文件追加内容。</p></li><li><p>buffering：可选参数，用于指定读写文件的缓冲模式，0表示不缓存；1表示缓存；如果大于1，则表示缓冲区的大小。默认为1。</p></li><li><p>encoding: 一般使用utf8</p></li><li><p>errors: 报错级别</p></li><li><p>newline: 区分换行符</p></li><li><p>closefd: 传入的file参数类型</p></li></ul></li><li><p>例子：</p><ul><li><p>1.创建一个文件，并存储一些信息。</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""创建一个不存在的文件"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"学习记录"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 正则表达式</span>file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'msg.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 在此目录下创建msg.txt</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n 即将显示……\n"</span><span class="token punctuation">)</span></code></pre><p>运行结果：在此目录下创建了msg.txt文件，并打印以下语句：</p><pre><code> ========== 学习记录 ========== 即将显示……</code></pre></li><li><p>2.以二进制形式打开文件</p><pre class=" language-python"><code class="language-python">file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'p.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span></code></pre></li><li><p>3.打开文件时指定编码方式</p><pre class=" language-python"><code class="language-python">file <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'e.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span></code></pre></li></ul></li></ul></li><li><p>关闭文件：</p><pre class=" language-python"><code class="language-python">file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>打开文件时使用with语句：使用with语句，可以避免在打开文件时出现异常导致文件不能被即时关闭。</p><ul><li><p>语法格式：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> expression <span class="token keyword">as</span> target<span class="token punctuation">:</span>    <span class="token keyword">with</span><span class="token operator">-</span>body</code></pre></li><li><p>示例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"学习记录"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 正则表达式</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'msg.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 在此目录下创建msg.txt</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n 即将显示……\n"</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>写入文件内容</p><ul><li><p>语法格式：</p><pre class=" language-python"><code class="language-python">file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>string<span class="token punctuation">)</span></code></pre></li><li><p>例子：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"学习记录"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 正则表达式</span>string <span class="token operator">=</span> <span class="token string">"今天学习了python的文件操作"</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'msg.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>     file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>string <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n 在文件中写入了内容……\n"</span><span class="token punctuation">)</span>file<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>读取文件</p><ul><li><p>语法格式：</p><pre class=" language-python"><code class="language-python">file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>size：可选参数，用于指定要读取的字符个数，省略则一次性读取所有内容</p></li><li><p>例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'msg.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    string <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span></code></pre><p>注：read(size)方法读取文件时时从文件头开始读的。</p></li><li><p>使用seek()方法移动文件指针</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'msg.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    file<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    string <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span></code></pre><p><strong>注：<code>seek()</code>方法中文占两个字符，数字和英文占一个字符。和<code>read()</code>不同</strong></p></li></ul></li><li><p>其他方法：</p><ul><li>file.flush()：刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</li><li>file.readline([size])：读取整行，包括 “\n” 字符。</li><li>file.readlines([sizeint])：读取所有行并返回列表，若给定sizeint&gt;0，返回总和大约为sizeint字节的行, 实际读取值可能比 sizeint 较大, 因为需要填充缓冲区。</li></ul></li></ul><h3 id="22-数据库"><a href="#22-数据库" class="headerlink" title="22.数据库"></a>22.数据库</h3><ul><li><p>使用mysql-connector 驱动连接mysql数据库</p><ul><li><p>安装<strong>mysql-connector</strong>驱动</p><pre><code>pip install mysql-connector</code></pre></li><li><p>创建数据库连接：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> mysql<span class="token punctuation">.</span>connectormydb <span class="token operator">=</span> mysql<span class="token punctuation">.</span>connector<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>  <span class="token comment" spellcheck="true"># 创建连接对象mydb</span>  host<span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true"># 数据库主机地址</span>  user<span class="token operator">=</span><span class="token string">"yourusername"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 数据库用户名</span>  passwd<span class="token operator">=</span><span class="token string">"yourpassword"</span>   <span class="token comment" spellcheck="true"># 数据库密码</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>mydb<span class="token punctuation">)</span></code></pre><p>连接对象有如下几个方法：</p><ul><li>close()：关闭数据库连接</li><li>commit()：提交事务</li><li>rollback()：回滚事务</li><li>cursor()：获取游标对象，操作数据库</li></ul></li><li><p>游标对象：代表数据库中的游标，用于指示抓取数据操作的上下文。主要提供执行SQL语句、调用存储过程、获取查询结果等方法。</p><ul><li>callproc(name[,params])：使用指定的参数调用指定的数据库过程；</li><li>close()：关闭当前游标，关闭后，这个游标就不能使用了；</li><li>execute(oper[,params])：执行一个SQL操作；</li><li>executemany(oper,pseq)：执行SQL操作多次，每次用序列中的一组参数；</li><li>fetchone()：以序列的方式取回查询结果中的下一行，如果没有更多的行，就返回None；</li><li>fetchmany([size])：取回查询时结果中的多行，其中参数size的值默认为arraysize；</li><li>fetchall()：已序列的方式取回余下的行；</li><li>nextset()：跳到下一个结果集，这个方法是可选的；</li><li>setinputsizes(sizes)：用于为参数预定义内存区域；</li><li>setoutputsize(size[,col])：围裙会大量数据而设置缓冲区长度。</li></ul><p>创建游标对象：</p><pre class=" language-python"><code class="language-python">mycursor <span class="token operator">=</span> mydb<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><ul><li><p>其他语句：</p><ul><li><p>查看数据库列表：</p><pre class=" language-python"><code class="language-python">mycursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SHOW DATABASES"</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> mycursor<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre></li><li><p>创建数据库：</p><pre class=" language-python"><code class="language-python">mycursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"CREATE DATABASE DBName"</span><span class="token punctuation">)</span></code></pre></li><li><p>创建数据表sites：</p><pre class=" language-python"><code class="language-python">mycursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"CREATE TABLE sites (name VARCHAR(255), url VARCHAR(255))"</span><span class="token punctuation">)</span></code></pre></li><li><p>给已经存在的sites表添加主键：</p><pre class=" language-python"><code class="language-python">mycursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"ALTER TABLE sites ADD COLUMN id INT AUTO_INCREMENT PRIMARY KEY"</span><span class="token punctuation">)</span></code></pre></li><li><p>向表中添加数据：</p><pre class=" language-python"><code class="language-python">sql <span class="token operator">=</span> <span class="token string">"INSERT INTO sites (name, url) VALUES (%s, %s)"</span>val <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"百度"</span><span class="token punctuation">,</span> <span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>mycursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> val<span class="token punctuation">)</span>mydb<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 数据表内容有更新，必须使用到该语句</span></code></pre></li><li><p>向表中批量添加数据，第二个参数为元组列表：</p><pre class=" language-python"><code class="language-python">sql <span class="token operator">=</span> <span class="token string">"INSERT INTO sites (name, url) VALUES (%s, %s)"</span>val <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'https://www.google.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'Github'</span><span class="token punctuation">,</span> <span class="token string">'https://www.github.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'https://www.taobao.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token string">'stackoverflow'</span><span class="token punctuation">,</span> <span class="token string">'https://www.stackoverflow.com/'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>mycursor<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> val<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#批量操作</span>mydb<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>查询数据：</p><ul><li><p>查询下一条记录：<code>fetchone()</code></p><pre class=" language-python"><code class="language-python">mycursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM sites"</span><span class="token punctuation">)</span>my_result <span class="token operator">=</span> mycursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># fetchone() 获取结果集中下一条记录</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre></li><li><p>查询表中所有记录：<code>fetchall()</code></p><pre class=" language-python"><code class="language-python">mycursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM sites"</span><span class="token punctuation">)</span>my_result <span class="token operator">=</span> mycursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># fetchall() 获取所有记录</span><span class="token keyword">for</span> x <span class="token keyword">in</span> my_result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre></li><li><p>查询指定数量的记录：<code>fetchmany()</code></p><pre class=" language-python"><code class="language-python">mycursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"SELECT * FROM sites"</span><span class="token punctuation">)</span>my_result <span class="token operator">=</span> mycursor<span class="token punctuation">.</span>fetchmany<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># fetchmany() 获取指定数量的记录</span><span class="token keyword">for</span> x <span class="token keyword">in</span> my_result<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre></li></ul></li></ul></li></ul><ul><li><p>PyMySQL 驱动连接数据库：</p><ul><li><p>PyMySQL 安装：</p><pre class=" language-python"><code class="language-python">$ pip3 install PyMySQL</code></pre></li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2019/09/08/zheng-ze-biao-da-shi/"/>
      <url>/2019/09/08/zheng-ze-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="正则表达式学习笔记"><a href="#正则表达式学习笔记" class="headerlink" title="正则表达式学习笔记"></a>正则表达式学习笔记</h3><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程（二）之线程池</title>
      <link href="/2019/08/19/duo-xian-cheng-er-zhi-xian-cheng-chi/"/>
      <url>/2019/08/19/duo-xian-cheng-er-zhi-xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<p><strong>JAVA——多线程之线程池</strong></p><a id="more"></a><h3 id="一、线程池简介"><a href="#一、线程池简介" class="headerlink" title="一、线程池简介"></a>一、线程池简介</h3><ol><li><p>概念：线程池是程序在运行初期就首先创建了一些线程，这些线程的集合叫做线程池。使用线程池可以很好地提高性能，线程池在系统启动时即创建大量空闲的线程，程序将一个任务传给线程池，线程池就会启动一条线程来执行这个任务，执行结束以后，该线程并不会死亡，而是再次返回线程池中成为空闲状态，等待执行下一个任务。</p></li><li><p>工作机制：</p><ol><li><p>在线程池的编程模式下，任务是提交给整个线程池，而不是直接提交给某个线程，线程池在拿到任务后，就在内部寻找是否有空闲的线程，如果有，则将任务交给某个空闲的线程。</p></li><li><p>一个线程同时只能执行一个任务，但可以同时向一个线程池提交多个任务。</p><p><img src="http://img.cdn.lemenk.top/20190809200646357.png"></p></li></ol></li><li><p>使用线程池的原因：</p><p>多线程运行时，系统需要不断地启动和关闭新的线程，资源消耗比较大，并且会产生线程切换时的危险。</p></li><li><p><strong>总结：</strong></p><ol><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ol></li></ol><h3 id="二、线程池的使用"><a href="#二、线程池的使用" class="headerlink" title="二、线程池的使用"></a>二、线程池的使用</h3><h4 id="一、Exectutor"><a href="#一、Exectutor" class="headerlink" title="一、Exectutor"></a>一、Exectutor</h4><p>Exectutor是Java线程池的顶级接口。</p><p><img src="http://img.cdn.lemenk.top/16015500-4dc0d547170f70db.png">Executor类和接口示意图</p><p>Executor是一个接口，它是Executor框架的基础，它将任务的提交与任务的执行分离开来。</p><p>ThreadPoolExecutor是线程池的核心实现类，用来执行被提交的任务。</p><p>ScheduledThreadPoolExecutor是一个实现类，可以在给定的延迟后运行命令，或者定期执行命令。ScheduledThreadPoolExecutor比Timer更灵活，功能更强大。</p><p>Future接口和实现Future接口的FutureTask类，代表异步计算的结果。</p><p>Runnable接口和Callable接口的实现类，都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行。</p><h4 id="二、ThreadPoolExecutor"><a href="#二、ThreadPoolExecutor" class="headerlink" title="二、ThreadPoolExecutor"></a>二、ThreadPoolExecutor</h4><p>ThreadPoolExecutor通常使用工厂类Executors来创建。Executors可以创建3种类型的ThreadPoolExecutor：SingleThreadExecutor、FixedThreadPool和CachedThreadPool。</p><p>它的构造方法有下面四种：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>             Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>             threadFactory<span class="token punctuation">,</span> defaultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> workQueue<span class="token punctuation">,</span>             Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>                null <span class="token operator">:</span>                AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>主要参数：</p><ul><li><strong>corePoolSize</strong>（必需）：核心线程数。默认情况下，核心线程会一直存活，但是当将allowCoreThreadTimeout设置为true时，核心线程也会超时回收。</li><li><strong>maximumPoolSize</strong>（必需）：线程池所能容纳的最大线程数。当活跃线程数达到该数值后，后续的新任务将会阻塞。</li><li><strong>keepAliveTime</strong>（必需）：线程闲置超时时长。如果超过该时长，非核心线程就会被回收。如果将allowCoreThreadTimeout设置为true时，核心线程也会超时回收。</li><li><strong>unit</strong>（必需）：指定keepAliveTime参数的时间单位。常用的有：TimeUnit.MILLISECONDS（毫秒）、TimeUnit.SECONDS（秒）、TimeUnit.MINUTES（分）。</li><li><strong>workQueue</strong>（必需）：任务队列。通过线程池的execute()方法提交的Runnable对象将存储在该参数中。其采用阻塞队列实现。</li><li><strong>threadFactory</strong>（可选）：线程工厂。用于指定为线程池创建新线程的方式。</li><li><strong>handler</strong>（可选）：拒绝策略。当达到最大线程数时需要执行的饱和策略。</li></ul><h4 id="三、FixedThreadPool。"><a href="#三、FixedThreadPool。" class="headerlink" title="三、FixedThreadPool。"></a>三、<strong>FixedThreadPool</strong>。</h4><p>下面是Executors提供的，创建使用固定线程数的FixedThreadPool的API。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> ThreadFactory  threadFactoty<span class="token punctuation">)</span></code></pre><p>FixedThreadPool适用于为了满足资源管理的需求，而需要限制当前线程数量的应用场景，它适用于负载比较重的服务器。</p><h4 id="四、SingleThreadExecutor。"><a href="#四、SingleThreadExecutor。" class="headerlink" title="四、SingleThreadExecutor。"></a>四、<strong>SingleThreadExecutor</strong>。</h4><p>下面是Executors提供的，创建使用单个线程的SingleThreadExecutor的API。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span>ThreadFactory threadFactory<span class="token punctuation">)</span></code></pre><p>SingleThreadExecutor适用于需要保证顺序地执行各个任务；并且在任意时间点，不会有多个线程是活动的应用场景。</p><h4 id="五、CachedThreadPool。"><a href="#五、CachedThreadPool。" class="headerlink" title="五、CachedThreadPool。"></a>五、<strong>CachedThreadPool</strong>。</h4><p>下面是Executors提供的，创建一个会根据需要创建新线程的CachedThreadPool的API。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span>ThreadFactory threadFactory<span class="token punctuation">)</span></code></pre><p>CachedThreadPool是大小无界的线程池，适用于执行很多的短期异步任务的小程序，或者是负载较轻的服务器</p><h4 id="六、ScheduledThreadPoolExecutor"><a href="#六、ScheduledThreadPoolExecutor" class="headerlink" title="六、ScheduledThreadPoolExecutor"></a>六、ScheduledThreadPoolExecutor</h4><p>ScheduledThreadPoolExecutor：通常用来创建定时线程任务的线程池，例如定时轮询数据库中的表的数据</p><p>ScheduledThreadPoolExecutor通常使用工厂类Executors来创建。Executors可以创建2种类型的ScheduledThreadPoolExecutor，如下。</p><h5 id="1、ScheduledThreadPoolExecutor"><a href="#1、ScheduledThreadPoolExecutor" class="headerlink" title="1、ScheduledThreadPoolExecutor"></a>1、ScheduledThreadPoolExecutor</h5><p>下面是工厂类Executors提供的，创建固定个数线程的ScheduledThreadPoolExecutor的API。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>ThreadFactory threadFactory<span class="token punctuation">)</span></code></pre><p>ScheduledThreadPoolExecutor适用于需要多个后台线程执行周期任务，同时为了满足资源管理的需求而需要限制后台线程的数量的应用场景。</p><h5 id="2、SingleThreadScheduledExecutor"><a href="#2、SingleThreadScheduledExecutor" class="headerlink" title="2、SingleThreadScheduledExecutor"></a>2、SingleThreadScheduledExecutor</h5><p>下面是Executors提供的，创建单个线程的SingleThreadScheduledExecutor的API。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span>ThreadFactory threadFactory<span class="token punctuation">)</span></code></pre><p>SingleThreadScheduledExecutor适用于需要单个后台线程执行周期任务，同时需要保证顺序地执行各个任务的应用场景。</p><h4 id="七、Future接口"><a href="#七、Future接口" class="headerlink" title="七、Future接口"></a>七、Future接口</h4><p>Future接口和实现Future接口的FutureTask类用来表示异步计算的结果。当我们把Runnable接口或Callable接口的实现类提交（submit）给ThreadPoolExecutor或ScheduledThreadPoolExecutor时，ThreadPoolExecutor或ScheduledThreadPoolExecutor会向我们返回一个FutureTask对象。下面是对应的API。</p><pre class=" language-java"><code class="language-java">Future <span class="token function">submit</span><span class="token punctuation">(</span>Callable task<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">Future <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span></code></pre><pre class=" language-java"><code class="language-java">Future<span class="token operator">&lt;</span><span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span></code></pre><h4 id="八、Runnable接口和Callable接口"><a href="#八、Runnable接口和Callable接口" class="headerlink" title="八、Runnable接口和Callable接口"></a>八、Runnable接口和Callable接口</h4><p>Runnable接口和Callable接口的实现类，都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行。它们之间的区别是Runnable不会返回结果，而Callable可以返回结果。除了可以自己创建实现Callable接口的对象外，还可以使用工厂类Executors来把一个Runnable包装成一个Callable。下面是Executors提供的，把一个Runnable包装成一个Callable的API。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Callable<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">callable</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">)</span> </code></pre><p>下面是Executors提供的，把一个Runnable和一个待返回的结果包装成一个Callable的API。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">callable</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span> </code></pre><p>提交给ThreadPoolExecutor或ScheduledThreadPoolExecutor执行时，submit（…）会向我们返回一个FutureTask对象。我们可以执行FutureTask.get()方法来等待任务执行完成。当任务成功完成后FutureTask.get()将返回该任务的结果。例如，如果提交的是对象Callable1，FutureTask.get()方法将返回null；如果提交的是对象Callable2，FutureTask.get()方法将返回result对象。</p><p>线程池的使用流程如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建线程池</span>Executor threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>CORE_POOL_SIZE<span class="token punctuation">,</span>MAXIMUM_POOL_SIZE<span class="token punctuation">,</span>KEEP_ALIVE<span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>sPoolWorkQueue<span class="token punctuation">,</span>sThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向线程池提交任务</span>threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment" spellcheck="true">// 线程执行的任务</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 关闭线程池</span>threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程池的状态为SHUTDOWN，然后中断所有没有正在执行任务的线程</span>threadPool<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置线程池的状态为 STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表</span></code></pre><p>三、</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程（一）</title>
      <link href="/2019/08/14/duo-xian-cheng-yi/"/>
      <url>/2019/08/14/duo-xian-cheng-yi/</url>
      
        <content type="html"><![CDATA[<p><strong>JAVA——多线程基础</strong></p><a id="more"></a><h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><ol><li><p>程序线程进程协程</p><ol><li>程序：程序是通过某些编程语言编写的一组计算机能识别和执行的指令，运行于电子计算机上，满足人们某种需求的信息化工具。在Windows中就是.exe文件。程序只占用磁盘空间。</li><li>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是<strong>系统进行资源分配和调度的基本单位，是操作系统结构的基础</strong>。在早期面向进程设计的计算机结构中，进程是程序的基本执行实体；在当代面向线程设计的计算机结构中，进程是线程的容器。程序是<strong>指令</strong>、<strong>数据</strong>及其<strong>组织形式</strong>的描述，<strong>进程是程序的实体</strong>。</li><li>线程：在一个进程内部，要同时干多件事情，就需要同时运行多个子任务，我们把进程内的这些子任务叫做线程。线程是程序执行流的最小单元。一个标准的线程由当前的线程ID、当前指令指针、寄存器和堆栈组成。同一个进程中的多个线程之间可以并发执行。</li><li>协程是一种用户态的<strong>轻量级线程</strong>，协程的调度完全由<strong>用户控制</strong>（进程和线程都是由CPU内核进行调度）。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</li></ol></li><li><p>用户态和内核态</p><ol><li><p>概念：</p><ul><li><p>内核态：CPU可以访问内存的<strong>所有数据</strong>，包括外围设备，例如硬盘，网卡，CPU也可以将自己从一个程序切换到另一个程序。</p><p><strong>当一个进程执行系统调用而陷入内核代码中执行时，我们就称进程处于内核运行态（或简称为内核态）。</strong></p></li><li><p>用户态：只能<strong>受限的访问内存</strong>，且不允许访问外围设备，占用CPU的能力被剥夺，CPU资源可以被其他程序获取。</p><p><strong>当进程在执行用户自己的代码时，则称其处于用户运行态（用户态）。</strong></p></li></ul></li><li><p>为什么要有用户态和内核态？</p><ul><li>由于需要限制不同的程序之间的访问能力, 防止他们获取别的程序的内存数据, 或者获取外围设备的数据。</li></ul></li><li><p>用户态与内核态的切换</p><ul><li><strong>系统调用</strong>：用户态进程主动要求切换到内核态的一种方式，用户态进程通过系统调用申请使用操作系统提供的服务程序完成工作。</li><li><strong>异常</strong>：当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，这时会触发由当前运行进程切换到处理此异常的内核相关程序中，也就转到了内核态，比如缺页异常。</li><li><strong>外围设备的中断</strong>：当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会暂停执行下一条即将要执行的指令转而去执行与中断信号对应的处理程序，如果先前执行的指令是用户态下的程序，那么这个转换的过程自然也就发生了由用户态到内核态的切换。比如硬盘读写操作完成，系统会切换到硬盘读写的中断处理程序中执行后续操作等。</li></ul></li></ol></li><li><p>并发性（concurrency）和并行性（parallel）</p><ul><li>并行是指在同一时刻，有多条指令在多个处理器上同时运行。</li><li>并发指的是在同一时刻只能有一条指令执行，即每个指令以时间片为单位来执行。</li></ul></li><li><p>线程生命周期</p><ul><li><p>New(初始化状态)：在执行new语句之后就新建了一个线程。</p></li><li><p>Runnable(可运行/运行状态)：start()方法调用后就处于可运行态</p></li><li><p>Blocked(阻塞状态)：通过synchronized使线程阻塞</p></li><li><p>Waiting(无时间限制的等待状态)：</p><p><code>Object.wait()</code>方法、<code>Thread.join()</code>方法、<code>LockSupport.park()</code>方法都可以使线程从Runnable状态到waiting状态</p></li><li><p>Timed_Waiting(有时间限制的等待状态)：<code>Object.wait(long timeout)</code> 、<code>Thread.join(long millis)</code> 、<code>Thread.sleep(long millis)</code>、<code>LockSupport.parkUntil(long deadline)</code>都会使线程从Runnable状态到waiting状态。</p></li><li><p>Terminated(终止状态)：<code>interrupt()</code>中断线程</p><img src="http://img.cdn.lemenk.top/20180720141305449.png"></li></ul></li><li><p>线程的优先级</p><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p><p>Java 线程的优先级是一个整数，其取值范围是 1 （<code>Thread.MIN_PRIORITY</code> ） - 10 （<code>Thread.MAX_PRIORITY</code> ）。</p><p>默认情况下，每一个线程都会分配一个优先级 <code>NORM_PRIORITY（5）</code>。</p><p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，依赖于平台。</p></li><li><p>创建线程的方法：</p><ol><li>通过实现 Runnable 接口；</li><li>通过继承 Thread 类本身；</li><li>通过 Callable 和 Future 创建线程。</li></ol></li></ol><h2 id="二、创建线程"><a href="#二、创建线程" class="headerlink" title="二、创建线程"></a>二、创建线程</h2><ol><li><p>通过实现Runnable接口来创建线程:</p><p>Runnable接口中包含了<code>run()</code>抽象方法，因此在实现Runnable接口时必须重写<code>run()</code>方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>           <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>常用构造方法：<code>Thread(Runnable target, String name)</code>，其中target为启动此线程时调用其run方法的对象。 如果null ，则调用此线程的run方法。 name为新线程的名称 。</p><p>代码实现：</p><p>重写run()方法，开启两个线程，并打印出线程名字。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String ID<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ThreadTest</span><span class="token punctuation">(</span>String ID<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ID <span class="token operator">+</span> <span class="token string">" is running "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadTest h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread demo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadTest h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread demo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>        demo1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重写run()和start()方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RunnableDemo R1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunnableDemo</span><span class="token punctuation">(</span> <span class="token string">"Thread-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        R1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RunnableDemo R2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunnableDemo</span><span class="token punctuation">(</span> <span class="token string">"Thread-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        R2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">RunnableDemo</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Thread t<span class="token punctuation">;</span>    <span class="token keyword">private</span> String threadName<span class="token punctuation">;</span>    <span class="token function">RunnableDemo</span><span class="token punctuation">(</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threadName <span class="token operator">=</span> name<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creating "</span> <span class="token operator">+</span>  threadName <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Running "</span> <span class="token operator">+</span>  threadName <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread: "</span> <span class="token operator">+</span> threadName <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 让线程睡眠一会</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread "</span> <span class="token operator">+</span>  threadName <span class="token operator">+</span> <span class="token string">" interrupted."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread "</span> <span class="token operator">+</span>  threadName <span class="token operator">+</span> <span class="token string">" exiting."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Starting "</span> <span class="token operator">+</span>  threadName <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><ol start="2"><li><p>通过继承Thread来创建线程：本质上也是实现了 Runnable 接口的一个实例。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*省略*/</span><span class="token punctuation">}</span></code></pre><p>并且Thread类已经重写了接口的<code>run()</code>方法，实际情况时需要重写run()方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String ID<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ThreadTest</span><span class="token punctuation">(</span>String ID<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ID <span class="token operator">=</span> ID<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ID <span class="token operator">+</span> <span class="token string">" is running "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadTest h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token string">"线程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread demo1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadTest h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest</span><span class="token punctuation">(</span><span class="token string">"线程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread demo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>        demo1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demo2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Thread类的一些重要方法：</p><table><thead><tr><th>方法及其描述</th></tr></thead><tbody><tr><td><small>public void start()<br>使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</small></td></tr><tr><td><small><strong>public void run()</strong><br>如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</small></td></tr><tr><td><small><strong>public final void setName(String name)</strong><br>改变线程名称，使之与参数 name 相同。</small></td></tr><tr><td><small><strong>public final void setPriority(int priority)</strong><br> 更改线程的优先级。</small></td></tr><tr><td><small><strong>public final void setDaemon(boolean on)</strong><br>将该线程标记为守护线程或用户线程。</small></td></tr><tr><td><small><strong>public final void join(long millisec)</strong><br>等待该线程终止的时间最长为 millis 毫秒。</small></td></tr><tr><td><small><strong>public void interrupt()</strong><br>中断线程。</small></td></tr><tr><td><small><strong>public final boolean isAlive()</strong><br>测试线程是否处于活动状态。</small></td></tr></tbody></table></li></ol><ol start="3"><li><p><strong>通过实现Callable接口通过FutureTask包装器来创建Thread线程</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> top<span class="token punctuation">.</span>lemenk<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span></code></pre></li></ol><p>   public class ThreadTest4 implements Callable<integer> {<br>       public static void main(String[] args)<br>       {<br>           ThreadTest4 tt = new ThreadTest4();<br>           FutureTask<integer> ft = new FutureTask&lt;&gt;(tt);<br>           for(int i = 0;i &lt; 100;i++)<br>           {<br>               System.out.println(Thread.currentThread().getName()+” 的循环变量i的值”+i);<br>               if(i==20)<br>               {<br>                   new Thread(ft,”有返回值的线程”).start();<br>               }<br>           }<br>           try<br>           {<br>               System.out.println(“子线程的返回值：”+ft.get());<br>           } catch (InterruptedException e)<br>           {<br>               e.printStackTrace();<br>           } catch (ExecutionException e)<br>           {<br>               e.printStackTrace();<br>           }</integer></integer></p><pre><code>   }   @Override   public Integer call() throws Exception   {       int i = 0;       for(;i&lt;100;i++)       {           System.out.println(Thread.currentThread().getName()+" "+i);       }       return i;   }</code></pre><p>   }</p><pre><code>**实现Runnable和继承Thread的区别:**1. Runnable接口的话，可以避免单继承的局限性，具有较强的健壮性。2. Runnable可以实现资源的共享，同时处理同一资源。3. Thread类的线程间都是独立运行的，资源不共享。4. 继承Thread类不再被其他类继承（Java不存在多继承）采用实现Runnable，Callable接口优缺点：1. 接口可以多继承，继承了Runnable接口还能继承其他接口2. 适合多个相同线程来处理同一份资源的情况，3. 缺点是，编程稍微复杂，访问当前线程必须使用`Thread.currentThread()`   采用继承Thread类优缺点：   1，编写简单，访问当前线程可直接用this   2，缺点是，不能再继承其他类   综上，建议采用实现Runnable接口的方法来创建和启动线程</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM知识笔记一</title>
      <link href="/2019/08/10/jvm-zhi-shi-bi-ji-yi/"/>
      <url>/2019/08/10/jvm-zhi-shi-bi-ji-yi/</url>
      
        <content type="html"><![CDATA[<p><strong>JVM学习笔记</strong></p><a id="more"></a><h4 id="一、JVM模型概述"><a href="#一、JVM模型概述" class="headerlink" title="一、JVM模型概述"></a>一、JVM模型概述</h4><p>​        JVM是Java Virtual Machine(Java虚拟机)的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><p>​        引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言[编译程序]只需生成在Java虚拟机上运行的目标代码(字节码)，就可以在多种平台上不加修改地运行。</p><p>Java程序从源码到运行一般有下面3步：</p><p><img src="JVM%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E4%B8%80%5Cjvmp1.jpg" alt=""></p><p>从.class文件–&gt;机器码这一步时，JVM类加载器加载字节码文件，然后解释器逐一解释执行。这种方式比较慢，后面引进了JIT(Just In Time Compiler 即时编译器)，将“热点代码”编译成与本地平台相关的机器码，并进行各种层次的优化，提高效率。</p><p><img src="JVM%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0%E4%B8%80%5Cjvmp2.png" alt=""></p><p>在JDK8的版本中，方法区被移除，取而代之的是metaspace（元数据空间）。</p><ul><li>程序计数器：它是一块较小的地址空间，它可以看作是当前线程所执行的字节码的行号指示器。是线程私有的，每个线程拥有一个程序计数器。为了使线程切换后可以回到正确的位置继续执行。</li><li>Java虚拟机栈：线程私有，生命周期与线程相同。方法在执行时都会创建一个栈帧，用于存放局部变量表、方法出口等信息。局部变量表存放基本数据类型和对象引用。方法调用直至结束就对应着一个栈帧在虚拟机中入栈和出栈。</li><li>本地方法栈：与虚拟机栈相似，但是本地方法栈是为虚拟机所用到的Native方法，而虚拟机栈是为虚拟机执行Java方法服务。</li><li>Java堆：他是Java虚拟机所管理的内存中最大的一块，被所有线程所共享，用来存放对象实例。所有的对象实例和数组都在堆上分配。java堆在逻辑上连续即可。</li><li>方法区：线程共享，用来存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试问题积累一</title>
      <link href="/2019/07/20/mian-shi-wen-ti-ji-lei-yi/"/>
      <url>/2019/07/20/mian-shi-wen-ti-ji-lei-yi/</url>
      
        <content type="html"><![CDATA[<p><strong>面试常问之类与接口</strong></p><a id="more"></a><ol><li><p>类的实例化顺序</p><p>父类静态成员–&gt;父类静态初始化块–&gt;子类静态成员–&gt;子类静态初始化块–&gt;父类实例成员–&gt;实例初始化块–&gt;父类构造方法–&gt;子类实例成员–&gt;子类实例初始化块–&gt;子类构造方法即：先静态方法，再构造方法，每个又是先父类后子类</p></li><li><p>抽象类和接口</p><ol><li><p>抽象类：即用abstract修饰的类。</p><ul><li><p>抽象类不能有对象，不能实例化。即不能用new</p></li><li><p>包含抽象方法的类一定是抽象类，而抽象类不一定有抽象方法。</p></li><li><p>抽象方法中不能有方法体，只是对方法的定义。</p></li><li><p>抽象类中的抽象方法必须在子类中被重写</p></li><li><p>抽象类的子类必须重写父类所有的抽象方法，否则必须也是抽象类。</p></li><li><p>抽象方法不能是静态的，即不能用<code>static</code>来修饰</p></li><li><p>子类实现方法必须含有相同的或者耕地的访问级别(public-&gt;protected-&gt;private)。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"普通方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抽象方法</span>    <span class="token comment" spellcheck="true">//public abstract static void move();  //抽象方法不能是静态方法</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可以不重写普通方法</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//重写父类的抽象方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol></li></ol><pre><code>  - 关于构造函数    - 如果在父类中显示的写了**有参数的构造函数**，在子类继承就必须写一个构造函数来调用父类的构造函数；      ```java      abstract class A {//抽象类          public A(int a){              System.out.println("有参构造方法");          }      }      class B extends A{          B(int a){              super(a);//显示调用父类构造方法          }      }      ```    - 如果父类中有无参数的构造函数，在子类中可以不显式的写父类的构造函数，Java会自动调用没有参数的构造函数。      ```java      abstract class A {          public A(){}//无参构造      }      class B extends A{          B(){              //super();//可以省略不写，Java会自动调用super()      }      ```</code></pre><ol start="2"><li><p>接口Interface</p><ul><li><p>定义接口时用Interface关键字来声明，一般一个接口为一个Java文件</p></li><li><p>接口中定义的变量和方法都包含默认的修饰符</p><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义全局常量</span>    <span class="token comment" spellcheck="true">//public static final int ID = 1; </span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义抽象方法</span>    <span class="token comment" spellcheck="true">//public abstract void run();</span>    <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>接口中的方法都是抽象方法，因此不能通过实例化对象来调用接口中的方法</p></li><li><p>当一个类为抽象类时，则实现接口中的部分方法即可，否则必须实现所有方法。</p></li><li><p>一个类可以通过<code>implements</code>关键字实现多个接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Bird</span> <span class="token keyword">implements</span> <span class="token class-name">Fly</span><span class="token punctuation">,</span>Run<span class="token punctuation">{</span>    ……<span class="token punctuation">}</span></code></pre></li></ul></li></ol><pre><code>  - 接口可以继承自另一个接口，或多个接口  - 一个类在继承另一个类的同时还可以实现接口，但先继承后实现    ```java    class Dog extends Canidea implements Animal{        …………    }    ```  - Java8新特性——接口中可以定义方法体    1. 定义静态方法：在接口中定义的静态方法，不是抽象的，具体实现的，可以直接使用接口名称调用。       ```java       public interface Test{           public static void method() {               /**                * 1、定义一个静态的带有方法体的方法                * 2、接口不能创建对象，调用静态方法不需要对象                * 3、接口名调用                */               System.out.println("接口中静态方法");           }       ```       ```java       public static void main(String[] args ) {         //接口名称，直接调用---TestMethod（接口名称）           TestMethod.method();       }       ```    2. 定义普通方法：在接口可以定义非抽象的普通方法，可以使用关键字default       ```java       //定义接口中默认方法       /**         * 不同于静态方法，默认方法是一个非静态方法         * 对于非静态方法，只能通过对象进行调用         * 但是接口是不能创建对象的名故而我们需要子类来实现接口       */       public default void  methodDefault(){           System.out.println("默认方法");       }       ```       ```java       //使用子类对象，调用接口中的默认方法       Inter8Impl inter8 = new Inter8Impl();       inter8.methodDefault();       //使用多态的特点，接口指向自己的实现类，调用对应的方法       TestMethod i88=new Inter8Impl();       i88.methodDefault();       ```</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客网-剑指offer</title>
      <link href="/2019/07/16/niu-ke-wang-jian-zhi-offer/"/>
      <url>/2019/07/16/niu-ke-wang-jian-zhi-offer/</url>
      
        <content type="html"><![CDATA[<p><strong>牛客网-剑指offer学习笔记</strong></p><a id="more"></a><h5 id="一-、二维数组中的查找"><a href="#一-、二维数组中的查找" class="headerlink" title="一 、二维数组中的查找"></a>一 、二维数组中的查找</h5><p>1、题目描述：<a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=11154&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">链接</a></p><p>​        在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>时间限制：1秒 空间限制：32768K</p><p>2、思路分析：</p><p>题中所述，每行从左到右递增的顺序排序，每列从上到下递增的顺序排序，因此可以得到二维数组中每行的最后一个数字必是该行最大数字。若要判断该元素是否存在在二位数组中，只要判断该元素是否小于某一行的最后一个元素。即：对于此二维数组来说，只用判断target是否小于每一行的最后一个数字即可判断target是否存在于该二维数组中。</p><img src="http://img.cdn.lemenk.top/Q1p1.png"><img src="http://img.cdn.lemenk.top/Q1p2.png"><p>若要查找target=22，则判断target&lt;=行内最大元素即可。</p><p>3、代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">Find</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>y<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>x<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>提交结果：</p><img src="http://img.cdn.lemenk.top/Q1p3.png"><h5 id="二、替换空格"><a href="#二、替换空格" class="headerlink" title="二、替换空格"></a>二、替换空格</h5><ol><li><p>题目描述：<a href="nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&amp;tqId=11155&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking">链接</a></p><p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><p>时间限制：1秒 空间限制：32768K</p></li><li><p>思路分析：</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的两种引擎的区别</title>
      <link href="/2019/07/07/mysql-de-liang-chong-yin-qing-de-qu-bie/"/>
      <url>/2019/07/07/mysql-de-liang-chong-yin-qing-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<p><strong>两种引擎：Innodb和MyISAM</strong></p><a id="more"></a><p><strong>Innodb引擎概述</strong></p><p>Innodb引擎提供了对数据库<a href="http://blog.lemenk.top/2019/09/10/%E4%BA%8B%E5%8A%A1%E5%8F%8A%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E7%89%B9%E5%BE%81/#more" target="_blank" rel="noopener">ACID事务</a>的支持，并且实现了SQL标准的四种隔离级别。该引擎还提供了行级锁和外键约束，它的设计目标是处理大容量数据库系统，它本身其实就是基于MySQL后台的完整数据库系统，MySQL运行时Innodb会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎不支持FULLTEXT类型的索引，而且它没有保存表的行数，当SELECT COUNT(*) FROM TABLE时需要扫描全表。当需要使用数据库事务时，该引擎当然是首选。由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用Innodb引擎会提升效率。但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表。</p><p><strong>MyISAM引擎概述</strong></p><p>MyISAM是MySQL默认的引擎，但是它没有提供对数据库事务的支持，也不支持行级锁和外键，因此当INSERT(插入)或UPDATE(更新)数据时即写操作需要锁定整个表，效率便会低一些。不过和Innodb不同，MyISAM中存储了表的行数，于是SELECT COUNT(*) FROM TABLE时只需要直接读取已经保存好的值而不需要进行全表扫描。如果表的读操作远远多于写操作且不需要数据库事务的支持，那么MyISAM也是很好的选择。</p><p>总结：</p><ol><li>MyISAM是非事务安全的，而InnoDB是事务安全的</li><li>MyISAM锁的粒度是表级的，而InnoDB支持行级锁</li><li>MyISAM支持全文类型索引，而InnoDB不支持全文索引</li><li>MyISAM相对简单，效率上要优于InnoDB，小型应用可以考虑使用MyISAM</li><li>MyISAM表保存成文件形式，跨平台使用更加方便</li></ol><p>MyISAM是mysql默认的插件式存储引擎，适用于主要插入和查询记录；</p><p>InnoDB：用于事务处理，包括ACID事务支持（提供行级锁），适用于需要实现并发控制和事务（ACID）的项目。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL面试必知知识</title>
      <link href="/2019/07/06/mysql-mian-shi-bi-zhi-zhi-shi/"/>
      <url>/2019/07/06/mysql-mian-shi-bi-zhi-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>面试常问之MySQL</strong></p><a id="more"></a><h4 id="一、索引相关"><a href="#一、索引相关" class="headerlink" title="一、索引相关"></a>一、索引相关</h4><ol><li><p>什么是索引？</p><p><strong>索引是一种数据结构，可以帮助我们快速的进行数据的查找。</strong></p><p>在关系数据库中，索引是一种单独的、物理的对数据库表中一列或多列的值进行排序的一种<strong>存储结构</strong>，它是某个表中一列或若干列值的集合和相应的指向表中物理标识这些值的数据页的逻辑指针清单。索引的作用相当于图书的目录，可以根据目录中的页码快速找到所需的内容。</p><p>索引提供指向存储在表的指定列中的数据值的指针，然后根据您指定的排序顺序对这些指针排序。数据库使用索引以找到特定值，然后顺指针找到包含该值的行。这样可以使对应于表的SQL语句执行得更快，可快速访问数据库表中的特定信息。</p><p>当表中有大量记录时，若要对表进行查询，第一种搜索信息方式是全表搜索，是将所有记录一一取出，和查询条件进行一一对比，然后返回满足条件的记录，这样做会消耗大量数据库系统时间，并造成大量磁盘I/O操作；第二种就是在表中建立索引，然后在索引中找到符合查询条件的索引值，最后通过保存在索引中的ROWID（相当于页码）快速找到表中对应的记录。</p><ul><li><p>作用：</p><ul><li>快速取数据；</li><li>保证数据记录的唯一性；</li><li>实现表与表之间的参照完整性；</li><li>在使用ORDER BY、GROUP BY子句进行数据检索时，利用索引可以减少排序和分组的时间。</li></ul></li><li><p>优缺点：</p><ul><li>优点：<ul><li>大大加快数据的检索速度;</li><li>创建唯一性索引，保证数据库表中每一行数据的唯一性;</li><li>加速表和表之间的连接;</li><li>在使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间。</li></ul></li><li>缺点：<ul><li>索引需要占物理空间。</li><li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，降低了数据的维护速度。</li></ul></li></ul></li><li><p>普通索引的创建、修改、删除</p><p><a href="[http://blog.lemenk.top/2019/09/27/%E6%95%B0%E6%8D%AE%E5%BA%93/#more](http://blog.lemenk.top/2019/09/27/数据库/#more)">链接</a></p></li></ul></li><li><p>MySQL数据库索引的数据结构</p><p>InnoDB存储引擎的默认索引的数据结构为B+树。</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> MySQL数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO相关知识</title>
      <link href="/2019/06/27/io-xiang-guan-zhi-shi/"/>
      <url>/2019/06/27/io-xiang-guan-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>IO相关知识</strong></p><a id="more"></a><p><strong>JAVA——IO相关知识</strong></p><!--more--><p>java.io.File类：只能新建、删除、重命名，不能查看文件内容的类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*略*/</span>File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/a.txt"</span><span class="token punctuation">)</span></code></pre><p>输入流：相对于程序，将数据写入到程序中</p><p>输出流：相对于程序，通过程序将数据输出到指定目录</p><p>文件流：基于文件</p><p>FileInputStream/FileOutputStream/FileReader/FileWriter</p><p>缓冲流：基于内存的操作</p><p>BufferedInputStream/BufferedoutputStream/BufferedReader/BufferedWriter</p><p>转换流：文件流与缓冲流的转换</p><p>InputStreamReader/OutputStreamWriter</p><p>对象流：把对象转化为数据流进行读写</p><p>ObjectInputStream/ObjectOutputStream</p><p>随机存取文件流：可以随机的在文件中的某一行读取/插入数据</p><p>RandomAccessFile</p><h3 id="字节流：传输数据为字节的流"><a href="#字节流：传输数据为字节的流" class="headerlink" title="字节流：传输数据为字节的流"></a>字节流：传输数据为字节的流</h3><h4 id="一、字节输入流"><a href="#一、字节输入流" class="headerlink" title="一、字节输入流"></a>一、字节输入流</h4><p>常用的字节输入流主要有：</p><ul><li><strong>InputStream</strong> </li><li><strong>FileInputStream</strong></li><li><strong>BufferedInputStream</strong>（是FilterInputStream的子类）</li></ul><p><strong>InputStream</strong> 为字节输入流的基类，以下为几个常用方法：</p><ul><li>read(byte[] b)：从流中读取b的长度个字节的数据存储到b中，返回结果是读取的字节个数（当再次读时，如果返回-1说明到了结尾，没有了数据）</li><li>read(byte[] b, int off, int len)：从流中从off的位置开始读取len个字节的数据存储到b中，返回结果是实际读取到的字节个数（当再次读时，如果返回-1说明到了结尾，没有了数据）</li><li>close()：关闭流，释放资源。</li></ul><p><strong>FileInputStream</strong>主要用来操作文件输入流，实现了父类的无参数的read()方法。</p><ul><li>int read()：返回值为int，字符的ASCll码。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字节输入流FileInputStream</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token string">"D:/a.java"</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个字节长度为5的字符数组，用于临时存放读出的字符。</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数：字符数组；起始位置；字节数；</span>        <span class="token punctuation">}</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>BufferedInputStream</strong>：先将数据封装到内存中，然后从内存中读，所以它的效率要要非缓冲的要高。它是一种封装别的流以提高效率的流，所以它的初始化需要一个的InputStream流对象。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字节输入流BufferedInputStream</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token string">"D:/a.java"</span><span class="token punctuation">;</span>        FileInputStream fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数为其他流</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="二、字节输出流"><a href="#二、字节输出流" class="headerlink" title="二、字节输出流"></a>二、字节输出流</h4><p>常用的字节输入流主要有：</p><ul><li>OutputStream</li><li>FileOutputStream</li><li>BufferedOutputStream（是FilterOutputStream的子类）</li></ul><p>OutputStream是字节输出流的基类：</p><ul><li>write(byte[] b):将b的长度个字节数据写到输出流中。</li><li>write(byte[] b,int off,int len):从b的off位置开始，获取len个字节数据，写到输出流中。</li><li>flush():刷新输出流，把数据马上写到输出流中。</li><li>close():关闭流，释放系统资源。</li></ul><p>FileOutputStream是用于写文件的输出流：</p><ul><li>write(int b)：将b转成一个字节数据，写到输出流中。</li></ul><p>FileOutputStream包含两个参数：1，所要写入的文件路径，若不存在则新建；2，是否使用追加写入默认，为true时代表在原有文件内容后面追加写入数据，默认为false。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字节输出流FileOutputStream</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token string">"D:/b.java"</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//路径+是否追加</span>        String str <span class="token operator">=</span> <span class="token string">"I Like China!"</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>BufferedOutputStream</p><ul><li>write(int b):write(int b)：将b转成一个字节数据，写到输出流中。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字节输出流BufferedOutputStream</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String path <span class="token operator">=</span> <span class="token string">"D:/b.java"</span><span class="token punctuation">;</span>        FileOutputStream fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//路径+是否追加</span>        BufferedOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数为其他流对象</span>        String str <span class="token operator">=</span> <span class="token string">"I Like China!"</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="字符流：传输数据的最基本单位是字符的流。"><a href="#字符流：传输数据的最基本单位是字符的流。" class="headerlink" title="字符流：传输数据的最基本单位是字符的流。"></a>字符流：传输数据的最基本单位是字符的流。</h3><h4 id="一、字符输入流"><a href="#一、字符输入流" class="headerlink" title="一、字符输入流"></a>一、字符输入流</h4><p>字符流的类通常以reader和writer结尾</p><p><strong>Reader</strong>：字符输入流的抽象父类</p><ul><li>read() ：读取单个字符，返回结果是一个int，需要转成char;到达流的末尾时，返回-1</li><li>read(char[] cbuf):读取cbuf的长度个字符到cbuf这种，返回结果是读取的字符数，到达流的末尾时，返回-1</li><li>close()  ：关闭流，释放占用的系统资源。</li></ul><p><strong>InputStreamReader</strong>：把InputStream中的字节数据流根据字符编码方式转成字符数据流</p><ul><li><p>read(char[] cbuf, int offset, int length) ：从offset位置开始，读取length个字符到cbuf中，返回结果是实际读取的字符数，到达流的末尾时，返回-1</p></li><li><p>需要一个字节输入流对象作为实例化参数。还可以指定第二个参数，第二个参数是字符编码方式，可以是编码方式的字符串形式，也可以是一个字符集对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字节转换输入流InputStreamReader 字节流--->字符流</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//参数1：字节输入流对象作为实例化参数。参数2（可选）：是字符编码方式，可以是编码方式的字符串形式，也可以是一个字符集对象</span>        InputStreamReader isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"D:/a.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ch<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><p><strong>FileReader</strong>：把FileInputStream中的字节数据转成根据字符编码方式转成字符数据流</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符输入流FileReader</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cbuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cbuf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>BufferedReader</strong>：把字符输入流进行封装，将数据进行缓冲，提高读取效率</p><ul><li><p>read(char[] cbuf, int offset, int length) ：从offset位置开始，读取length个字符到cbuf中，返回结果是实际读取的字符数，到达流的末尾时，返回-1</p></li><li><p>readLine() ：读取一个文本行，以行结束符作为末尾，返回结果是读取的字符串。如果已到达流末尾，则返回 null</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符缓冲输入流</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileReader fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>filepathin<span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader bf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将字符文件输入流作为对象</span>            String line<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>bf<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bf<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ul><h4 id="二、字符输出流"><a href="#二、字符输出流" class="headerlink" title="二、字符输出流"></a>二、字符输出流</h4><p><strong>Writer</strong>：抽象父类</p><ul><li>write(char[] cbuf) :往输出流写入一个字符数组。</li><li>write(int c) ：往输出流写入一个字符。</li><li>write(String str) ：往输出流写入一串字符串。</li><li>write(String str, int off, int len) :往输出流写入字符串的一部分。</li><li>flush()：刷新输出流，把数据马上写到输出流中。</li><li>close() ：关闭流，释放资源。 关闭之前回刷新内部缓冲区的数据，将其刷到目的位置。与flush的区别是flush刷新后，流可以继续使用，close刷新后将会将流关闭。</li></ul><p><strong>OutputStreamWriter</strong>：直接往流中写字符串数据，根据字符编码方式把字符数据转成字节数据再写给输出流。需要一个字节文件输出流对象作为参数</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符转换输出流OutputStreamWriter，字符流--->字节流</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//两个参数，路径+是否追加        </span>        FileOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>filepathout<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个字节文件输出流        </span>        OutputStreamWriter osw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        osw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"abcdefg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                osw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>FileWriter</strong>：与OutputStreamWriter类似。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符输出流</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>filepathout<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"ABCDEFG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>BufferedWriter</strong>：利用缓冲区来提高写入的效率。</p><ul><li><p>newLine():写入一行行分隔符。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符缓冲输出流</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileWriter fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>filepathout<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedWriter bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>fw<span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"我爱中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JAVA_IO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA_IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取字符串中相同字符个数的问题</title>
      <link href="/2019/06/27/huo-qu-zi-fu-chuan-zhong-xiang-tong-zi-fu-ge-shu-de-wen-ti/"/>
      <url>/2019/06/27/huo-qu-zi-fu-chuan-zhong-xiang-tong-zi-fu-ge-shu-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p><strong>面试题之获取字符串中相同字符个数</strong></p><a id="more"></a><p>获取字符串中相同字符的个数有两种题型，分别是</p><ol><li>对字符串进行RLE压缩，将相邻的相同字符，用计数值和字符值来代替。例如：aaabccccccddeee，则可用3a1b6c2d3e来代替。<a href="https://www.nowcoder.com/questionTerminal/44da6966beb449d383f62b12e8df6317" target="_blank" rel="noopener">快手笔试题</a></li><li>计算一个字符串里面每个字符出现的次数。例如：Ilikebananas，则结果是I1l1i1k1e1b1a3n2s1。</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//对字符串进行RLE压缩，将相邻的相同字符，用计数值和字符值来代替。</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">stringRLE</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span><span class="token punctuation">{</span>        s<span class="token operator">+=</span><span class="token string">"@"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加上@可避免数组越界，可得到最后一个字符</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断字符相邻是否相同</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token string">""</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算一个字符串里面每个字符出现的次数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">findChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取集合中c的value，重新存入++count</span>                Integer count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token operator">++</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果集合中还没有，直接存入</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 笔试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合</title>
      <link href="/2019/06/20/ji-he/"/>
      <url>/2019/06/20/ji-he/</url>
      
        <content type="html"><![CDATA[<p><strong>JAVA_集合相关学习笔记</strong></p><a id="more"></a><h3 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h3><p>集合就是一个放数据对象引用的容器。常用的两大父接口：Collection和Map</p><h3 id="二、主要结构图"><a href="#二、主要结构图" class="headerlink" title="二、主要结构图"></a>二、主要结构图</h3><img src="http://img.cdn.lemenk.top/cp1.png" width="" height=""><h3 id="三、概述："><a href="#三、概述：" class="headerlink" title="三、概述："></a>三、概述：</h3><p>Collection包含List , Set，Queue</p><p>Map包含Hashtable，LinkedHashMap，HashMap，TreeMap</p><p>List包含：ArrayList，Vector，LinkedList</p><p>Set包含：HashSet，LinkedHashSet，TreeSet</p><p>四、详解</p><h4 id="Collection："><a href="#Collection：" class="headerlink" title="Collection："></a><strong>Collection：</strong></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>可见<code>Collection</code>接口继承自<code>Iterable</code>接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    Iterator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*略*/</span><span class="token punctuation">}</span></code></pre><p>常用方法：</p><p><code>int size()</code>：返回此集合中的元素数。 如果此收藏包含超过Integer.MAX_VALUE个元素，则返回<code>Integer.MAX_VALUE</code> 。 </p><p><code>boolean isEmpty()</code>：如果此集合为空，则返回 true 。否则返回false。 </p><p><code>boolean contains(Object o)</code>：如果此集合包含指定的元素，则返回true 。</p><p><code>&lt;T&gt; T[] toArray(T[] a)</code>：返回包含此集合中所有元素的数组。</p><p><code>boolean add(E e)</code>：添加元素</p><p><code>boolean remove(Object o)</code>：删除元素</p><p><code>void clear()</code>：从此集合中删除所有元素（可选操作）。 此方法返回后，集合将为空。</p><p><code>boolean equals(Object o)</code>：集合指定对象进行比较</p><h5 id="一List-有序-可重复"><a href="#一List-有序-可重复" class="headerlink" title="一List 有序,可重复"></a><strong>一List 有序,可重复</strong></h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*略*/</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-125回文字符串</title>
      <link href="/2019/06/17/leetcode-125-hui-wen-zi-fu-chuan/"/>
      <url>/2019/06/17/leetcode-125-hui-wen-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<p><strong>LeetCode-125回文字符串</strong></p><a id="more"></a><p>LeetCode125题—回文字符串<br>    题目描述：[Go there](<a href="https://leetcode.com/problems/valid-palindrome/&quot;" target="_blank" rel="noopener">https://leetcode.com/problems/valid-palindrome/"</a> target=”_blank” rel=”noopener”)</p><p>给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。</p><p>***说明：本题中，我们将空字符串定义为有效的回文串。</p><p>示例1：<br>输入：<code>“A man, a plan, a canal: Panama”</code><br>输出：<code>true</code><br>示例2：</p><p>输入：<code>“race a car”</code><br>输出：<code>false</code><br><strong>解题语言种类：Java</strong></p><p><strong>解题思路</strong></p><ol><li>判断是否为空字符串，若为空，则返回true</li><li>把字符串拿出来，将大写字母转换成小写字母。<code>toLowerCase()</code></li><li>遍历，取出数字和字母组成新的字符数组；</li><li>定义两个指针，分别从前后开始遍历，依次比较是否相等;</li><li>若遍历完所有字符后，仍相等，则返回true；若不相等，则返回false。</li></ol><p>我的写法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span>null<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ca <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>ca<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ca<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">48</span> <span class="token operator">&amp;&amp;</span> ca<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">57</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>ca<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">97</span> <span class="token operator">&amp;&amp;</span> ca<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                str <span class="token operator">+=</span> ca<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>github大佬的操作：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>             charMap<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token string">'0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            charMap<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> charMap<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">50</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pChars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> pChars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> cstart<span class="token punctuation">,</span> cend<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cstart <span class="token operator">=</span> charMap<span class="token punctuation">[</span>pChars<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            cend <span class="token operator">=</span> charMap<span class="token punctuation">[</span>pChars<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cstart <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cend <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cstart <span class="token operator">!=</span> cend<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                start<span class="token operator">++</span><span class="token punctuation">;</span>                end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cstart <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> start<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cend <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> end<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tail <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> cHead<span class="token punctuation">,</span> cTail<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cHead <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            cTail <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>cHead<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                head<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span>cTail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tail<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>cHead<span class="token punctuation">)</span> <span class="token operator">!=</span> Character<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>cTail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                head<span class="token operator">++</span><span class="token punctuation">;</span>                tail<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>嗯，数据对比，我的方法仅仅超过了全网8%左右的leetcode用户。是个打击，也是个动力！come on！</p><p>主要的还是分析下面两中方法的优点，利己利友。</p><p>先说第一种：<br>  这个方法的核心是定义了一个新数组<code>charMap[]</code>和静态代码块。这种方式很是巧妙，避免使用<code>toLowerCase()</code>方法，而是将字符数组的下标由int类型转为char类型，同时将大写字母和小写字母，如’A’和’a’设为相同下标，并放在数组中。在<code>isPalindrome(String s)</code>方法中使用<code>charMap[]</code>数组时</p><pre class=" language-java"><code class="language-java">cstart <span class="token operator">=</span> charMap<span class="token punctuation">[</span>pChars<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cend <span class="token operator">=</span> charMap<span class="token punctuation">[</span>pChars<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>通过转换查找，识别是否是数字或者字母。</p><p>第二种方法：<br>  这种方法则是用到了Character中的<code>isLetterOrDigit(char ch)</code>方法，确定指定字符是否为字母或数字。其返回值类型为boolean，简化了判断操作。<br>注：<code>isLetterOrDigit(char ch)</code>方法和<code>isLetterOrDigit(int codePoint)</code>源代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLetterOrDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> codePoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Character<span class="token punctuation">.</span>UPPERCASE_LETTER<span class="token punctuation">)</span> <span class="token operator">|</span>   <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Character<span class="token punctuation">.</span>LOWERCASE_LETTER<span class="token punctuation">)</span> <span class="token operator">|</span>   <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Character<span class="token punctuation">.</span>TITLECASE_LETTER<span class="token punctuation">)</span> <span class="token operator">|</span>   <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Character<span class="token punctuation">.</span>MODIFIER_LETTER<span class="token punctuation">)</span> <span class="token operator">|</span>   <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Character<span class="token punctuation">.</span>OTHER_LETTER<span class="token punctuation">)</span> <span class="token operator">|</span>   <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> Character<span class="token punctuation">.</span>DECIMAL_DIGIT_NUMBER<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token function">getType</span><span class="token punctuation">(</span>codePoint<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>End!</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归</title>
      <link href="/2019/06/11/di-gui/"/>
      <url>/2019/06/11/di-gui/</url>
      
        <content type="html"><![CDATA[<p><strong>递归</strong></p><a id="more"></a><p>一、定义</p><p>递归就是方法自己调用自己，每次调用时传入不同的参数。</p><p>二、 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 递归 </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String、StringBuffer和StringBuilder区别</title>
      <link href="/2019/05/20/string-stringbuffer-he-stringbuilder-qu-bie/"/>
      <url>/2019/05/20/string-stringbuffer-he-stringbuilder-qu-bie/</url>
      
        <content type="html"><![CDATA[<h4 id="面试常问之String、StringBuffer-和-StringBuilder"><a href="#面试常问之String、StringBuffer-和-StringBuilder" class="headerlink" title="面试常问之String、StringBuffer 和 StringBuilder"></a>面试常问之String、StringBuffer 和 StringBuilder</h4><a id="more"></a><p>Q:String、StringBuffer 和 StringBuilder 的区别是什么？String 为什么是不可变的?</p><p>查看源码：</p><p>String：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> CharSequence <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*省略*/</span><span class="token punctuation">}</span></code></pre><p>StringBuffer：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuffer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> CharSequence<span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> toStringCache<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*省略*/</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">Appendable</span><span class="token punctuation">,</span> CharSequence <span class="token punctuation">{</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*省略*/</span><span class="token punctuation">}</span></code></pre><p>StringBuilder:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">StringBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractStringBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> CharSequence<span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*省略*/</span><span class="token punctuation">}</span></code></pre><p>通过查看源码可知，String类通过final修饰，且通过final修饰的字符数组保存字符串，所以String是不可变的。而StringBuffer和StringBuilder都继承自<code>AbstractStringBuilder</code>方法，而<code>AbstractStringBuilder</code>中字符串使用未被final修饰的字符数组修饰，所以是可变的。</p><p>以下通过两个方面来区分String、StringBuffer和StringBuilder：</p><p><strong>线程安全性</strong></p><p>String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。</p><p><strong>性能</strong></p><p>每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p><p><strong>总结：</strong></p><ul><li>String用于操作少量的数据</li><li>StringBuilder：单线程操作字符串缓冲区下操作大量数据</li><li>StringBuffer：单线程操作字符串缓冲区下操作大量数据</li><li>三者都是不可被继承的</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String、StringBuffer和StringBuilder区别</title>
      <link href="/2019/05/20/windows10-xia-an-zhuang-duo-ge-ban-ben-de-mysql/"/>
      <url>/2019/05/20/windows10-xia-an-zhuang-duo-ge-ban-ben-de-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在MySQL的学习中，由于MySQL版本的不同，其中有者许多差异，作为学习者，最好同时拥有多个版本的MySQL来学习。在查看网上众多教程之后，编写了这篇博客来记录我本次的学习历程，下面教程开始。</p><a id="more"></a><h3 id="教程开始"><a href="#教程开始" class="headerlink" title="教程开始"></a>教程开始</h3><p>环境：Windows10</p><p>在此之前，我的电脑上已经安装好了MySQL8.0.15版本。其端口号默认为3306。</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/image-20200318104307745.png" alt="image-20200318104307745"></p><h4 id="1、下载MySQL安装包"><a href="#1、下载MySQL安装包" class="headerlink" title="1、下载MySQL安装包"></a>1、下载MySQL安装包</h4><h4 id="2、首先去MySQL官网下载安装包，选择需要的版本。最好是ZIP压缩包。传送门"><a href="#2、首先去MySQL官网下载安装包，选择需要的版本。最好是ZIP压缩包。传送门" class="headerlink" title="2、首先去MySQL官网下载安装包，选择需要的版本。最好是ZIP压缩包。传送门"></a>2、首先去MySQL官网下载安装包，选择需要的版本。<strong>最好是ZIP压缩包</strong>。<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">传送门</a></h4><h4 id="3、解压"><a href="#3、解压" class="headerlink" title="3、解压"></a>3、解压</h4><p>将文件解压到需要的位置</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/image-20200318104831286.png" alt="image-20200318104831286"></p><h4 id="4、新建my-ini文件，并注意保存为ANSI格式。"><a href="#4、新建my-ini文件，并注意保存为ANSI格式。" class="headerlink" title="4、新建my.ini文件，并注意保存为ANSI格式。"></a>4、新建my.ini文件，并注意保存为ANSI格式。</h4><pre class=" language-ini"><code class="language-ini"><span class="token selector">[mysql]</span># 设置mysql客户端默认字符集<span class="token constant"> character-set-server</span> <span class="token attr-value"><span class="token punctuation">=</span> utf8</span><span class="token selector">[mysqld]</span>#设置端口<span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3305</span># 设置mysql的安装目录<span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>C:\Program Files\MySQL\mysql-5.6.25</span># 设置mysql数据库的数据的存放目录<span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>C:\Program Files\MySQL\mysql-5.6.25\data</span># 允许最大连接数<span class="token constant">max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span># 服务端使用的字符集默认为8比特编码的latin1字符集<span class="token constant">character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span># 创建新表时将使用的默认存储引擎<span class="token constant">default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span><span class="token constant">log_error</span><span class="token attr-value"><span class="token punctuation">=</span>error.log</span></code></pre><p>注：</p><p>1.修改mysql的安装目录</p><p>2.一般可以设置端口号为<code>3307</code>，由于我的阿里云服务器映射端口号为<code>3307</code>，为了区分，就设置为<code>3305</code>.</p><h4 id="5、在服务中关闭之前安装好的mysql服务。"><a href="#5、在服务中关闭之前安装好的mysql服务。" class="headerlink" title="5、在服务中关闭之前安装好的mysql服务。"></a>5、在服务中关闭之前安装好的mysql服务。</h4><h4 id="6、使用管理员打开cmd，执行以下命令。注意修改端口号和文件位置"><a href="#6、使用管理员打开cmd，执行以下命令。注意修改端口号和文件位置" class="headerlink" title="6、使用管理员打开cmd，执行以下命令。注意修改端口号和文件位置"></a>6、使用管理员打开cmd，执行以下命令。注意修改端口号和文件位置</h4><pre><code>mysqld -install mysql3305 --defaults-file="C:\Program Files\MySQL\mysql-5.6.25\my.ini"</code></pre><p>出现Service successfully installed 说明成功了。</p><h4 id="7、修改注册表"><a href="#7、修改注册表" class="headerlink" title="7、修改注册表"></a>7、修改注册表</h4><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/image-20200318105836816.png" alt="修改注册表"></p><p>在HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\services下修改Imagepath。<br>（不一定是ControlSet001，有可能在ControlSet002、ControlSet003…中）</p><pre class=" language-shell"><code class="language-shell">"C:\Program Files\MySQL\mysql-5.6.25\bin\mysqld" --defaults-file="C:\Program Files\MySQL\mysql-5.6.25\my.ini" mysql3305</code></pre><h4 id="8、打开cmd管理员启动MySQL服务。"><a href="#8、打开cmd管理员启动MySQL服务。" class="headerlink" title="8、打开cmd管理员启动MySQL服务。"></a>8、打开cmd管理员启动MySQL服务。</h4><pre class=" language-shell"><code class="language-shell">net start mysql3305</code></pre><p>此时会正常启动。</p><h4 id="9、修改登陆密码。"><a href="#9、修改登陆密码。" class="headerlink" title="9、修改登陆密码。"></a>9、修改登陆密码。</h4><p>默认为空密码，可使用以下命令进入</p><pre class=" language-shell"><code class="language-shell">mysql -u root -p -P3305</code></pre><p>输入密码是直接回车即可。</p><p>若要修改密码，可以使用以下方法。</p><pre class=" language-shell"><code class="language-shell">#mysql> set password for 用户名@localhost = password('新密码'); 例子：mysql> set password for root@localhost = password('root'); #上面例子将用户root的密码更改为root　；</code></pre><h4 id="10、此时两个版本的MySQL就安装完成了。"><a href="#10、此时两个版本的MySQL就安装完成了。" class="headerlink" title="10、此时两个版本的MySQL就安装完成了。"></a>10、此时两个版本的MySQL就安装完成了。</h4><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/20200318111736.png" alt="3305端口Mysql"></p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/fafafa.png" alt="3306端口Mysql"></p><p>完结撒花！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务及事务的四大特征</title>
      <link href="/2019/05/10/shi-wu-ji-shi-wu-de-si-da-te-zheng/"/>
      <url>/2019/05/10/shi-wu-ji-shi-wu-de-si-da-te-zheng/</url>
      
        <content type="html"><![CDATA[<p><strong>事务及事务的四大特征</strong></p><a id="more"></a><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p>事务：一个最小的不可再分的工作单元；通常一个事务对应一个完整的业务(例如银行账户转账业务，该业务就是一个最小的工作单元)。</p><p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样这些数据库操作语句就构成一个事务！</p><ul><li>在 MySQL 中只有使用了 Innodb 数据库引擎的数据库或表才支持事务。</li><li>事务处理可以用来维护数据库的完整性，保证成批的 SQL 语句要么全部执行，要么全部不执行。</li><li>事务用来管理 insert,update,delete 语句。</li></ul><h3 id="二、事务的四大特性"><a href="#二、事务的四大特性" class="headerlink" title="二、事务的四大特性"></a>二、事务的四大特性</h3><p><strong>ACID</strong>：</p><ul><li><strong>原子性(Atomicity)</strong>：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。</li><li><strong>一致性(Correspondence)</strong>：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设规则，这包含资料的精确度、串联性以及后续数据库可以自发性地完成预定的工作。</li><li><strong>隔离性(Isolation)</strong>：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</li><li><strong>持久性(Durability)</strong>：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ul><h3 id="三、事务控制语句"><a href="#三、事务控制语句" class="headerlink" title="三、事务控制语句"></a>三、事务控制语句</h3><ul><li>显式地开启一个事务：BEGIN 或 START TRANSACTION</li><li>提交事务：COMMIT 。并且使已对数据库进行的所有修改成为永久性的。</li><li>回滚回结束用户的事务：ROLLBACK 。并且撤销正在进行的所有未提交的修改。</li><li>事务结束：END TRANSACTION</li></ul><p>注：在事物进行过程中，未结束之前，DML语句是不会更改底层数据，只是将历史操作记录一下，在内存中完成记录。只有在事物结束的时候，而且是成功的结束的时候，才会修改底层硬盘文件中的数据。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis初步认识</title>
      <link href="/2019/05/07/redis-chu-bu-ren-shi/"/>
      <url>/2019/05/07/redis-chu-bu-ren-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>Redis数据库学习笔记</strong></p><a id="more"></a><h1 id="一、Redis基础"><a href="#一、Redis基础" class="headerlink" title="一、Redis基础"></a>一、Redis基础</h1><h2 id="1-1-Redis简介"><a href="#1-1-Redis简介" class="headerlink" title="1.1 Redis简介"></a>1.1 Redis简介</h2><p>Redis(REmote DIctionary Server) 是一个由Salvatore Sanfilippo写的key-value存储系统。是一个开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><h2 id="1-2-NoSQL数据库简介"><a href="#1-2-NoSQL数据库简介" class="headerlink" title="1.2 NoSQL数据库简介"></a>1.2 NoSQL数据库简介</h2><p>NoSQL数据库，泛指非关系型数据库。</p><p>由于网络的循序发展，传统的关系型数据库对超大规模的数据和高并发的动态网站暴露出了许多问题。</p><p><strong>NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题</strong>。</p><h3 id="1-2-1-NoSQL数据库的四大分类"><a href="#1-2-1-NoSQL数据库的四大分类" class="headerlink" title="1.2.1 NoSQL数据库的四大分类"></a>1.2.1 NoSQL数据库的四大分类</h3><p><strong>键值(<a href="https://baike.baidu.com/item/Key-Value" target="_blank" rel="noopener"><em>Key-Value</em></a>)存储数据库</strong></p><p>这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。Key/value模型对于IT系统来说的优势在于简单、易部署。但是如果DBA只对部分值进行查询或更新的时候，Key/value就显得效率低下了。[3]  举例如：Tokyo Cabinet/Tyrant, <strong>Redis</strong>, Voldemort, Oracle BDB.</p><p><strong>列存储数据库</strong></p><p>这部分数据库通常是用来应对分布式存储的海量数据。键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。如：Cassandra, HBase, Riak.</p><p><strong>文档型数据库</strong></p><p>文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似。该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可 以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高。如：CouchDB, <strong>MongoDb</strong>. 国内也有文档型数据库SequoiaDB，已经开源。</p><p><strong>图形(Graph)数据库</strong></p><p>图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。[2]  如：Neo4J, InfoGrid, Infinite Graph.</p><p><strong>总结</strong>：</p><p>NoSQL数据库适用于：</p><ol><li>数据模型比较简单；</li><li>需要灵活性更强的IT系统；</li><li>对数据库性能要求较高；</li><li>不需要高度的数据一致性；</li><li>对于给定key，比较容易映射复杂值的环境。</li></ol><h2 id="1-3-Redis的特点"><a href="#1-3-Redis的特点" class="headerlink" title="1.3 Redis的特点"></a>1.3 Redis的特点</h2><h3 id="1-3-1-特点"><a href="#1-3-1-特点" class="headerlink" title="1.3.1 特点"></a>1.3.1 特点</h3><ol><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li></ol><p>注：key-value分布式存储系统查询速度快、存放数据量大、支持高并发，非常适合通过主键进行查询，但不能进行复杂的条件查询。如果辅以Real-Time Search Engine（实时搜索引擎）进行复杂条件检索、全文检索，就可以替代并发性能较低的MySQL等关系型数据库，达到高并发、高性能，节省几十倍服务器数 量的目的。以MemcacheDB、Tokyo Tyrant为代表的key-value分布式存储，在上万并发连接下，轻松地完成高速查询。而MySQL，在几百个并发连接下，就基本上崩溃了。</p><h3 id="1-3-2-优势"><a href="#1-3-2-优势" class="headerlink" title="1.3.2  优势"></a>1.3.2  优势</h3><ol><li>性能高。Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>数据类型丰富，支持Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作</li><li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ol><h3 id="1-3-3-与其他key-value的不同"><a href="#1-3-3-与其他key-value的不同" class="headerlink" title="1.3.3 与其他key-value的不同"></a>1.3.3 与其他key-value的不同</h3><ol><li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li></ol><h3 id="1-3-4-Redis的数据类型"><a href="#1-3-4-Redis的数据类型" class="headerlink" title="1.3.4 Redis的数据类型"></a>1.3.4 Redis的数据类型</h3><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p><ul><li><p>String（字符串）：它是最基本的数据类型，可以包含任何数据。string类型的值最大能存储512MB。</p></li><li><p>Hash（哈希）：它是键值（key–&gt;value）对集合。一般用于存储对象。</p><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> HMSET first field1 "Hello" field2 "World" OK127.0.0.1:6379> HGET first field1"Hello"127.0.0.1:6379> HGET first field2"World"</code></pre><p>使用了 Redis <strong>HMSET, HGET</strong> 命令，<strong>HMSET</strong> 设置了两个 <strong>field=&gt;value</strong> 对, HGET 获取对应 <strong>field</strong> 对应的 <strong>value</strong>。</p></li><li><p>List（列表）：是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> lpush first redi5(integer) 1127.0.0.1:6379> lpush first mongodb(integer) 2127.0.0.1:6379> lpush first rabitmq(integer) 3127.0.0.1:6379> lpush first 0 10(integer) 5127.0.0.1:6379> lrange first 0 101) "10"2) "0"3) "rabitmq"4) "mongodb"5) "redi5"</code></pre><p><strong>lpush</strong>用于存储，<strong>lrange</strong>用于取值</p></li><li><p>Set（集合）： 是 string 类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> sadd set1 redis(integer) 1127.0.0.1:6379> sadd set1 mongodv(integer) 1127.0.0.1:6379> 127.0.0.1:6379> sadd set1 rabirmq(integer) 1127.0.0.1:6379> smembers set11) "rabirmq"2) "redis"3) "mongodv"</code></pre><p><strong>sadd 命令</strong>添加一个 string 元素到 key 对应的 set 集合中，成功返回 1，如果元素已经在集合中返回 0。</p></li><li><p>zset（有序集合）：也是string类型元素的集合,且不允许重复的成员。</p><p>与set不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> zadd set2 0 redis(integer) 1127.0.0.1:6379> zadd set2 0 mongodb(integer) 1127.0.0.1:6379> zadd set2 0 rabitmq(integer) 1127.0.0.1:6379> zadd set2 0 rabitmq(integer) 0127.0.0.1:6379> ZRANGEBYSCORE set2 0 1001) "mongodb"2) "rabitmq"3) "redis"</code></pre></li></ul><table><thead><tr><th>类型</th><th><strong>简介</strong></th><th><strong>特性</strong></th><th><strong>场景</strong></th></tr></thead><tbody><tr><td>String(字符串)</td><td>二进制安全</td><td>可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M</td><td></td></tr><tr><td>Hash(字典)</td><td>键值对集合,即编程语言中的Map类型</td><td>适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去)</td><td>存储、读取、修改用户属性</td></tr><tr><td>List(列表)</td><td>链表(双向链表)</td><td>增删快,提供了操作某一段元素的API</td><td>1,最新消息排行等功能(比如朋友圈的时间线) 2,消息队列</td></tr><tr><td>Set(集合)</td><td>哈希表实现,元素不重复</td><td>1、添加、删除,查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作</td><td>1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐</td></tr><tr><td>Sorted Set(有序集合)</td><td>将Set中的元素增加一个权重参数score,元素按score有序排列</td><td>数据插入集合时,已经进行天然排序</td><td>1、排行榜 2、带权重的消息队列</td></tr></tbody></table><h3 id="1-3-5-用途"><a href="#1-3-5-用途" class="headerlink" title="1.3.5 用途"></a>1.3.5 用途</h3><ol><li>缓存，毫无疑问这是Redis当今最为人熟知的使用场景。再提升服务器性能方面非常有效；</li><li>排行榜，如果使用传统的关系型数据库来做这个事儿，非常的麻烦，而利用Redis的SortSet数据结构能够非常方便搞定；</li><li>计算器/限速器，利用Redis中原子性的自增操作，我们可以统计类似用户点赞数、用户访问数等，这类操作如果用MySQL，频繁的读写会带来相当大的压力；限速器比较典型的使用场景是限制某个用户访问某个API的频率，常用的有抢购时，防止用户疯狂点击带来不必要的压力；</li><li>好友关系，利用集合的一些命令，比如求交集、并集、差集等。可以方便搞定一些共同好友、共同爱好之类的功能；</li><li>简单消息队列，除了Redis自身的发布/订阅模式，我们也可以利用List来实现一个队列机制，比如：到货通知、邮件发送之类的需求，不需要高可靠，但是会带来非常大的DB压力，完全可以用List来完成异步解耦；</li><li>Session共享，默认Session是保存在服务器的文件中，即当前服务器，如果是集群服务，同一个用户过来可能落在不同机器上，这就会导致用户频繁登陆；采用Redis保存Session后，无论用户落在那台机器上都能够获取到对应的Session信息。</li></ol><h3 id="1-3-6-Redis总结"><a href="#1-3-6-Redis总结" class="headerlink" title="1.3.6 Redis总结"></a>1.3.6 <strong>Redis总结</strong></h3><ul><li><p>redis单个key 存入512M大小</p></li><li><p>redis支持多种类型的数据结构(string,list,hash.set.zset)</p></li><li><p>redis 是单线程   原子性    </p></li><li><p>redis可以持久化  因为使用了 RDB和AOF机制  </p></li><li><p>redis支持集群   而且redis 支持库(0-15) 16个库 </p></li><li><p>redis 还可以做消息队列  比如聊天室  IM </p></li></ul><p>  企业级开发中:可以用作数据库、缓存(热点数据（经常会被查询，但是不经常被修改或者删除的数据)和消息中间件等大部分功能。</p><p><strong>优点：</strong>  </p><ol><li>丰富的数据结构</li><li>高速读写，redis使用自己实现的分离器，代码量很短，没有使用lock（MySQL），因此效率非常高。</li></ol><p><strong>缺点：</strong>  </p><ol><li>持久化。Redis直接将数据存储到内存中，要将数据保存到磁盘上，Redis可以使用两种方式实现持久化过程。定时快照（snapshot）：每隔一段时间将整个数据库写到磁盘上，每次均是写全部数据，代价非常高。第二种方式基于语句追加（aof）：只追踪变化的数据，但是追加的log可能过大，同时所有的操作均重新执行一遍，回复速度慢。 </li><li>耗内存，占用内存过高。 </li></ol><h2 id="1-4-安装"><a href="#1-4-安装" class="headerlink" title="1.4 安装"></a>1.4 安装</h2><h3 id="1-4-1-Windows安装"><a href="#1-4-1-Windows安装" class="headerlink" title="1.4.1 Windows安装"></a>1.4.1 Windows安装</h3><p><a href="https://www.runoob.com/redis/redis-install.html" target="_blank" rel="noopener">链接</a></p><h3 id="1-4-2-Linux安装"><a href="#1-4-2-Linux安装" class="headerlink" title="1.4.2 Linux安装"></a>1.4.2 Linux安装</h3><p>使用Docker安装Rrdis</p><h2 id="1-5-Redis基础命令"><a href="#1-5-Redis基础命令" class="headerlink" title="1.5 Redis基础命令"></a>1.5 Redis基础命令</h2><p>一下命令在Linux的客户端命令行中。启动redis客户端。</p><p>切换数据库：</p><pre class=" language-shell"><code class="language-shell"># 切换到第0号数据库select 0</code></pre><ol><li><p>查找key</p><pre class=" language-shell"><code class="language-shell"># 查找所有符合指定表达式的key127.0.0.1:6379>keys pattern# 此时为空keys *(empty list or set)# ？为占位符，标识一个字符</code></pre></li><li><p>删除key</p><pre class=" language-shell"><code class="language-shell"># a为key值，此时redis中不存在此key，则执行结果为0127.0.0.1:6379> del a(integer) 0</code></pre></li><li><p>生成key</p><pre class=" language-shell"><code class="language-shell"># key为a，value为123127.0.0.1:6379>set a 123OK127.0.0.1:6379> keys *1) "a"</code></pre></li><li><p>查看指定key序列化的值</p><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> dump a"\x00\xc0{\t\x00\x98\x10\x02-T\xfc\x04\b"</code></pre></li><li><p>判断key是否存在</p><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379> exists a(integer) 1127.0.0.1:6379> exists b(integer) 0</code></pre></li><li><p>查看key过期时间</p><pre class=" language-shell"><code class="language-shell"># 返回值为-1，则为永久。127.0.0.1:6379> ttl a(integer) -1</code></pre></li><li><p>为指定key设置过期时间，以秒计时</p><pre class=" language-shell"><code class="language-shell"># 设置b的过期时间为10秒127.0.0.1:6379> expire b 10(integer) 1</code></pre><pre class=" language-shell"><code class="language-shell"># 返回值为-2，则表明已过期127.0.0.1:6379>ttl b(integer) -2</code></pre></li><li><p>移除key的过期时间，变为永久有效</p><pre class=" language-shell"><code class="language-shell">127.0.0.1:6379>persist b(integer) 1</code></pre></li><li><p>修改key的名称</p><pre class=" language-shell"><code class="language-shell"># 设置key为a的名称为abc127.0.0.1:6379> rename a abcOK</code></pre></li><li><p>移动当前数据库中的数据到以他数据库中</p><pre class=" language-shell"><code class="language-shell"># 把c移动到1号数据库中move c 1</code></pre></li><li><p>查看key的类型</p><pre class=" language-shell"><code class="language-shell"># 查看key的类型type a</code></pre></li></ol><p>更多命令请参考：<a href="https://redis.io/commands" target="_blank" rel="noopener">https://redis.io/commands</a></p><h4 id="1-5-1-字符串"><a href="#1-5-1-字符串" class="headerlink" title="1.5.1 字符串"></a>1.5.1 字符串</h4><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong><a href="https://www.runoob.com/redis/strings-set.html" target="_blank" rel="noopener">SET key value</a></strong> 设置指定 key 的值</td></tr><tr><td align="left">2</td><td align="left"><strong><a href="https://www.runoob.com/redis/strings-get.html" target="_blank" rel="noopener">GET key</a></strong> 获取指定 key 的值。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/strings-getrange.html" target="_blank" rel="noopener">GETRANGE key start end</a> 返回 key 中字符串值的子字符</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/strings-getset.html" target="_blank" rel="noopener">GETSET key value</a> 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/redis/strings-getbit.html" target="_blank" rel="noopener">GETBIT key offset</a> 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/strings-mget.html" target="_blank" rel="noopener">MGET key1 [key2..]</a> 获取所有(一个或多个)给定 key 的值。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/strings-setbit.html" target="_blank" rel="noopener">SETBIT key offset value</a> 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/redis/strings-setex.html" target="_blank" rel="noopener">SETEX key seconds value</a> 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td align="left">9</td><td align="left"><strong><a href="https://www.runoob.com/redis/strings-setnx.html" target="_blank" rel="noopener">SETNX key value</a></strong> 只有在 key 不存在时设置 key 的值。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/strings-setrange.html" target="_blank" rel="noopener">SETRANGE key offset value</a> 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/redis/strings-strlen.html" target="_blank" rel="noopener">STRLEN key</a> 返回 key 所储存的字符串值的长度。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/strings-mset.html" target="_blank" rel="noopener">MSET key value [key value …]</a> 同时设置一个或多个 key-value 对。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/strings-msetnx.html" target="_blank" rel="noopener">MSETNX key value [key value …]</a> 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/redis/strings-psetex.html" target="_blank" rel="noopener">PSETEX key milliseconds value</a> 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td align="left">15</td><td align="left"><strong><a href="https://www.runoob.com/redis/strings-incr.html" target="_blank" rel="noopener">INCR key</a></strong> 将 key 中储存的数字值增一。</td></tr><tr><td align="left">16</td><td align="left"><strong><a href="https://www.runoob.com/redis/strings-incrby.html" target="_blank" rel="noopener">INCRBY key increment</a></strong> 将 key 所储存的值加上给定的增量值（increment） 。</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/redis/strings-incrbyfloat.html" target="_blank" rel="noopener">INCRBYFLOAT key increment</a> 将 key 所储存的值加上给定的浮点增量值（increment） 。</td></tr><tr><td align="left">18</td><td align="left"><strong><a href="https://www.runoob.com/redis/strings-decr.html" target="_blank" rel="noopener">DECR key</a></strong> 将 key 中储存的数字值减一。</td></tr><tr><td align="left">19</td><td align="left"><strong><a href="https://www.runoob.com/redis/strings-decrby.htmlkey" target="_blank" rel="noopener">DECRBY key decrement</a></strong> 所储存的值减去给定的减量值（decrement） 。</td></tr><tr><td align="left">20</td><td align="left"><strong><a href="https://www.runoob.com/redis/strings-append.html" target="_blank" rel="noopener">APPEND key value</a></strong> 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td></tr></tbody></table><h4 id="1-5-2-哈希"><a href="#1-5-2-哈希" class="headerlink" title="1.5.2  哈希"></a>1.5.2  哈希</h4><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hdel.html" target="_blank" rel="noopener">HDEL key field1 field2]</a> 删除一个或多个哈希表字段</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hexists.html" target="_blank" rel="noopener">HEXISTS key field</a> 查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hget.html" target="_blank" rel="noopener">HGET key field</a> 获取存储在哈希表中指定字段的值。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hgetall.html" target="_blank" rel="noopener">HGETALL key</a> 获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hincrby.html" target="_blank" rel="noopener">HINCRBY key field increment</a> 为哈希表 key 中的指定字段的整数值加上增量 increment 。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hincrbyfloat.html" target="_blank" rel="noopener">HINCRBYFLOAT key field increment</a> 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hkeys.html" target="_blank" rel="noopener">HKEYS key</a> 获取所有哈希表中的字段</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hlen.html" target="_blank" rel="noopener">HLEN key</a> 获取哈希表中字段的数量</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hmget.html" target="_blank" rel="noopener">HMGET key field1 field2]</a> 获取所有给定字段的值</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hmset.html" target="_blank" rel="noopener">HMSET key field1 value1 field2 value2 ]</a> 同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hset.html" target="_blank" rel="noopener">HSET key field value</a> 将哈希表 key 中的字段 field 的值设为 value 。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hsetnx.html" target="_blank" rel="noopener">HSETNX key field value</a> 只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hvals.html" target="_blank" rel="noopener">HVALS key</a> 获取哈希表中所有值</td></tr><tr><td align="left">14</td><td align="left">HSCAN key cursor [MATCH pattern] [COUNT count] 迭代哈希表中的键值对。</td></tr></tbody></table><h4 id="1-5-3-列表"><a href="#1-5-3-列表" class="headerlink" title="1.5.3 列表"></a>1.5.3 列表</h4><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/redis/lists-blpop.html" target="_blank" rel="noopener">BLPOP key1 key2 ] timeout</a> 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/redis/lists-brpop.html" target="_blank" rel="noopener">BRPOP key1 key2 ] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/lists-brpoplpush.html" target="_blank" rel="noopener">BRPOPLPUSH source destination timeout</a> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/lists-lindex.html" target="_blank" rel="noopener">LINDEX key index</a> 通过索引获取列表中的元素</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/redis/lists-linsert.html" target="_blank" rel="noopener">LINSERT key BEFORE|AFTER pivot value</a> 在列表的元素前或者后插入元素</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/lists-llen.html" target="_blank" rel="noopener">LLEN key</a> 获取列表长度</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/lists-lpop.html" target="_blank" rel="noopener">LPOP key</a> 移出并获取列表的第一个元素</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/redis/lists-lpush.html" target="_blank" rel="noopener">LPUSH key value1 value2]</a> 将一个或多个值插入到列表头部</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/redis/lists-lpushx.html" target="_blank" rel="noopener">LPUSHX key value</a> 将一个值插入到已存在的列表头部</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/lists-lrange.html" target="_blank" rel="noopener">LRANGE key start stop</a> 获取列表指定范围内的元素</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/redis/lists-lrem.html" target="_blank" rel="noopener">LREM key count value</a> 移除列表元素</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/lists-lset.html" target="_blank" rel="noopener">LSET key index value</a> 通过索引设置列表元素的值</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/lists-ltrim.html" target="_blank" rel="noopener">LTRIM key start stop</a> 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/redis/lists-rpop.html" target="_blank" rel="noopener">RPOP key</a> 移除列表的最后一个元素，返回值为移除的元素。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/redis/lists-rpoplpush.html" target="_blank" rel="noopener">RPOPLPUSH source destination</a> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/redis/lists-rpush.html" target="_blank" rel="noopener">RPUSH key value1 value2]</a> 在列表中添加一个或多个值</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/redis/lists-rpushx.html" target="_blank" rel="noopener">RPUSHX key value</a> 为已存在的列表添加值</td></tr></tbody></table><h4 id="1-5-4集合"><a href="#1-5-4集合" class="headerlink" title="1.5.4集合"></a>1.5.4集合</h4><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/redis/sets-sadd.html" target="_blank" rel="noopener">SADD key member1 member2]</a> 向集合添加一个或多个成员</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/redis/sets-scard.html" target="_blank" rel="noopener">SCARD key</a> 获取集合的成员数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/sets-sdiff.html" target="_blank" rel="noopener">SDIFF key1 key2]</a> 返回给定所有集合的差集</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/sets-sdiffstore.html" target="_blank" rel="noopener">SDIFFSTORE destination key1 key2]</a> 返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/redis/sets-sinter.html" target="_blank" rel="noopener">SINTER key1 key2]</a> 返回给定所有集合的交集</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/sets-sinterstore.html" target="_blank" rel="noopener">SINTERSTORE destination key1 key2]</a> 返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/sets-sismember.html" target="_blank" rel="noopener">SISMEMBER key member</a> 判断 member 元素是否是集合 key 的成员</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/redis/sets-smembers.html" target="_blank" rel="noopener">SMEMBERS key</a> 返回集合中的所有成员</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/redis/sets-smove.html" target="_blank" rel="noopener">SMOVE source destination member</a> 将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/sets-spop.html" target="_blank" rel="noopener">SPOP key</a> 移除并返回集合中的一个随机元素</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/redis/sets-srandmember.html" target="_blank" rel="noopener">SRANDMEMBER key count]</a> 返回集合中一个或多个随机数</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/sets-srem.html" target="_blank" rel="noopener">SREM key member1 member2]</a> 移除集合中一个或多个成员</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/sets-sunion.html" target="_blank" rel="noopener">SUNION key1 key2]</a> 返回所有给定集合的并集</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/redis/sets-sunionstore.html" target="_blank" rel="noopener">SUNIONSTORE destination key1 key2]</a> 所有给定集合的并集存储在 destination 集合中</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/redis/sets-sscan.html" target="_blank" rel="noopener">SSCAN key cursor [MATCH pattern] [COUNT count]</a> 迭代集合中的元素</td></tr></tbody></table><h4 id="1-5-5-有序集合"><a href="#1-5-5-有序集合" class="headerlink" title="1.5.5 有序集合"></a>1.5.5 有序集合</h4><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zadd.html" target="_blank" rel="noopener">ZADD key score1 member1 score2 member2]</a> 向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zcard.html" target="_blank" rel="noopener">ZCARD key</a> 获取有序集合的成员数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zcount.html" target="_blank" rel="noopener">ZCOUNT key min max</a> 计算在有序集合中指定区间分数的成员数</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zincrby.html" target="_blank" rel="noopener">ZINCRBY key increment member</a> 有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zinterstore.html" target="_blank" rel="noopener">ZINTERSTORE destination numkeys key key …]</a> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zlexcount.html" target="_blank" rel="noopener">ZLEXCOUNT key min max</a> 在有序集合中计算指定字典区间内成员数量</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrange.html" target="_blank" rel="noopener">ZRANGE key start stop WITHSCORES]</a> 通过索引区间返回有序集合指定区间内的成员</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrangebylex.html" target="_blank" rel="noopener">ZRANGEBYLEX key min max LIMIT offset count]</a> 通过字典区间返回有序集合的成员</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrangebyscore.html" target="_blank" rel="noopener">ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</a> 通过分数返回有序集合指定区间内的成员</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrank.html" target="_blank" rel="noopener">ZRANK key member</a> 返回有序集合中指定成员的索引</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrem.html" target="_blank" rel="noopener">ZREM key member member …]</a> 移除有序集合中的一个或多个成员</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zremrangebylex.html" target="_blank" rel="noopener">ZREMRANGEBYLEX key min max</a> 移除有序集合中给定的字典区间的所有成员</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html" target="_blank" rel="noopener">ZREMRANGEBYRANK key start stop</a> 移除有序集合中给定的排名区间的所有成员</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html" target="_blank" rel="noopener">ZREMRANGEBYSCORE key min max</a> 移除有序集合中给定的分数区间的所有成员</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrevrange.html" target="_blank" rel="noopener">ZREVRANGE key start stop WITHSCORES]</a> 返回有序集中指定区间内的成员，通过索引，分数从高到低</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html" target="_blank" rel="noopener">ZREVRANGEBYSCORE key max min WITHSCORES]</a> 返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrevrank.html" target="_blank" rel="noopener">ZREVRANK key member</a> 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zscore.html" target="_blank" rel="noopener">ZSCORE key member</a> 返回有序集中，成员的分数值</td></tr><tr><td align="left">19</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zunionstore.html" target="_blank" rel="noopener">ZUNIONSTORE destination numkeys key key …]</a> 计算给定的一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td align="left">20</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zscan.html" target="_blank" rel="noopener">ZSCAN key cursor [MATCH pattern] [COUNT count]</a> 迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><h1 id="二-、应用"><a href="#二-、应用" class="headerlink" title="二 、应用"></a>二 、应用</h1><h2 id="1-Java连接Redis"><a href="#1-Java连接Redis" class="headerlink" title="1 Java连接Redis"></a>1 Java连接Redis</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树相关知识一</title>
      <link href="/2019/04/11/er-cha-shu-xiang-guan-zhi-shi-yi/"/>
      <url>/2019/04/11/er-cha-shu-xiang-guan-zhi-shi-yi/</url>
      
        <content type="html"><![CDATA[<p><strong>数据结构之二叉树</strong></p><a id="more"></a><h4 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h4><ol><li><p>树的相关概念：</p><ul><li><p>高度：从结点x向下到某个叶结点<strong>最长简单路径</strong>中<strong>边的条数</strong>。其初值一般为1。</p></li><li><p>深度：是从根节点往下</p><p>即：对于整棵树来说，最深的叶结点的深度就是树的深度；树根的高度就是树的高度。这样树的高度和深度是相等的。</p><p> 对于树中<strong>相同深度</strong>的每个结点来说，它们的<strong>高度不一定相同</strong>，这取决于每个结点下面的叶结点的深度。</p></li></ul></li><li><p>二叉树(Binary Tree)是n(n&gt;=0)个元素的有序集合，该集合或者为空，或者有一个成为根(root)的元素及两个不相交的、分别被称为左子树和右子树的二叉树组成。</p><img src="http://img.cdn.lemenk.top/p1.jpg" width="300" height=""></li></ol><h4 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h4><p>​        满二叉树：如果该二叉树的叶子节点全在最后一层，并且结点总数=2^n-1，n为树的高度，则我们称为满二叉树。</p><p>​        完全二叉树：如果该二叉树的所有叶子节点都在最下面两层，而且最后一层的叶子节点在左边连续，倒数第二层的叶子节点在右边连续，我们称为完全二叉树。</p><h4 id="三、二叉树的遍历"><a href="#三、二叉树的遍历" class="headerlink" title="三、二叉树的遍历"></a>三、二叉树的遍历</h4><ol><li>前序遍历：从根节点开始，先输出当前节点，若左节点不为空，则继续前序遍历，直到左节点为空。此时遍历此节点的父节点的右节点，得到，若右节点不为空，则继续递归前序遍历。</li><li>中序遍历：若当前节点的左节点不为空，则递归中序遍历，输出当前节点，然后若当前节点的右节点不为空，则继续递归中序遍历。</li><li>后序遍历，如果当前节点的左节点不为空，则递归后序遍历，若当前节点的有节点不为空，则递归后序遍历，输出当前节点。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP和HTTPS的区别</title>
      <link href="/2019/04/07/http-he-https-de-qu-bie/"/>
      <url>/2019/04/07/http-he-https-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h4 id="面试常问之HTTP"><a href="#面试常问之HTTP" class="headerlink" title="面试常问之HTTP"></a>面试常问之HTTP</h4><a id="more"></a><h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p><strong>HTTP</strong>：是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（TCP），用于从WWW服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少。</p><p><strong>HTTPS</strong>：是以安全为目标的HTTP通道，简单讲是HTTP的安全版，即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。</p><h3 id="二、特点及工作流程"><a href="#二、特点及工作流程" class="headerlink" title="二、特点及工作流程"></a>二、特点及工作流程</h3><h4 id="1、HTTP特点"><a href="#1、HTTP特点" class="headerlink" title="1、HTTP特点"></a>1、HTTP特点</h4><ol><li>支持客户/服务器模式，即C/S模式；</li><li>简单快速</li><li>灵活：可以传输任意类型的数据对象</li><li>无连接：限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，立即断开连接。采用这种方式可以节省传输时间。</li><li>无状态：HTTP协议是<em>无状态协议</em>。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快</li></ol><h4 id="2、HTTP工作流程"><a href="#2、HTTP工作流程" class="headerlink" title="2、HTTP工作流程"></a>2、HTTP工作流程</h4><ol><li>建立TCP/IP连接，客户端和服务器通过三次握手建立连接；</li><li>客户端发起HTTP请求（例如：POST/index.html http/1.1）；</li><li>客户端发送请求头和请求信息</li><li>服务器做出应答</li><li>服务器发送应答头</li><li>服务器发送客户端需要的数据</li><li>服务端关闭连接</li></ol><h4 id="3、HTTPS特点"><a href="#3、HTTPS特点" class="headerlink" title="3、HTTPS特点"></a>3、HTTPS特点</h4><ol><li>内容加密：采用混合加密技术，中间者无法直接查看明文内容</li><li>验证身份：通过证书认证客户端访问的是自己的服务器</li><li>护数据完整性：防止传输的内容被中间人冒充或者篡改</li></ol><h4 id="4、HTTPS工作流程"><a href="#4、HTTPS工作流程" class="headerlink" title="4、HTTPS工作流程"></a>4、HTTPS工作流程</h4><ol><li>客户使用https的URL访问Web服务器，要求与Web服务器建立SSL连接。</li><li>Web服务器收到客户端请求后，会将网站的证书信息（证书中包含公钥）传送一份给客户端。</li><li>客户端的浏览器与Web服务器开始协商SSL连接的安全等级，也就是信息加密的等级。</li><li>客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站。</li><li>Web服务器利用自己的私钥解密出会话密钥。</li><li>Web服务器利用会话密钥加密与客户端之间的通信。</li></ol><h3 id="三、区别"><a href="#三、区别" class="headerlink" title="三、区别"></a>三、区别</h3><ol><li>https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</li><li>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议。</li><li>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</li><li>http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码</title>
      <link href="/2019/04/07/http-zhuang-tai-ma/"/>
      <url>/2019/04/07/http-zhuang-tai-ma/</url>
      
        <content type="html"><![CDATA[<p><strong>面试常问之HTTP状态码</strong></p><a id="more"></a><p>HTTP协议中提供了好多状态码，列举我们常用的：</p><ul><li>200 返回正常</li><li>304 服务端资源无变化，可使用缓存资源</li><li>400 请求参数不合法</li><li>401 未认证</li><li>403 服务端禁止访问该资源</li><li>404 服务端未找到该资源</li><li>500 服务端异常</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GET和POST的区别</title>
      <link href="/2019/04/07/get-he-post-de-qu-bie/"/>
      <url>/2019/04/07/get-he-post-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h4 id="面试常问之GET与POST"><a href="#面试常问之GET与POST" class="headerlink" title="面试常问之GET与POST"></a>面试常问之GET与POST</h4><a id="more"></a><p>GET和POST都是HTTP协议的请求方式，底层实现都是基于TCP/IP协议。</p><p>基础回答：</p><ol><li>GET请求参数是放在URL里面的，POST是放在请求体中的；</li><li>GET请求的URL传参有长度限制，而POST请求没有</li><li>FET请求的参数只能是ASCII码，所以中文需要URL编码，而POST请求传参没有这个限制；</li></ol><p>高级回答：(本质区别)</p><ol><li>GET：向服务器获取指定资源；</li><li>POST：向服务器提交数据，数据放在请求体中；</li></ol><p>总结：GET一般用于查询，而POST用于修改</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> HTTP </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVAWEB学习笔记</title>
      <link href="/2019/03/25/javaweb-xue-xi-bi-ji/"/>
      <url>/2019/03/25/javaweb-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>JAVAWEB学习笔记</strong></p><a id="more"></a><h1 id="一、JSP相关笔记"><a href="#一、JSP相关笔记" class="headerlink" title="一、JSP相关笔记"></a>一、JSP相关笔记</h1><h3 id="JSP简介"><a href="#JSP简介" class="headerlink" title="JSP简介"></a>JSP简介</h3><ol><li>JSP全称<strong>Java Server Pages</strong>，是一种<strong>动态网页开发技术</strong>。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</li><li>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</li><li>JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</li><li>JSP标签有多种功能，比如访问数据库、记录用户选择信息、访问JavaBeans组件等，还可以在不同的网页中传递控制信息和共享信息。</li></ol><h3 id="JSP环境搭建"><a href="#JSP环境搭建" class="headerlink" title="JSP环境搭建"></a>JSP环境搭建</h3><ol><li>JDK环境配置</li><li>Tomcat环境配置</li><li>在IDEA或Eclipse中配置Tomcat</li></ol><h3 id="JSP基础语法"><a href="#JSP基础语法" class="headerlink" title="JSP基础语法"></a>JSP基础语法</h3><h4 id="三种语法"><a href="#三种语法" class="headerlink" title="三种语法"></a>三种语法</h4><ol><li><pre class=" language-jsp"><code class="language-jsp"><% 代码片段 %></code></pre></li><li><pre class=" language-jsp"><code class="language-jsp"><%! int i = 0; %><%! string a = "abc"; %></code></pre></li><li><pre class=" language-jsp"><code class="language-jsp"><%= 表达式></code></pre></li></ol><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre class=" language-jsp"><code class="language-jsp"><%-- jsp代码注释，不会在网页中显示 --%></code></pre><p>注：java注释可以写在java代码行中</p><h3 id="JSP九大对象"><a href="#JSP九大对象" class="headerlink" title="JSP九大对象"></a>JSP九大对象</h3><ol><li><p>request：请求对象；存储客户端向服务端发送的请求信息。</p><p>常见方法</p><ul><li>String getParameter(String name)：根据请求的字段名key，返回字段值value。</li><li>String[] getParameterValue(String name)：根据请求的字段名key，返回多个字段值value。常见如多选按钮中。</li><li>void setCharacterEncoding(“utf-8”)：设置请求编码</li><li>getRequestDispatcher(b.jsp).forward(request,response)：请求转发的方式跳转页面</li><li>getServerContext()：获取页面的ServletContext对象</li></ul><p>例子：用户注册及展示：</p><pre class=" language-jsp"><code class="language-jsp"><%-- register.jsp --%><%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><!DOCTYPE html><html><head><meta charset="UTF-8"><title>用户注册页面</title></head><body>    <form action="show.jsp">        用户名：<input type="text" name = "uname"/><br>        密&nbsp;&nbsp;&nbsp;码：<input type="password" name = "upwd"/><br>        年&nbsp;&nbsp;&nbsp;龄：<input type="text" name = "uage"/><br>        爱&nbsp;&nbsp;&nbsp;好：<br>            <input type="checkbox" name = "uhobbies" value = "足球"/>足球            <input type="checkbox" name = "uhobbies" value = "篮球"/>篮球            <input type="checkbox" name = "uhobbies" value = "乒乓球"/>乒乓球        <input type="submit" value = "注册">    </form></body></html></code></pre><pre class=" language-jsp"><code class="language-jsp"><%--show.jsp--%><%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><!DOCTYPE html><html><head><meta charset="UTF-8"><title>用户信息展示页面</title></head><body>    <%         //设置编码        request.setCharacterEncoding("utf-8");        //通过uname获取name值        String name = request.getParameter("uname");        //通过upwd获取pwd值        String pwd = request.getParameter("upwd");        //通过uage获取age值        int age = Integer.parseInt(request.getParameter("uage"));        //通过uhobbies值获取hobbies数组        String[] hobbies = request.getParameterValues("uhobbies");    %>    注册成功，信息如下：<br>    姓名：<%=name %><br>    <%        if(age<=0||age>100){            age = 0;        }    %>    年龄：<%=age %><br>    密码：<%=pwd %><br>    爱好：    <%    if(pwd != null){        for(String hobby : hobbies){            out.print(hobby + "&nbsp;");            }        }</code></pre></li></ol><pre><code>   %&gt;</code></pre>         ```<p>   <img src="http://ww1.sinaimg.cn/large/006zQofnly1gab0y6zouej30b706oq2y.jpg" alt="项目图解"></p><ol start="2"><li><p>response：响应对象</p><p>常见方法：</p><ul><li>void addCookie(Cookie cookie)：服务端向客户端增减cookie对象</li><li>void sendRedirect(String location) throws IOException：页面跳转的一种方式（重定向）</li><li>void setContentType(String type)：设置服务端响应编码</li></ul><p>例子：用户登陆</p><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><!DOCTYPE html><html><head><meta charset="UTF-8"><title>用户登陆页面</title></head><body>    <form action="check.jsp" method = "post">        用户名：<input type="text" name = "uname"/><br>        密&nbsp;&nbsp;&nbsp;码：<input type="password" name = "upwd"/><br>        年&nbsp;&nbsp;&nbsp;龄：<input type="text" name = "uage"/><br>        <input type="submit" value = "登陆">    </form></body></html></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><!DOCTYPE html><html><head><meta charset="UTF-8"><title>登陆校验页面</title></head><body><%request.setCharacterEncoding("utf-8");String name = request.getParameter("uname");String pwd = request.getParameter("upwd");if(name.equals("zs") && pwd.equals("abc")){    //response.sendRedirect("success.jsp");//重定向方式出错    //使用requset的请求转发    request.getRequestDispatcher("success.jsp").forward(request, response);}else{    //登录失败    out.print("用户名或者密码错误");}%></body></html></code></pre><pre class=" language-jsp"><code class="language-jsp"><%@ page language="java" contentType="text/html; charset=UTF-8"    pageEncoding="UTF-8"%><!DOCTYPE html><html><head><meta charset="UTF-8"><title>欢迎界面</title></head><body>登陆成功！<br>欢迎您：<%String name = request.getParameter("uname");out.print(name);%></body></html></code></pre><p>注：在使用response的重定向方式时会出现<code>欢迎您：null</code>的错误。而使用request的请求转发方式时会正确显示。</p><p><a href="https://blog.csdn.net/u010452388/article/details/80398929" target="_blank" rel="noopener">转：请求转发与重定向的区别-&gt;</a></p></li><li><p>out：输出对象，向客户端输出内容</p></li><li><p>session</p></li><li><p>application </p></li><li><p>config</p></li><li><p>pageContext</p></li><li><p>page</p></li><li><p>Exception</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JAVAWEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVAWEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2019/03/08/she-ji-mo-shi/"/>
      <url>/2019/03/08/she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>设计模式学习笔记</strong></p><a id="more"></a><p>这篇博客是阅读《设计模式之禅》之后写的笔记，留着以后复习。</p><h3 id="一、单例模式"><a href="#一、单例模式" class="headerlink" title="一、单例模式"></a>一、单例模式</h3><ol><li><p>定义：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。</p><p>通过使用private的构造函数确保了在一个应用中之产生一个自行实例化的实例。</p></li><li><p>通用代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Singleton singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//限制多个对象</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过该方法获得对象实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类中其他方法，尽量是static</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>优缺点</p><ul><li>优点：<ul><li>在内存中只有一个实例，减小了内存开销</li><li>只生成一个实例，减少了系统的性能开销</li><li>只有个对象对资源进行操作，避免了对资源的多重占用</li><li>可以在系统设置全局的访问点，优化和共享资源访问</li></ul></li><li>缺点：<ul><li>单例模式一般无接口，拓展困难，只能修改源码</li><li>测试时操作复杂</li></ul></li></ul></li><li><p>使用场景：</p><ul><li>生成唯一序列号的环境</li><li>建立共享访问点，例如web页面的计数器，可以把每次刷新的数据保存到单例模式中，并且轲确保线程安全。</li><li>创建一个对象需要消耗资源过多时，例如访问IO和数据库；</li><li>需要定义大量的静态常量和静态方法的环境。</li></ul></li><li><p>饿汉式和懒汉式</p><ol><li><p>饿汉式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonEH</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonEH singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonEH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingletonEH</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonEH <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton:"</span><span class="token operator">+</span>singleton<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"加载饿汉式...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>线程安全</li><li>无锁，执行效率高</li><li>对象在类加载时就初始化，浪费内存，容易产生垃圾对象</li></ul></li><li><p>懒汉式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLH</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonLH singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingletonLH</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLH <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>对象在调用<code>getSingleton()</code>方法时生成</p></li><li><p>线程不安全</p><p>线程安全的写法，将<code>getSingleton()</code>用synchronized修饰</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLH</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonLH singleton<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingletonLH</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> SingletonLH <span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLH</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol></li></ol><h3 id="二、工厂方法模式"><a href="#二、工厂方法模式" class="headerlink" title="二、工厂方法模式"></a>二、工厂方法模式</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习笔记</title>
      <link href="/2018/11/25/mysql-xue-xi-bi-ji/"/>
      <url>/2018/11/25/mysql-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>MySQL数据库学习笔记</strong></p><a id="more"></a><h1 id="入门语句："><a href="#入门语句：" class="headerlink" title="入门语句："></a>入门语句：</h1><ol><li><p>登陆服务器：mysql -u(用户名) -p(密码)。例：mysql -uroot -p123</p></li><li><p>登陆成功后需要选库：</p><ul><li>选库语句：use 数据库名</li><li>查看有哪些库：show databases;</li></ul></li><li><p>查看当前库下的所有表：</p><pre class=" language-mysql"><code class="language-mysql">show tables;</code></pre></li><li><p>创建一个数据库：create database 数据库名 [字符集]；</p><pre class=" language-mysql"><code class="language-mysql">create database yy1 charset utf8;</code></pre></li><li><p>删除一个数据库：drop database 数据库名 ;</p><pre class=" language-mysql"><code class="language-mysql">drop database yy1;</code></pre></li><li><p>新建一个简单表：</p><pre class=" language-mysql"><code class="language-mysql">create table stu(sid int;sname varchar(10))engine myisam charset utf8;</code></pre><p>注：<code>engine myisam charset utf8</code>是选择数据库引擎和字符集编码格式。</p></li><li><p>删除表：drop table 表名;</p><pre class=" language-mysql"><code class="language-mysql">drop table stu;</code></pre></li><li><p>向表中插入数据</p><pre class=" language-mysql"><code class="language-mysql">insert into stu values    (1,'zhangsan'),    (2,'lisi'),    (3,'wangwu');</code></pre></li><li><p>清空表数据：truncate 表名；</p><p>注：truncate相当于删除表再重建一张相同结构的表</p><p>​        delete是从删除表中的行来操作的。</p></li><li><p>解决cmd窗口中文乱码问题：</p><p>CMD默认字符集是GBK编码，可以通过下面语句改变默认字符集。</p><pre class=" language-mysql"><code class="language-mysql">set names utf8;</code></pre></li><li><p>查看表结构：desc 表名;</p></li></ol><h1 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h1><h2 id="增加数据-insert"><a href="#增加数据-insert" class="headerlink" title="增加数据 insert"></a>增加数据 insert</h2><ol><li><p>插入元组</p><ul><li><p>若未写明添加哪些列，则默认添加所有列的数据。</p><pre class=" language-mysql"><code class="language-mysql">insert into stuvalues(1,'刘备')；</code></pre><p>注：所添加的数据必须与表中的列有一一对应。</p></li><li><p>若在into中出现了数据列，则需要按照into语句中的顺序添加数据。</p><pre class=" language-mysql"><code class="language-mysql">insertinto stu(id)values(2),values(3);</code></pre><pre class=" language-mysql"><code class="language-mysql">insertinto stu(id,name)values(4,'张辽');</code></pre><p>注：into子句中没有出现的属性列，新元组将在这些列上去空值。但若在创建表时使用了not null属性，则不能取空值，会取默认值。</p><p><strong>字符串常数要用单引号括起来。</strong></p></li></ul></li><li><p>插入子查询结果</p><pre class=" language-mysql"><code class="language-mysql">insertinto<表名>[属性列]子查询语句;</code></pre><p>例：对每一个系中，求学生的平均年龄，并把结果存入数据库。</p><p>解：先建一张表，存放系名和学生平均年龄。</p><pre class=" language-mysql"><code class="language-mysql">create table dept_age(Sdept char(15)Avg_age SMALLINT)engine myisam charset utf8;</code></pre><p>然后对Sutdent表按系分组求平均值，再把数据放到新表中。</p><pre class=" language-mysql"><code class="language-mysql">insertinto Dept_age(Sdept,Avg_age)select Sdept,AVG(Sage)from Studentgroup by Sdept;</code></pre></li></ol><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>update&lt;表名&gt; set &lt;列名&gt;=&lt;表达式&gt; [where&lt;条件&gt;];</p><ol><li><p>修改某一元组的值</p><pre class=" language-mysql"><code class="language-mysql">update stu set name='aa' where id=3;</code></pre></li><li><p>修改多个元组的值</p><pre class=" language-mysql"><code class="language-mysql">update stu set id=id+1;</code></pre></li><li><p>带子查询的修改语句</p></li></ol><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>delete from&lt;表名&gt; [where语句];</p><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><h1 id="关系数据库标准语言SQL"><a href="#关系数据库标准语言SQL" class="headerlink" title="关系数据库标准语言SQL"></a>关系数据库标准语言SQL</h1><p>SQL特点：</p><ul><li>综合统一</li><li>高度非过程化</li><li>面向集合的操作方式</li><li>以同一种语法结构提供多种使用方式</li><li>语法简单、易学易用</li></ul><h2 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h2><ol><li><p>模式的定义与删除</p><ul><li><p>定义：</p><pre class=" language-mysql"><code class="language-mysql">CREATE SCHEMA <模式名> AUTHORIZATION <用户名>;</code></pre><p>例：为用户WANG定义一个学生-课程模式S-T；</p><pre class=" language-mysql"><code class="language-mysql">CREATE SCHEMA "S-T" AUTHORIZATION WANG;</code></pre></li></ul></li></ol><ul><li><p>删除：</p><pre class=" language-mysql"><code class="language-mysql">DROP SCHEMA <模式名><CASCADE|RESTRICT>;</code></pre><p>CASCADE与RESTRICT二选一，CASCADE（级联）表示再删除是把该模式中所有的数据库对象全部删除；RESTRICT（限制）表示如果模式中已经定义了下属的数据库对象，则拒绝该删除语句执行。</p></li></ul><ol start="2"><li><p>基本表的定义、删除、修改</p><ul><li><p>定义：</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE<表名>(<列名><数据类型>约束条件...）</code></pre><p>例:建立一个学生表Student</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE Student(    Sno CHAR(9) PRIMARY KEY,  Sname CHAR(20) UNIQUE,    Sage SMALLINT);</code></pre></li><li><p>修改：</p><pre class=" language-mysql"><code class="language-mysql">ALTER TABLE<表名>[ADD[COLUMN]<新列名><数据类型>[完整性约束]]...;</code></pre><p>例：向Student表增加“入学时间”列，数据类型为日期型</p><pre class=" language-mysql"><code class="language-mysql">ALTER TABLE Student ADD S_entrance DATE;</code></pre></li></ul></li></ol><ul><li><p>删除：</p><pre class=" language-mysql"><code class="language-mysql">DROP TABLE <表名> [RESTRICT|CASCADE];</code></pre><p>例：删除Student表</p><pre class=" language-mysql"><code class="language-mysql">DROP TABLE Student CASCADE；</code></pre></li></ul><ol start="3"><li><p>索引的建立、修改和删除</p><ul><li><p>建立：</p><pre class=" language-mysql"><code class="language-mysql">CREATE [UNIQUE] [CLUSTER] INDEX <索引名> ON <表名>(<列名> [<次序>] [,<列名> [<次序>]]...);</code></pre><p>次序可以选则ASC（升序）或者DESC（降序），默认为ASC；</p><p>例：为学生-课程数据库中Student、SC两个表建立索引，Student按照学号升序，SC表按照学号降序和课程号降序建唯一索引。</p><pre class=" language-mysql"><code class="language-mysql">CREATE UNIQUE INDEX Stusno ON Student(Sno);CREATE UNIQUE INDEX SCno ON SC (Sno ASC,Cno DESC);</code></pre></li></ul></li></ol><ul><li><p>修改索引：</p><pre class=" language-mysql"><code class="language-mysql">ALTER INDEX <旧索引名> RENAME TO <新索引名>;</code></pre></li></ul><ul><li><p>删除索引：</p><pre class=" language-mysql"><code class="language-mysql">DROP INDEX <索引名>;</code></pre></li></ul><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><p>一般格式：</p><pre class=" language-mysql"><code class="language-mysql">SELECT [ALL|DISTINCT] <目标列表达式> [,<目标表达式>] ... FROM <表名或视图名> [,<表名或视图名>...] | (<SELECT语句>) [AS] <别名> [WHERE<条件表达式>] [ GROUP BY <列名1> [HAVING <条件表达式>]] [ ORDER BY <列名2> [ASC|DESC]];</code></pre><p>含义：根据WHERE子句的条件表达式从FROM自居指定的基本表、视图或者派生表中找到满足条件的元组，再按照SELECT子句中的目标列表达式选出元组中的属性值形成的结果表。<strong>如果有GROUP BY 子句</strong>，则将结果按&lt;列名1&gt;的值进行分组，该属性列值相等的元组为一个组。通常会在每个组中作用聚集函数。<strong>如果GROUP BY 子句带HAVING短语</strong>，则只有满足指定条件的组才予以输出。<strong>如果有OEDER BY子句</strong>，则结果表还要按&lt;列名2&gt;的值的升序或者降序排序。</p><p>运算符：</p><ul><li><p>简单条件运算符：</p></li><li><p>大于：&gt;  </p><p>小于：&lt;    </p><p>不等于：&lt;&gt;  </p><p>大于等于：&gt;=  </p><p>小于等于：&lt;=</p></li><li><p>逻辑运算符：</p><p>and ：与</p><p>or ：或</p><p>not：非</p></li><li><p>模糊查询：</p><p>like：一般与通配符一起使用</p><pre class=" language-mysql"><code class="language-mysql">SELECT     * FROM     employees WHERE     last_name LIKE '%a%';#   %通配符</code></pre><pre class=" language-mysql"><code class="language-mysql">SELECT     last_name     salary FROM     employees WHERE     last_name LIKE '%_n_1%';#   _通配符</code></pre><p>between and ：并包含临界值</p><pre class=" language-mysql"><code class="language-mysql">SELECT    *FROM    employeesWHERE     employee_id BETWEEN 100 AND 120;</code></pre><p>in：用于判断某字段的值是否属于in列表中的某一项</p><pre class=" language-mysql"><code class="language-mysql">SELECT    last_name,job_idFROM    employeesWHERE     job_id IN('IT_PRO','AD_VP','AD_PRES');</code></pre><p>is null：用于判断是否时null值</p></li></ul><p>通配符：</p><p>%:任意长度字符</p><p>_:单个字符</p><ol><li><p>单表查询</p><ul><li><p>选择表中的若干列</p><p>例：查询全体学生的详细记录</p><pre class=" language-mysql"><code class="language-mysql"> SELECT * FROM Student;</code></pre></li><li><p>选择表中的若干元组</p><ul><li><p>消除取值重复的行(关键词为DISTINCT,默认为ALL)</p><pre class=" language-mysql"><code class="language-mysql">SELECT DISTINCT Sno FROM SC;</code></pre></li><li><p>查询满足条件的元组</p><pre class=" language-mysql"><code class="language-mysql">SELECT DISTINCT Sno FROM SC WHERE Sname=Like;</code></pre></li></ul></li></ul></li></ol><pre><code> - 对查询结果降序排序   ```mysql   SELECT * FROM employees ORDER BY salary DESC;   ```</code></pre><h2 id="DML语言"><a href="#DML语言" class="headerlink" title="DML语言"></a>DML语言</h2><ol><li><p>插入语句</p><p>insert into 表名 (表名，……) values (值1，……);</p><pre class=" language-mysql"><code class="language-mysql">INSERT INTO beauty (id,NAME,sex,borndate,phone) VALUES(13,'唐艺夕'，'女'，'1990-4-23','18162662320')； </code></pre></li><li><p>修改语句</p><ul><li><p>修改单表</p><p>update 表名 set 列=新值，列=新值，…… where 条件；</p><pre class=" language-mysql"><code class="language-mysql">UPDATE beauty SET phone = '13899951633' WHERE NAME LIKE '刘%';</code></pre></li></ul></li></ol><ul><li><p>修改多表</p><p>update 表1 别名，表2 别名 set 列=值 where 连接条件 and 筛选条件</p><pre class=" language-mysql"><code class="language-mysql">UPDATE boys bo INNER JOIN beauty b ON bo.'id'=b.'boyfriend_id'WHERE bo.'boyName'='张无忌'；</code></pre></li></ul><ol start="3"><li><p>删除语句</p><ul><li><p>delete：删除某一元组</p><p>delete from 表名 where 筛选条件</p></li><li><p>truncate：清空表数据</p><p>truncate table 表名</p></li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础</title>
      <link href="/2018/10/27/shu-ju-ku/"/>
      <url>/2018/10/27/shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<p><strong>数据库基础相关笔记</strong></p><a id="more"></a><h3 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h3><ol><li><p>数据（data）：数据库基本对象。是描述事物都符号记录。</p></li><li><p>数据库（DataBase）：是长期存储在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按一定的数据模型祖师、描述和储存，具有较小的冗余度、较小的数据独立性和易扩展性，并可谓各种用户共享。概括来讲，数据库数据具有永久性、有组织和可共享的三个基本特征。</p></li><li><p>数据库系统（DataBaseManagement System,DBMS）:</p><p>主要功能包括：</p><ul><li>数据定义功能</li><li>数据组织、存储和管理</li><li>数据操纵功能：数据库操纵语言（DML），增删改查</li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li><li>其他功能</li></ul></li><li><p>数据库系统（DataBase System，DBS）：由数据库、数据库管理系统、应用程序和数据库管理员组成。</p><ul><li>数据结构化</li><li>数据的共享性高、冗余度低且易扩充</li><li>数据独立性高：包括物理独立性和逻辑独立性，由数据库管理系统的二级映像功能来保证</li><li>数据由数据库管理系统统一管理和控制</li></ul></li><li><p>数据模型的组成要素：数据结构、数据操作和数据的完整性约束条件</p><ul><li>数据结构：描述数据库的组成对象以及对象之间的联系，是对系统静态特性的描述</li><li>数据操作：对对象进行操作的集合，是对系统动态特性的描述</li><li>书库的完整性约束条件</li></ul></li><li><p>常用的数据模型</p><ul><li><p>层次模型（类似树）</p><ul><li>层次模型的数据结构：<ul><li>有且只有一个节点而且没有双亲结点，成为根节点</li><li>跟意外的其他节点有且只有一个双亲结点</li></ul></li><li>数据操纵和完整性约束<ul><li>插入时没有双亲节点则不能插入</li><li>删除时要删除双亲结点则对应的子节点也会被删除</li><li>更新时应更新所有记录，保证一致性</li></ul></li><li>优缺点：<ul><li>优点：<ul><li>层次模型数据结构比较简单清晰</li><li>查询效率高</li><li>由良好的完整性支持</li></ul></li><li>缺点：<ul><li>现实事物大多是非层次性</li><li>结构太过严密，命令趋于结构化</li></ul></li></ul></li></ul></li><li><p>网状模型（层次模型是一种特殊的网状模型）</p><ul><li>数据结构（双亲结点与子节点的联系不唯一）<ul><li>允许一个以上的结点无双亲</li><li>一个节点可以有多于一个的双亲</li></ul></li><li>数据操纵和完整性约束<ul><li>码：唯一标识记录的数据项的集合</li><li>保证一个联系中双亲记录和子女记录之间是一对多的联系</li><li>可以支持双亲记录和子女记录之间的某些约束条件</li></ul></li><li>优缺点：<ul><li>优点：<ul><li>能较好描述现实世界</li><li>性能良好</li></ul></li><li>缺点：<ul><li>结构复杂</li><li>网状的DDL和DML复杂，需要嵌入到高级语言中</li><li>存取路径复杂，不便于编写应用程序</li></ul></li></ul></li></ul></li><li><p>关系模型</p><ul><li>数据结构：（二维表）<ul><li>关系：一个关系对应一张表</li><li>元组：表中的一行，也称为记录</li><li>属性：表中的一列</li><li>码：表中的某个属性组，可唯一标识一个元组</li><li>域：是一组具有相同数据类型的值的集合</li><li>分量：元组中的一个属性值（不可分的最小单位）</li><li>关系模式：关系名（属性1，属性2…）</li></ul></li></ul></li></ul></li><li><p>模式：数据库中全体数据的逻辑结构和特征的描述。</p><p>模式的一个具体值成为实例，模式是相对稳定的，而实例是相对变动的。</p><ul><li><p>三级结构模式：外模式、内模式和模式</p><img src="http://img.cdn.lemenk.top/DB1.PNG"><ul><li>模式：也成为逻辑模式，是数据库全体数据的逻辑结构和特征的描述。DDL语言定义模式。一个数据库只有一个模式</li><li>外模式：也称为子模式，与应用程序有关，是模式的子集。一个数据库可以有多个外模式</li><li>内模式：与物理存储和硬件有关系。一个数据库只有一个内模式，是数据在数据库的祖师模式。</li></ul></li><li><p>二层映像</p><ul><li>外模式/模式映像：当模式改变时，有数据库管理员对各个外模式/模式映像坐享应该百年，可以使外模式保持不变，应用程序也不需要改变。保证了数据与程序的逻辑独立性。</li><li>模式/内模式映像：数据库结构发生变化，数据库管理员对映像做相应改变，从而应用程序也不必该百年。保证了数据与程序的物理独立性。</li></ul></li></ul></li><li><p>语法规范：</p><ul><li>不区分大小写，但建议关键字大写，表名、列名小写；</li><li>每条命令最好以分号结尾；</li><li>每条命令根据需要可以进行缩进或换行。建议关键字单独一行；</li><li>注释：<ul><li>单行：#文字</li><li>单行：–注释文字</li><li>多行注释：/* 文字 */</li></ul></li></ul></li></ol><p><a href="./2018/11/25/MySQL学习笔记/">下一篇：数据库语句</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2018/09/12/dui-pai-xu/"/>
      <url>/2018/09/12/dui-pai-xu/</url>
      
        <content type="html"><![CDATA[<p><strong>排序算法之堆排序</strong></p><a id="more"></a><p>堆排序是将数据看成是完全二叉树，根据完全二叉树的特性来进行排序的一种算法。</p><ol><li><p>大根堆和小根堆</p><ul><li>大根堆：每个结点的值都大于其左孩子和右孩子结点的值</li><li>小根堆每个结点的值都小于其左孩子和右孩子结点的值</li></ul></li><li><p>基本思想</p><ol><li>先将待排序的数组构造成一个大根堆，此时数组的最大值就是堆结构的顶端；</li><li>将顶端的数与末尾的数进行交换，此时末尾的数为最大值，剩余待排序的数的个数为n-1；</li><li>将剩余的n-1个数再构造成大根堆，再将顶端数与n-1-1位置的数进行交换，如此反复执行，便能得到1有序数组.</li></ol></li><li><p>代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造大根堆</span>        <span class="token function">maxHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//固定最大值</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构造大根堆</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//构造大根堆（通过新插入的数上升）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">maxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//当前插入的索引</span>            <span class="token keyword">int</span> currentIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//父结点索引</span>            <span class="token keyword">int</span> fatherIndex <span class="token operator">=</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果当前插入的值大于其父结点的值,则交换值，并且将索引指向父结点</span>            <span class="token comment" spellcheck="true">//然后继续和上面的父结点值比较，直到不大于父结点，则退出循环</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>fatherIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//交换当前结点与父结点的值</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> currentIndex<span class="token punctuation">,</span> fatherIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将当前索引指向父索引</span>                currentIndex <span class="token operator">=</span> fatherIndex<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//重新计算当前索引的父索引</span>                fatherIndex <span class="token operator">=</span> <span class="token punctuation">(</span>currentIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将剩余的数构造成大根堆（通过顶端的数下降）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> largestIndex<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断孩子中较大的值的索引（要确保右孩子在size范围之内）</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>                largestIndex <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                largestIndex <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//largestIndex = (arr[left] &lt; arr[right] &amp;&amp; right &lt; size) ?  right : left;//三元运算符</span>            <span class="token comment" spellcheck="true">//比较父结点的值与孩子中较大的值，并确定最大值的索引</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largestIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                largestIndex <span class="token operator">=</span> index<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果父结点索引是最大值的索引，那已经是大根堆了，则退出循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> largestIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//父结点不是最大值，与孩子中较大的值交换</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> largestIndex<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//将索引指向孩子中较大的值的索引</span>            index <span class="token operator">=</span> largestIndex<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//重新计算交换之后的孩子的索引</span>            left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//交换数组中两个元素的值</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序</title>
      <link href="/2018/09/09/xi-er-pai-xu/"/>
      <url>/2018/09/09/xi-er-pai-xu/</url>
      
        <content type="html"><![CDATA[<p><strong>排序算法之希尔排序</strong></p><a id="more"></a><p><strong>希尔排序</strong>(Shell’s Sort)是插入排序的一种又称“缩小增量排序”，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。</p><p>算法思想：</p><ol><li>首先它把较大的数据集合依据步长（步长=数组长度/2）分割成若干个小组（逻辑上分组），然后对每一个小组分别进行插入排序。</li><li>然后将步长减半，得到新的小组，继续进行插入排序。</li><li>依此类推，直到数组有序</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历所有的步长</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">;</span> d<span class="token operator">></span><span class="token number">0</span> <span class="token punctuation">;</span> d<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//遍历所有的元素</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> d <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//遍历本组中所有的元素</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span>d<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">-=</span>d <span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果当前元素大于加上步长后的那个元素</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span>d<span class="token punctuation">]</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>解释：</p><p>对于数组[3,7,5,1,2,6]来说，第一次将步长d设置为数组长度的一半，即<code>int d = arr.length/2=3;</code>，然后从第一个元素开始每隔一个步长的所有元素为一个小组，对小组内的元素进行排序。即小组为[3,1]、[7,2]、[5,6]。</p><p>当j=i-d=0时，将3和1排序，此时j-=d即j=j-d=0-2=-2;跳出最内层循环，然后i++变成3，进入内层循环……</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组的相关操作</title>
      <link href="/2018/09/09/shu-zu-de-xiang-guan-cao-zuo/"/>
      <url>/2018/09/09/shu-zu-de-xiang-guan-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p><strong>JAVA数组相关笔记</strong></p><a id="more"></a><h4 id="一、数组创建"><a href="#一、数组创建" class="headerlink" title="一、数组创建"></a>一、数组创建</h4><p>数组的创建包括三个步骤：声明、创建 、赋值</p><ul><li><p>声明：<code>int[] array;</code></p></li><li><p>创建：<code>array=new int [10];</code></p></li><li><p>赋值：<code>array[0]=0;array[1]=1;array[2]=2;……</code></p><p>声明+创建：<code>int[] array=new int [10];</code></p><p>声明+创建+赋值：</p><p><code>int[] array=new int[]{0 1 2 3 4 5};</code></p><p>or：<code>int[] array={0 1 2 3 4 5};//省略写法</code></p></li></ul><h4 id="二、数组相关方法"><a href="#二、数组相关方法" class="headerlink" title="二、数组相关方法"></a>二、数组相关方法</h4><h5 id="1、输出"><a href="#1、输出" class="headerlink" title="1、输出"></a>1、输出</h5><ol><li><p>for循环遍历输出</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrays1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrays1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>输出结果</p><pre class=" language-java"><code class="language-java"><span class="token number">5</span><span class="token number">4</span><span class="token number">3</span><span class="token number">2</span><span class="token number">5</span><span class="token number">6</span><span class="token number">1</span><span class="token number">9</span><span class="token number">0</span></code></pre></li></ol><ol start="2"><li><p><code>toString()</code>方法输出</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arrays1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>输出：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre></li></ol><p><code>Arrays.toString(a)</code>方法的返回值是一个字符串，并且,和1之间有空格。</p><p>注：<code>toString()</code>源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"null"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> iMax <span class="token operator">=</span> a<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iMax <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"[]"</span><span class="token punctuation">;</span>        StringBuilder b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> iMax<span class="token punctuation">)</span>                <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包含一个空格</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="2、Arrays-sort-：对数组进行排序"><a href="#2、Arrays-sort-：对数组进行排序" class="headerlink" title="2、Arrays.sort()：对数组进行排序"></a>2、<code>Arrays.sort()</code>：对数组进行排序</h5><p><code>Arrays.sort()</code>底层使用快速排序和优化的合并排序。</p><p>快速排序主要是对基本类型数据（int,short,long等）排序；合并排序用于对对象类型进行排序。</p><p>使用不同类型的排序算法主要是由于快速排序是不稳定的，而合并排序是稳定的。（这里的稳定是指比较相等的数据在排序之后仍然按照排序之前的前后顺序排列。）对于基本数据类型，稳定性没有意义。而对于对象类型，稳定性是比较重要的，因为对象相等的判断可能只是判断关键属性，最好保持相等对象的非关键属性的顺序与排序前一直；另外一个原因是由于合并排序相对而言比较次数比快速排序少，移动（对象引用的移动）次数比快速排序多，而对于对象来说，比较一般比移动耗时。<br>补充一点合并排序的时间复杂度是nlogn, 快速排序的平均时间复杂度也是nlogn，但是合并排序的需要额外的n个引用的空间；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Arrays.sort(a);System.out.println(Arrays.toString(a));*/</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre><h5 id="3、equals-方法"><a href="#3、equals-方法" class="headerlink" title="3、equals()方法"></a>3、equals()方法</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a.equals(b):"</span><span class="token operator">+</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a==b:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"equals(a,b):"</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"a==c:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a.equals(c):"</span><span class="token operator">+</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：</p><pre class=" language-java"><code class="language-java">a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">false</span>a<span class="token operator">==</span>b<span class="token operator">:</span><span class="token boolean">false</span><span class="token function">equals</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">false</span>a<span class="token operator">==</span>c<span class="token operator">:</span><span class="token boolean">true</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">true</span></code></pre><p>从代码中可以看出数组并没有重写<code>equals()</code>方法，所以比较的是地址，因此<code>equals()</code>和<code>==</code>效果相同。因此若要判断数组元素是否相同，需要重写<code>equals()</code>方法。</p><p>重写<code>equals()</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> isNull <span class="token operator">=</span> array1 <span class="token operator">==</span> null <span class="token operator">||</span> array2 <span class="token operator">==</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isNull<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isLenEqual <span class="token operator">=</span> array1<span class="token punctuation">.</span>length <span class="token operator">==</span> array2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLenEqual<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">boolean</span> isNumEqual <span class="token operator">=</span> array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isNumEqual<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>注：== 比较的是变量(栈)内存中存放的对象的(堆)内存地址，用来判断两个对象的地址是否相同，即是否是指相同一个对象。比较的是真正意义上的指针操作。</p><p>1、比较的是操作符两端的操作数是否是同一个对象。<br>2、两边的操作数必须是同一类型的（可以是父子类之间）才能编译通过。<br>3、比较的是地址，如果是具体的阿拉伯数字的比较，值相等则为true</p><p>equals用来比较的是两个对象的内容是否相等，由于所有的类都是继承自<code>java.lang.Object</code>类的，所以适用于所有对象，如果没有对该方法进行覆盖的话，调用的仍然是Object类中的方法，而Object中的equals方法返回的却是==的判断。</p><h5 id="4、binarySearch-方法查找元素"><a href="#4、binarySearch-方法查找元素" class="headerlink" title="4、binarySearch()方法查找元素"></a>4、<code>binarySearch()</code>方法查找元素</h5><p><code>Arrays.binarySearch()</code> 方法是<code>java.util.Arrays</code>包中的一种查找元素的方法。它使用的前提是数组是有序的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数组是: "</span><span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6对应的下标是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3对应的下标是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4对应的下标是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"9对应的下标是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-1对应的下标是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"11对应的下标是："</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre class=" language-java"><code class="language-java">数组是<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token number">6</span>对应的下标是：<span class="token number">4</span><span class="token number">3</span>对应的下标是：<span class="token operator">-</span><span class="token number">4</span><span class="token number">4</span>对应的下标是：<span class="token operator">-</span><span class="token number">4</span><span class="token number">9</span>对应的下标是：<span class="token number">7</span><span class="token operator">-</span><span class="token number">1</span>对应的下标是：<span class="token operator">-</span><span class="token number">1</span><span class="token number">11</span>对应的下标是：<span class="token operator">-</span><span class="token number">9</span></code></pre><p>从程序运行结果来看，数组中没有的元素会返回不同的负数。这得从源码说起。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">binarySearch0</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>length<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>binarySearch()</code>调用<code>binarySearch0()</code>了方法。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch0</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> low <span class="token operator">=</span> fromIndex<span class="token punctuation">;</span>     <span class="token keyword">int</span> high <span class="token operator">=</span> toIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> midVal <span class="token operator">=</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>midVal <span class="token operator">&lt;</span> key<span class="token punctuation">)</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>midVal <span class="token operator">></span> key<span class="token punctuation">)</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// key found</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// key not found.</span>    <span class="token punctuation">}</span></code></pre><p>可以看到<code>Arrays.binarySearch0()</code>方法是利用二分法来查找数据的，最后对于不存在于数组中的数据的下标返回值是<code>return -(low + 1)</code>。</p><p>它对于非数组中的值的返回是这样的：假设该数据存在于数组中，并按照大小顺序排列，此时的low值是假设该数据在数组中的下标。</p><h5 id="5、字符串转数组"><a href="#5、字符串转数组" class="headerlink" title="5、字符串转数组"></a>5、字符串转数组</h5><p>使用<code>split()</code>方法</p><pre class=" language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"5 4 3 2 1"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用空格分隔字符串</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h5 id="6、数组转字符串"><a href="#6、数组转字符串" class="headerlink" title="6、数组转字符串"></a>6、数组转字符串</h5><p>使用StringBuffer的<code>append()</code>方法</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"0"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">,</span> <span class="token string">"5"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>String s <span class="token operator">:</span> arr1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行结果：<code>012345</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker中安装tomcat，并部署war项目</title>
      <link href="/2018/09/07/docker-chuang-jian-tomcat-jing-xiang-bu-shu-war-xiang-mu/"/>
      <url>/2018/09/07/docker-chuang-jian-tomcat-jing-xiang-bu-shu-war-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p><strong>Docker中安装tomcat，并部署war项目</strong></p><ol><li>新建war项目，并打成war包。</li><li>安装docker</li><li>拉取tomcat镜像</li><li>启动tomcat容器</li><li>上传war项目</li><li>访问项目</li></ol><p>教程开始。</p><h1 id="一、新建war项目，并打成war包。"><a href="#一、新建war项目，并打成war包。" class="headerlink" title="一、新建war项目，并打成war包。"></a>一、新建war项目，并打成war包。</h1><p>1、创建web项目。</p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_01.png" alt="image-20200509000324552" style="zoom:50%;"><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_02.png" alt="image-20200509000614459" style="zoom: 80%;"><p><strong>简单实验项目就不做复杂功能，只做一个index页面</strong></p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_03.png" alt="image-20200509000948707" style="zoom:50%;"><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_04.png" alt="image-20200509001159607" style="zoom: 80%;"><p>2、打包成war包。</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_05.png" alt="image-20200509001728107" style="zoom:50%;"><img src="upload%5Cimage-20200509001939683.png" alt="image-20200509001939683"></p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_05.png" alt="image-20200509001728107" style="zoom:50%;"><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_06.png" alt="image-20200509001939683"></p><p>点击加号，选择项目的目录。</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_07.png" alt="image-20200509002148921" style="zoom:50%;"><img src="upload%5Cimage-20200509002321736.png" alt="image-20200509002321736"></p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_07.png" alt="image-20200509002148921" style="zoom:50%;"><p>右键单击项目名称，选择<code>Put into Output Root</code></p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_08.png" alt="image-20200509002321736"></p><p>最终的结果。然后apply就好。</p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_09.png" alt="image-20200509002654806" style="zoom:50%;"><p>3、bulidwar包</p><p>点击bulid，选择Build Artifacts…</p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_10.png" alt="image-20200509002823186" style="zoom:50%;"><p>选择这个war包，点击build或者Rebuild。</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/docker_tomcat_war_11.png" alt="image-20200509002958253"></p><p>这样就可以在图7中的目录里找到war包。</p><p><img src="https://lemenk-img-aliyun.oss-cn-beijing.aliyuncs.com/img/image-20200509003250974.png" alt="image-20200509003250974"></p><h1 id="二、安装docker，并拉取tomcat镜像。"><a href="#二、安装docker，并拉取tomcat镜像。" class="headerlink" title="二、安装docker，并拉取tomcat镜像。"></a>二、安装docker，并拉取tomcat镜像。</h1><p>我这里使用的是centOS7。</p><p>这里可以看我另一篇docker博客，有详细的命令介绍。</p><p>拉取tomcat镜像</p><pre class=" language-shell"><code class="language-shell">$ docker  search tomcat  #查找tomcat镜像$ docker pull tomcat  #拉取最后一个版本的tomcat镜像$ docker images       #查看当前所有镜像</code></pre><p>在某一个位置创建容器挂载的目录。我在<code>/usr/local/mytomcat/webapps</code>目录下</p><pre class=" language-shell"><code class="language-shell">$ 创建容器 并挂在在这个目录下。docker run -d --name mytomcat -p 80:8080  -v /usr/local/webapps:/usr/local/tomcat/webapps  -v /etc/localtime:/etc/localtime 927899a31456# 参数说明：    #-d：让其在后台运行；--name：把当前容器修改名称为mytomcat；    #-p 80:8080：80为外部访问端口，简单来说就是浏览器中输入的端口，需要开启。8080为tomcat的端口。    #-v：挂在目录。冒号之前为宿主机的目录，后者为docker的tomcat中的目录。    #最后的数字川为docker images查询得到的这个镜像的id</code></pre><p>容器创建成功，可根据<code>docker ps -a</code>查询正在运行的容器</p><pre class=" language-shell"><code class="language-shell">$ docker ps -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMESf3239a4bc8b8        927899a31456        "catalina.sh run"   About an hour ago   Up About an hour    0.0.0.0:80->8080/tcp   mytomcat</code></pre><p>进入容器内文件：</p><pre class=" language-shell"><code class="language-shell">$ docker exec -it f3239a4bc8b8 /bin/bash    #f3239a4bc8b8为容器id#ls 此时可以看到多个目录BUILDING.txt  CONTRIBUTING.md  LICENSE    NOTICE    README.md  RELEASE-NOTES  RUNNING.txt  bin  conf  include  lib    logs  native-jni-lib  temp  webapps  webapps.dist  work</code></pre><p>此时如果使用<code>公网ip地址:80</code>会报404错误，这是因为tomcat的自带项目文件在<code>webapps.dist</code>目录下，而webapps目录为空。可通过以下操作访问tomcat首页。</p><pre class=" language-shell"><code class="language-shell">$ rm -rf webapps           #删除空文件夹$ mv webapps.dist webapps  #重命名为webapps</code></pre><p>此时可以通过公网ip地址访问tomcat首页。（80端口号可以省略）</p><h1 id="三、上传war项目，访问项目。"><a href="#三、上传war项目，访问项目。" class="headerlink" title="三、上传war项目，访问项目。"></a>三、上传war项目，访问项目。</h1><p>将步骤一中制作好的Test.war包通过ftp上传到此前设置好的<code>/usr/local/mytomcat/webapps</code>目录下。</p><p>再次进入容器内，可以看到war包和已经呗tomcat服务器解压的Test文件夹</p><pre class=" language-shell"><code class="language-shell">$ docker exec -it f3239a4bc8b8 /bin/bash$ cd webapps$ lsTest Test.war</code></pre><p>重启容器</p><pre class=" language-shell"><code class="language-shell">$ docker restart f3239a4bc8b8</code></pre><p>静待几分钟，等服务器启动刷新便可通过<code>公网ip地址:/Test</code>访问到该项目。</p><p>若需要只通过公网ip地址访问，可以修改Test.war包为ROOT.war。重启之后便可。</p><p>或者可以通过修改server.xml的方式。</p><p>至此结束。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>此次在服务器的docker部署Wab项目看似不难，但对于运维新手来说也并不是很快就能完成的。对于我这个菜鸟来说，花费了至少三个小时才完全搞明白，然后又花费了近四十分钟完成这篇博客。</p><p>其中易错点是：</p><ol><li>容器内的文件不能直接修改，必须得通过宿主机中的文件移动到webapps文件夹中，或者就使用我的方法进行目录挂载。</li><li>在其中一次尝试中看教程修改conf/server.xml文件，但是依旧不能访问。后来果断放弃。到现在也不明白如何正确修改server.xml文件。</li><li>就在最后一步，重启容器后需要等待一段时间。我有好几次倒在这一步，每次都是页面刷新转圈不能显示。然后我就心急寻找解决方案。最后一次是重启容器之后，恰好女朋友给我发消息，回复完后刷新页面竟然就访问成功了。啊哈哈哈，在这里得感谢女朋友。</li></ol><p>2020年5月9日，凌晨1点15分。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 网站运维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/2018/08/10/ji-shu-pai-xu/"/>
      <url>/2018/08/10/ji-shu-pai-xu/</url>
      
        <content type="html"><![CDATA[<p><strong>排序算法之基数排序</strong></p><a id="more"></a><p>基数排序（radix sort）属于“分配式排序”，又称“桶子法”。基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。</p><p>算法思想：先将数组中的所有元素，按照个位数字放入数组中，即二维数组<code>int[][] tmp = new int[10][arr.length];</code></p><img src="http://img.cdn.lemenk.top/p1.png" alt="第一次排序后结果" width="500" height=""><p>然后再依次拿出来放回原数组中，组成新数组[4421,11,2,23,625,6,46,72,98,189]，然后再根据十位数放入二维数组中，再依次拿出来。直到排序到最高位，即执行最大数字的位数次。</p><p>另外需要新建一个数组counts，<code>int[] counts = new int[10];</code>用来存放二维数组中有放了几个元素。每次取出时根据counts数组的数字取出。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将数组中最大数字存放在max中</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>            max<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算最大的数字是几位数</span>    <span class="token keyword">int</span> maxLength <span class="token operator">=</span> <span class="token punctuation">(</span>max<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个二维数组，用来临时存储数据</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义一个数组，用来记录在tmp中相应的数组中存放数字的数量</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据最大数字的位数决定比较的次数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>maxLength<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>n<span class="token operator">*=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//定义一个新变量，使其每次*=10</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> ys <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//分别得到余数，即数每位上的数字</span>            tmp<span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token punctuation">[</span>counts<span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把当前遍历得到的数字放入指定的数组中</span>            counts<span class="token punctuation">[</span>ys<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//记录取出的元素要放进原数组中的位置</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>counts<span class="token punctuation">.</span>length<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//记录数量的数组中当前玉树记录的数量部位0时</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>counts<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//循环取出元素</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>l<span class="token operator">&lt;</span>counts<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//取出元素</span>                    arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//记录下一个位置</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//把记录数量的数组相应位置置为0</span>                counts<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 排序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
